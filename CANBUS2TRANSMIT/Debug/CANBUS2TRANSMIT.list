
CANBUS2TRANSMIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c2c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  08008dc0  08008dc0  00018dc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080091bc  080091bc  000191bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080091c4  080091c4  000191c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080091c8  080091c8  000191c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  20000000  080091cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
  8 .bss          00000218  200001e4  200001e4  000201e4  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  200003fc  200003fc  000201e4  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 11 .debug_info   00012a42  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000028df  00000000  00000000  00032c56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001048  00000000  00000000  00035538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00000f48  00000000  00000000  00036580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00023356  00000000  00000000  000374c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001182f  00000000  00000000  0005a81e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d301a  00000000  00000000  0006c04d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0013f067  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005518  00000000  00000000  0013f0bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008da4 	.word	0x08008da4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08008da4 	.word	0x08008da4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f44:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <HAL_Init+0x40>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a0d      	ldr	r2, [pc, #52]	; (8000f80 <HAL_Init+0x40>)
 8000f4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f50:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <HAL_Init+0x40>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <HAL_Init+0x40>)
 8000f56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f5c:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <HAL_Init+0x40>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a07      	ldr	r2, [pc, #28]	; (8000f80 <HAL_Init+0x40>)
 8000f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f68:	2003      	movs	r0, #3
 8000f6a:	f001 fa63 	bl	8002434 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f000 f808 	bl	8000f84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f74:	f004 fb82 	bl	800567c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40023c00 	.word	0x40023c00

08000f84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <HAL_InitTick+0x54>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <HAL_InitTick+0x58>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	4619      	mov	r1, r3
 8000f96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f001 fa7b 	bl	800249e <HAL_SYSTICK_Config>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e00e      	b.n	8000fd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2b0f      	cmp	r3, #15
 8000fb6:	d80a      	bhi.n	8000fce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fc0:	f001 fa43 	bl	800244a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc4:	4a06      	ldr	r2, [pc, #24]	; (8000fe0 <HAL_InitTick+0x5c>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	e000      	b.n	8000fd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	2000000c 	.word	0x2000000c
 8000fdc:	20000004 	.word	0x20000004
 8000fe0:	20000000 	.word	0x20000000

08000fe4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_IncTick+0x20>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	461a      	mov	r2, r3
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_IncTick+0x24>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	4a04      	ldr	r2, [pc, #16]	; (8001008 <HAL_IncTick+0x24>)
 8000ff6:	6013      	str	r3, [r2, #0]
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	20000004 	.word	0x20000004
 8001008:	20000230 	.word	0x20000230

0800100c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return uwTick;
 8001010:	4b03      	ldr	r3, [pc, #12]	; (8001020 <HAL_GetTick+0x14>)
 8001012:	681b      	ldr	r3, [r3, #0]
}
 8001014:	4618      	mov	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	20000230 	.word	0x20000230

08001024 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800102c:	f7ff ffee 	bl	800100c <HAL_GetTick>
 8001030:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800103c:	d005      	beq.n	800104a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800103e:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <HAL_Delay+0x44>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	461a      	mov	r2, r3
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	4413      	add	r3, r2
 8001048:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800104a:	bf00      	nop
 800104c:	f7ff ffde 	bl	800100c <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	429a      	cmp	r2, r3
 800105a:	d8f7      	bhi.n	800104c <HAL_Delay+0x28>
  {
  }
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000004 	.word	0x20000004

0800106c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001074:	2300      	movs	r3, #0
 8001076:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e033      	b.n	80010ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	2b00      	cmp	r3, #0
 8001088:	d109      	bne.n	800109e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f004 fb1e 	bl	80056cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	f003 0310 	and.w	r3, r3, #16
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d118      	bne.n	80010dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010b2:	f023 0302 	bic.w	r3, r3, #2
 80010b6:	f043 0202 	orr.w	r2, r3, #2
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f000 fa92 	bl	80015e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	f023 0303 	bic.w	r3, r3, #3
 80010d2:	f043 0201 	orr.w	r2, r3, #1
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	641a      	str	r2, [r3, #64]	; 0x40
 80010da:	e001      	b.n	80010e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001106:	2b01      	cmp	r3, #1
 8001108:	d101      	bne.n	800110e <HAL_ADC_Start+0x1a>
 800110a:	2302      	movs	r3, #2
 800110c:	e0a5      	b.n	800125a <HAL_ADC_Start+0x166>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2201      	movs	r2, #1
 8001112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	2b01      	cmp	r3, #1
 8001122:	d018      	beq.n	8001156 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	689a      	ldr	r2, [r3, #8]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f042 0201 	orr.w	r2, r2, #1
 8001132:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001134:	4b4c      	ldr	r3, [pc, #304]	; (8001268 <HAL_ADC_Start+0x174>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a4c      	ldr	r2, [pc, #304]	; (800126c <HAL_ADC_Start+0x178>)
 800113a:	fba2 2303 	umull	r2, r3, r2, r3
 800113e:	0c9a      	lsrs	r2, r3, #18
 8001140:	4613      	mov	r3, r2
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	4413      	add	r3, r2
 8001146:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001148:	e002      	b.n	8001150 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	3b01      	subs	r3, #1
 800114e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1f9      	bne.n	800114a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	2b01      	cmp	r3, #1
 8001162:	d179      	bne.n	8001258 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800116c:	f023 0301 	bic.w	r3, r3, #1
 8001170:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001182:	2b00      	cmp	r3, #0
 8001184:	d007      	beq.n	8001196 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800118e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800119e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011a2:	d106      	bne.n	80011b2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a8:	f023 0206 	bic.w	r2, r3, #6
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	645a      	str	r2, [r3, #68]	; 0x44
 80011b0:	e002      	b.n	80011b8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011c0:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <HAL_ADC_Start+0x17c>)
 80011c2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011cc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f003 031f 	and.w	r3, r3, #31
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d12a      	bne.n	8001230 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a25      	ldr	r2, [pc, #148]	; (8001274 <HAL_ADC_Start+0x180>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d015      	beq.n	8001210 <HAL_ADC_Start+0x11c>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a23      	ldr	r2, [pc, #140]	; (8001278 <HAL_ADC_Start+0x184>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d105      	bne.n	80011fa <HAL_ADC_Start+0x106>
 80011ee:	4b20      	ldr	r3, [pc, #128]	; (8001270 <HAL_ADC_Start+0x17c>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 031f 	and.w	r3, r3, #31
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d00a      	beq.n	8001210 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a1f      	ldr	r2, [pc, #124]	; (800127c <HAL_ADC_Start+0x188>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d129      	bne.n	8001258 <HAL_ADC_Start+0x164>
 8001204:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <HAL_ADC_Start+0x17c>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 0310 	and.w	r3, r3, #16
 800120c:	2b00      	cmp	r3, #0
 800120e:	d123      	bne.n	8001258 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d11c      	bne.n	8001258 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	e013      	b.n	8001258 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a0f      	ldr	r2, [pc, #60]	; (8001274 <HAL_ADC_Start+0x180>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d10e      	bne.n	8001258 <HAL_ADC_Start+0x164>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d107      	bne.n	8001258 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	689a      	ldr	r2, [r3, #8]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001256:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3714      	adds	r7, #20
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	2000000c 	.word	0x2000000c
 800126c:	431bde83 	.word	0x431bde83
 8001270:	40012300 	.word	0x40012300
 8001274:	40012000 	.word	0x40012000
 8001278:	40012100 	.word	0x40012100
 800127c:	40012200 	.word	0x40012200

08001280 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800129c:	d113      	bne.n	80012c6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012ac:	d10b      	bne.n	80012c6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	f043 0220 	orr.w	r2, r3, #32
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e05c      	b.n	8001380 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80012c6:	f7ff fea1 	bl	800100c <HAL_GetTick>
 80012ca:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012cc:	e01a      	b.n	8001304 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012d4:	d016      	beq.n	8001304 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d007      	beq.n	80012ec <HAL_ADC_PollForConversion+0x6c>
 80012dc:	f7ff fe96 	bl	800100c <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	683a      	ldr	r2, [r7, #0]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d20b      	bcs.n	8001304 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	f043 0204 	orr.w	r2, r3, #4
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2200      	movs	r2, #0
 80012fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e03d      	b.n	8001380 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b02      	cmp	r3, #2
 8001310:	d1dd      	bne.n	80012ce <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f06f 0212 	mvn.w	r2, #18
 800131a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001320:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d123      	bne.n	800137e <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800133a:	2b00      	cmp	r3, #0
 800133c:	d11f      	bne.n	800137e <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001344:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001348:	2b00      	cmp	r3, #0
 800134a:	d006      	beq.n	800135a <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001356:	2b00      	cmp	r3, #0
 8001358:	d111      	bne.n	800137e <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d105      	bne.n	800137e <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	f043 0201 	orr.w	r2, r3, #1
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001396:	4618      	mov	r0, r3
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
	...

080013a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d101      	bne.n	80013c0 <HAL_ADC_ConfigChannel+0x1c>
 80013bc:	2302      	movs	r3, #2
 80013be:	e105      	b.n	80015cc <HAL_ADC_ConfigChannel+0x228>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2201      	movs	r2, #1
 80013c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b09      	cmp	r3, #9
 80013ce:	d925      	bls.n	800141c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68d9      	ldr	r1, [r3, #12]
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	b29b      	uxth	r3, r3
 80013dc:	461a      	mov	r2, r3
 80013de:	4613      	mov	r3, r2
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	4413      	add	r3, r2
 80013e4:	3b1e      	subs	r3, #30
 80013e6:	2207      	movs	r2, #7
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43da      	mvns	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	400a      	ands	r2, r1
 80013f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	68d9      	ldr	r1, [r3, #12]
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	b29b      	uxth	r3, r3
 8001406:	4618      	mov	r0, r3
 8001408:	4603      	mov	r3, r0
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	4403      	add	r3, r0
 800140e:	3b1e      	subs	r3, #30
 8001410:	409a      	lsls	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	430a      	orrs	r2, r1
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	e022      	b.n	8001462 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6919      	ldr	r1, [r3, #16]
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	b29b      	uxth	r3, r3
 8001428:	461a      	mov	r2, r3
 800142a:	4613      	mov	r3, r2
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	4413      	add	r3, r2
 8001430:	2207      	movs	r2, #7
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43da      	mvns	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	400a      	ands	r2, r1
 800143e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6919      	ldr	r1, [r3, #16]
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	689a      	ldr	r2, [r3, #8]
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	b29b      	uxth	r3, r3
 8001450:	4618      	mov	r0, r3
 8001452:	4603      	mov	r3, r0
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	4403      	add	r3, r0
 8001458:	409a      	lsls	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	430a      	orrs	r2, r1
 8001460:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2b06      	cmp	r3, #6
 8001468:	d824      	bhi.n	80014b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	4613      	mov	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4413      	add	r3, r2
 800147a:	3b05      	subs	r3, #5
 800147c:	221f      	movs	r2, #31
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43da      	mvns	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	400a      	ands	r2, r1
 800148a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	b29b      	uxth	r3, r3
 8001498:	4618      	mov	r0, r3
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	3b05      	subs	r3, #5
 80014a6:	fa00 f203 	lsl.w	r2, r0, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	430a      	orrs	r2, r1
 80014b0:	635a      	str	r2, [r3, #52]	; 0x34
 80014b2:	e04c      	b.n	800154e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b0c      	cmp	r3, #12
 80014ba:	d824      	bhi.n	8001506 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685a      	ldr	r2, [r3, #4]
 80014c6:	4613      	mov	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	3b23      	subs	r3, #35	; 0x23
 80014ce:	221f      	movs	r2, #31
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	43da      	mvns	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	400a      	ands	r2, r1
 80014dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	4618      	mov	r0, r3
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	4613      	mov	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	3b23      	subs	r3, #35	; 0x23
 80014f8:	fa00 f203 	lsl.w	r2, r0, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	430a      	orrs	r2, r1
 8001502:	631a      	str	r2, [r3, #48]	; 0x30
 8001504:	e023      	b.n	800154e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685a      	ldr	r2, [r3, #4]
 8001510:	4613      	mov	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	3b41      	subs	r3, #65	; 0x41
 8001518:	221f      	movs	r2, #31
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	43da      	mvns	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	400a      	ands	r2, r1
 8001526:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	b29b      	uxth	r3, r3
 8001534:	4618      	mov	r0, r3
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685a      	ldr	r2, [r3, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	3b41      	subs	r3, #65	; 0x41
 8001542:	fa00 f203 	lsl.w	r2, r0, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	430a      	orrs	r2, r1
 800154c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800154e:	4b22      	ldr	r3, [pc, #136]	; (80015d8 <HAL_ADC_ConfigChannel+0x234>)
 8001550:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a21      	ldr	r2, [pc, #132]	; (80015dc <HAL_ADC_ConfigChannel+0x238>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d109      	bne.n	8001570 <HAL_ADC_ConfigChannel+0x1cc>
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b12      	cmp	r3, #18
 8001562:	d105      	bne.n	8001570 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a19      	ldr	r2, [pc, #100]	; (80015dc <HAL_ADC_ConfigChannel+0x238>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d123      	bne.n	80015c2 <HAL_ADC_ConfigChannel+0x21e>
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2b10      	cmp	r3, #16
 8001580:	d003      	beq.n	800158a <HAL_ADC_ConfigChannel+0x1e6>
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2b11      	cmp	r3, #17
 8001588:	d11b      	bne.n	80015c2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b10      	cmp	r3, #16
 800159c:	d111      	bne.n	80015c2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <HAL_ADC_ConfigChannel+0x23c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a10      	ldr	r2, [pc, #64]	; (80015e4 <HAL_ADC_ConfigChannel+0x240>)
 80015a4:	fba2 2303 	umull	r2, r3, r2, r3
 80015a8:	0c9a      	lsrs	r2, r3, #18
 80015aa:	4613      	mov	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015b4:	e002      	b.n	80015bc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	3b01      	subs	r3, #1
 80015ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1f9      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015ca:	2300      	movs	r3, #0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	40012300 	.word	0x40012300
 80015dc:	40012000 	.word	0x40012000
 80015e0:	2000000c 	.word	0x2000000c
 80015e4:	431bde83 	.word	0x431bde83

080015e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015f0:	4b79      	ldr	r3, [pc, #484]	; (80017d8 <ADC_Init+0x1f0>)
 80015f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	685a      	ldr	r2, [r3, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	431a      	orrs	r2, r3
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	685a      	ldr	r2, [r3, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800161c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	6859      	ldr	r1, [r3, #4]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	021a      	lsls	r2, r3, #8
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	430a      	orrs	r2, r1
 8001630:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001640:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6859      	ldr	r1, [r3, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689a      	ldr	r2, [r3, #8]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	430a      	orrs	r2, r1
 8001652:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	689a      	ldr	r2, [r3, #8]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001662:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6899      	ldr	r1, [r3, #8]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68da      	ldr	r2, [r3, #12]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	430a      	orrs	r2, r1
 8001674:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167a:	4a58      	ldr	r2, [pc, #352]	; (80017dc <ADC_Init+0x1f4>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d022      	beq.n	80016c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	689a      	ldr	r2, [r3, #8]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800168e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6899      	ldr	r1, [r3, #8]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	430a      	orrs	r2, r1
 80016a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	689a      	ldr	r2, [r3, #8]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6899      	ldr	r1, [r3, #8]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	430a      	orrs	r2, r1
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	e00f      	b.n	80016e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 0202 	bic.w	r2, r2, #2
 80016f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	6899      	ldr	r1, [r3, #8]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	7e1b      	ldrb	r3, [r3, #24]
 8001700:	005a      	lsls	r2, r3, #1
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	430a      	orrs	r2, r1
 8001708:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d01b      	beq.n	800174c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001722:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	685a      	ldr	r2, [r3, #4]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001732:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6859      	ldr	r1, [r3, #4]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173e:	3b01      	subs	r3, #1
 8001740:	035a      	lsls	r2, r3, #13
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	e007      	b.n	800175c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	685a      	ldr	r2, [r3, #4]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800175a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800176a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	3b01      	subs	r3, #1
 8001778:	051a      	lsls	r2, r3, #20
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	430a      	orrs	r2, r1
 8001780:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001790:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6899      	ldr	r1, [r3, #8]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800179e:	025a      	lsls	r2, r3, #9
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	430a      	orrs	r2, r1
 80017a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	689a      	ldr	r2, [r3, #8]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6899      	ldr	r1, [r3, #8]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	029a      	lsls	r2, r3, #10
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	430a      	orrs	r2, r1
 80017ca:	609a      	str	r2, [r3, #8]
}
 80017cc:	bf00      	nop
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	40012300 	.word	0x40012300
 80017dc:	0f000001 	.word	0x0f000001

080017e0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e0ed      	b.n	80019ce <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d102      	bne.n	8001804 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f003 ffc4 	bl	800578c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f022 0202 	bic.w	r2, r2, #2
 8001812:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001814:	f7ff fbfa 	bl	800100c <HAL_GetTick>
 8001818:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800181a:	e012      	b.n	8001842 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800181c:	f7ff fbf6 	bl	800100c <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b0a      	cmp	r3, #10
 8001828:	d90b      	bls.n	8001842 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2205      	movs	r2, #5
 800183a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e0c5      	b.n	80019ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1e5      	bne.n	800181c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f042 0201 	orr.w	r2, r2, #1
 800185e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001860:	f7ff fbd4 	bl	800100c <HAL_GetTick>
 8001864:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001866:	e012      	b.n	800188e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001868:	f7ff fbd0 	bl	800100c <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b0a      	cmp	r3, #10
 8001874:	d90b      	bls.n	800188e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2205      	movs	r2, #5
 8001886:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e09f      	b.n	80019ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	2b00      	cmp	r3, #0
 800189a:	d0e5      	beq.n	8001868 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	7e1b      	ldrb	r3, [r3, #24]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d108      	bne.n	80018b6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	e007      	b.n	80018c6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	7e5b      	ldrb	r3, [r3, #25]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d108      	bne.n	80018e0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	e007      	b.n	80018f0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	7e9b      	ldrb	r3, [r3, #26]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d108      	bne.n	800190a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f042 0220 	orr.w	r2, r2, #32
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	e007      	b.n	800191a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 0220 	bic.w	r2, r2, #32
 8001918:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	7edb      	ldrb	r3, [r3, #27]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d108      	bne.n	8001934 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f022 0210 	bic.w	r2, r2, #16
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	e007      	b.n	8001944 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f042 0210 	orr.w	r2, r2, #16
 8001942:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	7f1b      	ldrb	r3, [r3, #28]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d108      	bne.n	800195e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f042 0208 	orr.w	r2, r2, #8
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	e007      	b.n	800196e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 0208 	bic.w	r2, r2, #8
 800196c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	7f5b      	ldrb	r3, [r3, #29]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d108      	bne.n	8001988 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f042 0204 	orr.w	r2, r2, #4
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	e007      	b.n	8001998 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f022 0204 	bic.w	r2, r2, #4
 8001996:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	431a      	orrs	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	695b      	ldr	r3, [r3, #20]
 80019ac:	ea42 0103 	orr.w	r1, r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	1e5a      	subs	r2, r3, #1
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80019d8:	b480      	push	{r7}
 80019da:	b087      	sub	sp, #28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019ee:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80019f0:	7cfb      	ldrb	r3, [r7, #19]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d003      	beq.n	80019fe <HAL_CAN_ConfigFilter+0x26>
 80019f6:	7cfb      	ldrb	r3, [r7, #19]
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	f040 80be 	bne.w	8001b7a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80019fe:	4b65      	ldr	r3, [pc, #404]	; (8001b94 <HAL_CAN_ConfigFilter+0x1bc>)
 8001a00:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a08:	f043 0201 	orr.w	r2, r3, #1
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a18:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2c:	021b      	lsls	r3, r3, #8
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	f003 031f 	and.w	r3, r3, #31
 8001a3e:	2201      	movs	r2, #1
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	401a      	ands	r2, r3
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d123      	bne.n	8001aa8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	401a      	ands	r2, r3
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a82:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	3248      	adds	r2, #72	; 0x48
 8001a88:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a9c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a9e:	6979      	ldr	r1, [r7, #20]
 8001aa0:	3348      	adds	r3, #72	; 0x48
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	440b      	add	r3, r1
 8001aa6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	69db      	ldr	r3, [r3, #28]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d122      	bne.n	8001af6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ad0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	3248      	adds	r2, #72	; 0x48
 8001ad6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001aea:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001aec:	6979      	ldr	r1, [r7, #20]
 8001aee:	3348      	adds	r3, #72	; 0x48
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	440b      	add	r3, r1
 8001af4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d109      	bne.n	8001b12 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	43db      	mvns	r3, r3
 8001b08:	401a      	ands	r2, r3
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001b10:	e007      	b.n	8001b22 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d109      	bne.n	8001b3e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	43db      	mvns	r3, r3
 8001b34:	401a      	ands	r2, r3
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001b3c:	e007      	b.n	8001b4e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	431a      	orrs	r2, r3
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d107      	bne.n	8001b66 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b6c:	f023 0201 	bic.w	r2, r3, #1
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001b76:	2300      	movs	r3, #0
 8001b78:	e006      	b.n	8001b88 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
  }
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	371c      	adds	r7, #28
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	40006400 	.word	0x40006400

08001b98 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d12e      	bne.n	8001c0a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2202      	movs	r2, #2
 8001bb0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 0201 	bic.w	r2, r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001bc4:	f7ff fa22 	bl	800100c <HAL_GetTick>
 8001bc8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001bca:	e012      	b.n	8001bf2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bcc:	f7ff fa1e 	bl	800100c <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b0a      	cmp	r3, #10
 8001bd8:	d90b      	bls.n	8001bf2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2205      	movs	r2, #5
 8001bea:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e012      	b.n	8001c18 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1e5      	bne.n	8001bcc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001c06:	2300      	movs	r3, #0
 8001c08:	e006      	b.n	8001c18 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
  }
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b089      	sub	sp, #36	; 0x24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
 8001c2c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c34:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c3e:	7ffb      	ldrb	r3, [r7, #31]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d003      	beq.n	8001c4c <HAL_CAN_AddTxMessage+0x2c>
 8001c44:	7ffb      	ldrb	r3, [r7, #31]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	f040 80b8 	bne.w	8001dbc <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10a      	bne.n	8001c6c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d105      	bne.n	8001c6c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 80a0 	beq.w	8001dac <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	0e1b      	lsrs	r3, r3, #24
 8001c70:	f003 0303 	and.w	r3, r3, #3
 8001c74:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d907      	bls.n	8001c8c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c80:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e09e      	b.n	8001dca <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	409a      	lsls	r2, r3
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10d      	bne.n	8001cba <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ca8:	68f9      	ldr	r1, [r7, #12]
 8001caa:	6809      	ldr	r1, [r1, #0]
 8001cac:	431a      	orrs	r2, r3
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	3318      	adds	r3, #24
 8001cb2:	011b      	lsls	r3, r3, #4
 8001cb4:	440b      	add	r3, r1
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	e00f      	b.n	8001cda <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001cc4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001cca:	68f9      	ldr	r1, [r7, #12]
 8001ccc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001cce:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	3318      	adds	r3, #24
 8001cd4:	011b      	lsls	r3, r3, #4
 8001cd6:	440b      	add	r3, r1
 8001cd8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6819      	ldr	r1, [r3, #0]
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	691a      	ldr	r2, [r3, #16]
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	3318      	adds	r3, #24
 8001ce6:	011b      	lsls	r3, r3, #4
 8001ce8:	440b      	add	r3, r1
 8001cea:	3304      	adds	r3, #4
 8001cec:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	7d1b      	ldrb	r3, [r3, #20]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d111      	bne.n	8001d1a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	3318      	adds	r3, #24
 8001cfe:	011b      	lsls	r3, r3, #4
 8001d00:	4413      	add	r3, r2
 8001d02:	3304      	adds	r3, #4
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	6811      	ldr	r1, [r2, #0]
 8001d0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	3318      	adds	r3, #24
 8001d12:	011b      	lsls	r3, r3, #4
 8001d14:	440b      	add	r3, r1
 8001d16:	3304      	adds	r3, #4
 8001d18:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	3307      	adds	r3, #7
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	061a      	lsls	r2, r3, #24
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	3306      	adds	r3, #6
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	041b      	lsls	r3, r3, #16
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3305      	adds	r3, #5
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	021b      	lsls	r3, r3, #8
 8001d34:	4313      	orrs	r3, r2
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	3204      	adds	r2, #4
 8001d3a:	7812      	ldrb	r2, [r2, #0]
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	6811      	ldr	r1, [r2, #0]
 8001d42:	ea43 0200 	orr.w	r2, r3, r0
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	011b      	lsls	r3, r3, #4
 8001d4a:	440b      	add	r3, r1
 8001d4c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001d50:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	3303      	adds	r3, #3
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	061a      	lsls	r2, r3, #24
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	3302      	adds	r3, #2
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	041b      	lsls	r3, r3, #16
 8001d62:	431a      	orrs	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3301      	adds	r3, #1
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	021b      	lsls	r3, r3, #8
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	7812      	ldrb	r2, [r2, #0]
 8001d72:	4610      	mov	r0, r2
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	6811      	ldr	r1, [r2, #0]
 8001d78:	ea43 0200 	orr.w	r2, r3, r0
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	011b      	lsls	r3, r3, #4
 8001d80:	440b      	add	r3, r1
 8001d82:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001d86:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	3318      	adds	r3, #24
 8001d90:	011b      	lsls	r3, r3, #4
 8001d92:	4413      	add	r3, r2
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	6811      	ldr	r1, [r2, #0]
 8001d9a:	f043 0201 	orr.w	r2, r3, #1
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	3318      	adds	r3, #24
 8001da2:	011b      	lsls	r3, r3, #4
 8001da4:	440b      	add	r3, r1
 8001da6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001da8:	2300      	movs	r3, #0
 8001daa:	e00e      	b.n	8001dca <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e006      	b.n	8001dca <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
  }
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3724      	adds	r7, #36	; 0x24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b085      	sub	sp, #20
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
 8001dde:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001de6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d002      	beq.n	8001df4 <HAL_CAN_ActivateNotification+0x1e>
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d109      	bne.n	8001e08 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6959      	ldr	r1, [r3, #20]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001e04:	2300      	movs	r3, #0
 8001e06:	e006      	b.n	8001e16 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
  }
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b08a      	sub	sp, #40	; 0x28
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	695b      	ldr	r3, [r3, #20]
 8001e34:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001e5e:	6a3b      	ldr	r3, [r7, #32]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d07c      	beq.n	8001f62 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d023      	beq.n	8001eba <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2201      	movs	r2, #1
 8001e78:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 f983 	bl	8002190 <HAL_CAN_TxMailbox0CompleteCallback>
 8001e8a:	e016      	b.n	8001eba <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	f003 0304 	and.w	r3, r3, #4
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d004      	beq.n	8001ea0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e9e:	e00c      	b.n	8001eba <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d004      	beq.n	8001eb4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb2:	e002      	b.n	8001eba <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 f989 	bl	80021cc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d024      	beq.n	8001f0e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ecc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 f963 	bl	80021a4 <HAL_CAN_TxMailbox1CompleteCallback>
 8001ede:	e016      	b.n	8001f0e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d004      	beq.n	8001ef4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef2:	e00c      	b.n	8001f0e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d004      	beq.n	8001f08 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
 8001f06:	e002      	b.n	8001f0e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 f969 	bl	80021e0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d024      	beq.n	8001f62 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f20:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 f943 	bl	80021b8 <HAL_CAN_TxMailbox2CompleteCallback>
 8001f32:	e016      	b.n	8001f62 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d004      	beq.n	8001f48 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
 8001f46:	e00c      	b.n	8001f62 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d004      	beq.n	8001f5c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
 8001f5a:	e002      	b.n	8001f62 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 f949 	bl	80021f4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001f62:	6a3b      	ldr	r3, [r7, #32]
 8001f64:	f003 0308 	and.w	r3, r3, #8
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d00c      	beq.n	8001f86 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	f003 0310 	and.w	r3, r3, #16
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d007      	beq.n	8001f86 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2210      	movs	r2, #16
 8001f84:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001f86:	6a3b      	ldr	r3, [r7, #32]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00b      	beq.n	8001fa8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	f003 0308 	and.w	r3, r3, #8
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d006      	beq.n	8001fa8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2208      	movs	r2, #8
 8001fa0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f93a 	bl	800221c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001fa8:	6a3b      	ldr	r3, [r7, #32]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d009      	beq.n	8001fc6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	f003 0303 	and.w	r3, r3, #3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d002      	beq.n	8001fc6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 f921 	bl	8002208 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001fc6:	6a3b      	ldr	r3, [r7, #32]
 8001fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00c      	beq.n	8001fea <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	f003 0310 	and.w	r3, r3, #16
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d007      	beq.n	8001fea <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fe0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2210      	movs	r2, #16
 8001fe8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001fea:	6a3b      	ldr	r3, [r7, #32]
 8001fec:	f003 0320 	and.w	r3, r3, #32
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00b      	beq.n	800200c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d006      	beq.n	800200c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2208      	movs	r2, #8
 8002004:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f91c 	bl	8002244 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800200c:	6a3b      	ldr	r3, [r7, #32]
 800200e:	f003 0310 	and.w	r3, r3, #16
 8002012:	2b00      	cmp	r3, #0
 8002014:	d009      	beq.n	800202a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	f003 0303 	and.w	r3, r3, #3
 8002020:	2b00      	cmp	r3, #0
 8002022:	d002      	beq.n	800202a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 f903 	bl	8002230 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800202a:	6a3b      	ldr	r3, [r7, #32]
 800202c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00b      	beq.n	800204c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f003 0310 	and.w	r3, r3, #16
 800203a:	2b00      	cmp	r3, #0
 800203c:	d006      	beq.n	800204c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2210      	movs	r2, #16
 8002044:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f906 	bl	8002258 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00b      	beq.n	800206e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	f003 0308 	and.w	r3, r3, #8
 800205c:	2b00      	cmp	r3, #0
 800205e:	d006      	beq.n	800206e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2208      	movs	r2, #8
 8002066:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 f8ff 	bl	800226c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800206e:	6a3b      	ldr	r3, [r7, #32]
 8002070:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d07b      	beq.n	8002170 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	f003 0304 	and.w	r3, r3, #4
 800207e:	2b00      	cmp	r3, #0
 8002080:	d072      	beq.n	8002168 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002082:	6a3b      	ldr	r3, [r7, #32]
 8002084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002088:	2b00      	cmp	r3, #0
 800208a:	d008      	beq.n	800209e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800209e:	6a3b      	ldr	r3, [r7, #32]
 80020a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d008      	beq.n	80020ba <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	f043 0302 	orr.w	r3, r3, #2
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020ba:	6a3b      	ldr	r3, [r7, #32]
 80020bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d008      	beq.n	80020d6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	f043 0304 	orr.w	r3, r3, #4
 80020d4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80020d6:	6a3b      	ldr	r3, [r7, #32]
 80020d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d043      	beq.n	8002168 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d03e      	beq.n	8002168 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020f0:	2b60      	cmp	r3, #96	; 0x60
 80020f2:	d02b      	beq.n	800214c <HAL_CAN_IRQHandler+0x32a>
 80020f4:	2b60      	cmp	r3, #96	; 0x60
 80020f6:	d82e      	bhi.n	8002156 <HAL_CAN_IRQHandler+0x334>
 80020f8:	2b50      	cmp	r3, #80	; 0x50
 80020fa:	d022      	beq.n	8002142 <HAL_CAN_IRQHandler+0x320>
 80020fc:	2b50      	cmp	r3, #80	; 0x50
 80020fe:	d82a      	bhi.n	8002156 <HAL_CAN_IRQHandler+0x334>
 8002100:	2b40      	cmp	r3, #64	; 0x40
 8002102:	d019      	beq.n	8002138 <HAL_CAN_IRQHandler+0x316>
 8002104:	2b40      	cmp	r3, #64	; 0x40
 8002106:	d826      	bhi.n	8002156 <HAL_CAN_IRQHandler+0x334>
 8002108:	2b30      	cmp	r3, #48	; 0x30
 800210a:	d010      	beq.n	800212e <HAL_CAN_IRQHandler+0x30c>
 800210c:	2b30      	cmp	r3, #48	; 0x30
 800210e:	d822      	bhi.n	8002156 <HAL_CAN_IRQHandler+0x334>
 8002110:	2b10      	cmp	r3, #16
 8002112:	d002      	beq.n	800211a <HAL_CAN_IRQHandler+0x2f8>
 8002114:	2b20      	cmp	r3, #32
 8002116:	d005      	beq.n	8002124 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002118:	e01d      	b.n	8002156 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	f043 0308 	orr.w	r3, r3, #8
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002122:	e019      	b.n	8002158 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	f043 0310 	orr.w	r3, r3, #16
 800212a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800212c:	e014      	b.n	8002158 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	f043 0320 	orr.w	r3, r3, #32
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002136:	e00f      	b.n	8002158 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800213e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002140:	e00a      	b.n	8002158 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800214a:	e005      	b.n	8002158 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002154:	e000      	b.n	8002158 <HAL_CAN_IRQHandler+0x336>
            break;
 8002156:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699a      	ldr	r2, [r3, #24]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002166:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2204      	movs	r2, #4
 800216e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002172:	2b00      	cmp	r3, #0
 8002174:	d008      	beq.n	8002188 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	431a      	orrs	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f87c 	bl	8002280 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002188:	bf00      	nop
 800218a:	3728      	adds	r7, #40	; 0x28
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022a4:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <__NVIC_SetPriorityGrouping+0x44>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022b0:	4013      	ands	r3, r2
 80022b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022c6:	4a04      	ldr	r2, [pc, #16]	; (80022d8 <__NVIC_SetPriorityGrouping+0x44>)
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	60d3      	str	r3, [r2, #12]
}
 80022cc:	bf00      	nop
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	e000ed00 	.word	0xe000ed00

080022dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022e0:	4b04      	ldr	r3, [pc, #16]	; (80022f4 <__NVIC_GetPriorityGrouping+0x18>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	0a1b      	lsrs	r3, r3, #8
 80022e6:	f003 0307 	and.w	r3, r3, #7
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	e000ed00 	.word	0xe000ed00

080022f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002306:	2b00      	cmp	r3, #0
 8002308:	db0b      	blt.n	8002322 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800230a:	79fb      	ldrb	r3, [r7, #7]
 800230c:	f003 021f 	and.w	r2, r3, #31
 8002310:	4907      	ldr	r1, [pc, #28]	; (8002330 <__NVIC_EnableIRQ+0x38>)
 8002312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002316:	095b      	lsrs	r3, r3, #5
 8002318:	2001      	movs	r0, #1
 800231a:	fa00 f202 	lsl.w	r2, r0, r2
 800231e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	e000e100 	.word	0xe000e100

08002334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	6039      	str	r1, [r7, #0]
 800233e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002344:	2b00      	cmp	r3, #0
 8002346:	db0a      	blt.n	800235e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	b2da      	uxtb	r2, r3
 800234c:	490c      	ldr	r1, [pc, #48]	; (8002380 <__NVIC_SetPriority+0x4c>)
 800234e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002352:	0112      	lsls	r2, r2, #4
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	440b      	add	r3, r1
 8002358:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800235c:	e00a      	b.n	8002374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	b2da      	uxtb	r2, r3
 8002362:	4908      	ldr	r1, [pc, #32]	; (8002384 <__NVIC_SetPriority+0x50>)
 8002364:	79fb      	ldrb	r3, [r7, #7]
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	3b04      	subs	r3, #4
 800236c:	0112      	lsls	r2, r2, #4
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	440b      	add	r3, r1
 8002372:	761a      	strb	r2, [r3, #24]
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	e000e100 	.word	0xe000e100
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002388:	b480      	push	{r7}
 800238a:	b089      	sub	sp, #36	; 0x24
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f1c3 0307 	rsb	r3, r3, #7
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	bf28      	it	cs
 80023a6:	2304      	movcs	r3, #4
 80023a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	3304      	adds	r3, #4
 80023ae:	2b06      	cmp	r3, #6
 80023b0:	d902      	bls.n	80023b8 <NVIC_EncodePriority+0x30>
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	3b03      	subs	r3, #3
 80023b6:	e000      	b.n	80023ba <NVIC_EncodePriority+0x32>
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43da      	mvns	r2, r3
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	401a      	ands	r2, r3
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	fa01 f303 	lsl.w	r3, r1, r3
 80023da:	43d9      	mvns	r1, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e0:	4313      	orrs	r3, r2
         );
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3724      	adds	r7, #36	; 0x24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
	...

080023f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002400:	d301      	bcc.n	8002406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002402:	2301      	movs	r3, #1
 8002404:	e00f      	b.n	8002426 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002406:	4a0a      	ldr	r2, [pc, #40]	; (8002430 <SysTick_Config+0x40>)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3b01      	subs	r3, #1
 800240c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800240e:	210f      	movs	r1, #15
 8002410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002414:	f7ff ff8e 	bl	8002334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002418:	4b05      	ldr	r3, [pc, #20]	; (8002430 <SysTick_Config+0x40>)
 800241a:	2200      	movs	r2, #0
 800241c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800241e:	4b04      	ldr	r3, [pc, #16]	; (8002430 <SysTick_Config+0x40>)
 8002420:	2207      	movs	r2, #7
 8002422:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	e000e010 	.word	0xe000e010

08002434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f7ff ff29 	bl	8002294 <__NVIC_SetPriorityGrouping>
}
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800244a:	b580      	push	{r7, lr}
 800244c:	b086      	sub	sp, #24
 800244e:	af00      	add	r7, sp, #0
 8002450:	4603      	mov	r3, r0
 8002452:	60b9      	str	r1, [r7, #8]
 8002454:	607a      	str	r2, [r7, #4]
 8002456:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800245c:	f7ff ff3e 	bl	80022dc <__NVIC_GetPriorityGrouping>
 8002460:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	68b9      	ldr	r1, [r7, #8]
 8002466:	6978      	ldr	r0, [r7, #20]
 8002468:	f7ff ff8e 	bl	8002388 <NVIC_EncodePriority>
 800246c:	4602      	mov	r2, r0
 800246e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002472:	4611      	mov	r1, r2
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff ff5d 	bl	8002334 <__NVIC_SetPriority>
}
 800247a:	bf00      	nop
 800247c:	3718      	adds	r7, #24
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	4603      	mov	r3, r0
 800248a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800248c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff ff31 	bl	80022f8 <__NVIC_EnableIRQ>
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7ff ffa2 	bl	80023f0 <SysTick_Config>
 80024ac:	4603      	mov	r3, r0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
	...

080024b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b089      	sub	sp, #36	; 0x24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024ca:	2300      	movs	r3, #0
 80024cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ce:	2300      	movs	r3, #0
 80024d0:	61fb      	str	r3, [r7, #28]
 80024d2:	e16b      	b.n	80027ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024d4:	2201      	movs	r2, #1
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	4013      	ands	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	f040 815a 	bne.w	80027a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d00b      	beq.n	8002512 <HAL_GPIO_Init+0x5a>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d007      	beq.n	8002512 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002506:	2b11      	cmp	r3, #17
 8002508:	d003      	beq.n	8002512 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b12      	cmp	r3, #18
 8002510:	d130      	bne.n	8002574 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	2203      	movs	r2, #3
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43db      	mvns	r3, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4013      	ands	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4313      	orrs	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002548:	2201      	movs	r2, #1
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	43db      	mvns	r3, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4013      	ands	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	091b      	lsrs	r3, r3, #4
 800255e:	f003 0201 	and.w	r2, r3, #1
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4313      	orrs	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	2203      	movs	r2, #3
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d003      	beq.n	80025b4 <HAL_GPIO_Init+0xfc>
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b12      	cmp	r3, #18
 80025b2:	d123      	bne.n	80025fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	08da      	lsrs	r2, r3, #3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3208      	adds	r2, #8
 80025bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	220f      	movs	r2, #15
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	691a      	ldr	r2, [r3, #16]
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	08da      	lsrs	r2, r3, #3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	3208      	adds	r2, #8
 80025f6:	69b9      	ldr	r1, [r7, #24]
 80025f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	2203      	movs	r2, #3
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f003 0203 	and.w	r2, r3, #3
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4313      	orrs	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 80b4 	beq.w	80027a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	4b60      	ldr	r3, [pc, #384]	; (80027c4 <HAL_GPIO_Init+0x30c>)
 8002644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002646:	4a5f      	ldr	r2, [pc, #380]	; (80027c4 <HAL_GPIO_Init+0x30c>)
 8002648:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800264c:	6453      	str	r3, [r2, #68]	; 0x44
 800264e:	4b5d      	ldr	r3, [pc, #372]	; (80027c4 <HAL_GPIO_Init+0x30c>)
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800265a:	4a5b      	ldr	r2, [pc, #364]	; (80027c8 <HAL_GPIO_Init+0x310>)
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	089b      	lsrs	r3, r3, #2
 8002660:	3302      	adds	r3, #2
 8002662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002666:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	220f      	movs	r2, #15
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	43db      	mvns	r3, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4013      	ands	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a52      	ldr	r2, [pc, #328]	; (80027cc <HAL_GPIO_Init+0x314>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d02b      	beq.n	80026de <HAL_GPIO_Init+0x226>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a51      	ldr	r2, [pc, #324]	; (80027d0 <HAL_GPIO_Init+0x318>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d025      	beq.n	80026da <HAL_GPIO_Init+0x222>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a50      	ldr	r2, [pc, #320]	; (80027d4 <HAL_GPIO_Init+0x31c>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d01f      	beq.n	80026d6 <HAL_GPIO_Init+0x21e>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a4f      	ldr	r2, [pc, #316]	; (80027d8 <HAL_GPIO_Init+0x320>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d019      	beq.n	80026d2 <HAL_GPIO_Init+0x21a>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a4e      	ldr	r2, [pc, #312]	; (80027dc <HAL_GPIO_Init+0x324>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d013      	beq.n	80026ce <HAL_GPIO_Init+0x216>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a4d      	ldr	r2, [pc, #308]	; (80027e0 <HAL_GPIO_Init+0x328>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d00d      	beq.n	80026ca <HAL_GPIO_Init+0x212>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a4c      	ldr	r2, [pc, #304]	; (80027e4 <HAL_GPIO_Init+0x32c>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d007      	beq.n	80026c6 <HAL_GPIO_Init+0x20e>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a4b      	ldr	r2, [pc, #300]	; (80027e8 <HAL_GPIO_Init+0x330>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d101      	bne.n	80026c2 <HAL_GPIO_Init+0x20a>
 80026be:	2307      	movs	r3, #7
 80026c0:	e00e      	b.n	80026e0 <HAL_GPIO_Init+0x228>
 80026c2:	2308      	movs	r3, #8
 80026c4:	e00c      	b.n	80026e0 <HAL_GPIO_Init+0x228>
 80026c6:	2306      	movs	r3, #6
 80026c8:	e00a      	b.n	80026e0 <HAL_GPIO_Init+0x228>
 80026ca:	2305      	movs	r3, #5
 80026cc:	e008      	b.n	80026e0 <HAL_GPIO_Init+0x228>
 80026ce:	2304      	movs	r3, #4
 80026d0:	e006      	b.n	80026e0 <HAL_GPIO_Init+0x228>
 80026d2:	2303      	movs	r3, #3
 80026d4:	e004      	b.n	80026e0 <HAL_GPIO_Init+0x228>
 80026d6:	2302      	movs	r3, #2
 80026d8:	e002      	b.n	80026e0 <HAL_GPIO_Init+0x228>
 80026da:	2301      	movs	r3, #1
 80026dc:	e000      	b.n	80026e0 <HAL_GPIO_Init+0x228>
 80026de:	2300      	movs	r3, #0
 80026e0:	69fa      	ldr	r2, [r7, #28]
 80026e2:	f002 0203 	and.w	r2, r2, #3
 80026e6:	0092      	lsls	r2, r2, #2
 80026e8:	4093      	lsls	r3, r2
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026f0:	4935      	ldr	r1, [pc, #212]	; (80027c8 <HAL_GPIO_Init+0x310>)
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	089b      	lsrs	r3, r3, #2
 80026f6:	3302      	adds	r3, #2
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026fe:	4b3b      	ldr	r3, [pc, #236]	; (80027ec <HAL_GPIO_Init+0x334>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	43db      	mvns	r3, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4013      	ands	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	4313      	orrs	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002722:	4a32      	ldr	r2, [pc, #200]	; (80027ec <HAL_GPIO_Init+0x334>)
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002728:	4b30      	ldr	r3, [pc, #192]	; (80027ec <HAL_GPIO_Init+0x334>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	43db      	mvns	r3, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4013      	ands	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800274c:	4a27      	ldr	r2, [pc, #156]	; (80027ec <HAL_GPIO_Init+0x334>)
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002752:	4b26      	ldr	r3, [pc, #152]	; (80027ec <HAL_GPIO_Init+0x334>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	43db      	mvns	r3, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4013      	ands	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4313      	orrs	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002776:	4a1d      	ldr	r2, [pc, #116]	; (80027ec <HAL_GPIO_Init+0x334>)
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800277c:	4b1b      	ldr	r3, [pc, #108]	; (80027ec <HAL_GPIO_Init+0x334>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	43db      	mvns	r3, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027a0:	4a12      	ldr	r2, [pc, #72]	; (80027ec <HAL_GPIO_Init+0x334>)
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	3301      	adds	r3, #1
 80027aa:	61fb      	str	r3, [r7, #28]
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	2b0f      	cmp	r3, #15
 80027b0:	f67f ae90 	bls.w	80024d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027b4:	bf00      	nop
 80027b6:	bf00      	nop
 80027b8:	3724      	adds	r7, #36	; 0x24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	40023800 	.word	0x40023800
 80027c8:	40013800 	.word	0x40013800
 80027cc:	40020000 	.word	0x40020000
 80027d0:	40020400 	.word	0x40020400
 80027d4:	40020800 	.word	0x40020800
 80027d8:	40020c00 	.word	0x40020c00
 80027dc:	40021000 	.word	0x40021000
 80027e0:	40021400 	.word	0x40021400
 80027e4:	40021800 	.word	0x40021800
 80027e8:	40021c00 	.word	0x40021c00
 80027ec:	40013c00 	.word	0x40013c00

080027f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	460b      	mov	r3, r1
 80027fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691a      	ldr	r2, [r3, #16]
 8002800:	887b      	ldrh	r3, [r7, #2]
 8002802:	4013      	ands	r3, r2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d002      	beq.n	800280e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002808:	2301      	movs	r3, #1
 800280a:	73fb      	strb	r3, [r7, #15]
 800280c:	e001      	b.n	8002812 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800280e:	2300      	movs	r3, #0
 8002810:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002812:	7bfb      	ldrb	r3, [r7, #15]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	460b      	mov	r3, r1
 800282a:	807b      	strh	r3, [r7, #2]
 800282c:	4613      	mov	r3, r2
 800282e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002830:	787b      	ldrb	r3, [r7, #1]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002836:	887a      	ldrh	r2, [r7, #2]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800283c:	e003      	b.n	8002846 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800283e:	887b      	ldrh	r3, [r7, #2]
 8002840:	041a      	lsls	r2, r3, #16
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	619a      	str	r2, [r3, #24]
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
	...

08002854 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e12b      	b.n	8002abe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d106      	bne.n	8002880 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f002 ffd6 	bl	800582c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2224      	movs	r2, #36	; 0x24
 8002884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 0201 	bic.w	r2, r2, #1
 8002896:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028b8:	f001 fba6 	bl	8004008 <HAL_RCC_GetPCLK1Freq>
 80028bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	4a81      	ldr	r2, [pc, #516]	; (8002ac8 <HAL_I2C_Init+0x274>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d807      	bhi.n	80028d8 <HAL_I2C_Init+0x84>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	4a80      	ldr	r2, [pc, #512]	; (8002acc <HAL_I2C_Init+0x278>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	bf94      	ite	ls
 80028d0:	2301      	movls	r3, #1
 80028d2:	2300      	movhi	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	e006      	b.n	80028e6 <HAL_I2C_Init+0x92>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4a7d      	ldr	r2, [pc, #500]	; (8002ad0 <HAL_I2C_Init+0x27c>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	bf94      	ite	ls
 80028e0:	2301      	movls	r3, #1
 80028e2:	2300      	movhi	r3, #0
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e0e7      	b.n	8002abe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	4a78      	ldr	r2, [pc, #480]	; (8002ad4 <HAL_I2C_Init+0x280>)
 80028f2:	fba2 2303 	umull	r2, r3, r2, r3
 80028f6:	0c9b      	lsrs	r3, r3, #18
 80028f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68ba      	ldr	r2, [r7, #8]
 800290a:	430a      	orrs	r2, r1
 800290c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	4a6a      	ldr	r2, [pc, #424]	; (8002ac8 <HAL_I2C_Init+0x274>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d802      	bhi.n	8002928 <HAL_I2C_Init+0xd4>
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	3301      	adds	r3, #1
 8002926:	e009      	b.n	800293c <HAL_I2C_Init+0xe8>
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800292e:	fb02 f303 	mul.w	r3, r2, r3
 8002932:	4a69      	ldr	r2, [pc, #420]	; (8002ad8 <HAL_I2C_Init+0x284>)
 8002934:	fba2 2303 	umull	r2, r3, r2, r3
 8002938:	099b      	lsrs	r3, r3, #6
 800293a:	3301      	adds	r3, #1
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6812      	ldr	r2, [r2, #0]
 8002940:	430b      	orrs	r3, r1
 8002942:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	69db      	ldr	r3, [r3, #28]
 800294a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800294e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	495c      	ldr	r1, [pc, #368]	; (8002ac8 <HAL_I2C_Init+0x274>)
 8002958:	428b      	cmp	r3, r1
 800295a:	d819      	bhi.n	8002990 <HAL_I2C_Init+0x13c>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	1e59      	subs	r1, r3, #1
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	fbb1 f3f3 	udiv	r3, r1, r3
 800296a:	1c59      	adds	r1, r3, #1
 800296c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002970:	400b      	ands	r3, r1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00a      	beq.n	800298c <HAL_I2C_Init+0x138>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	1e59      	subs	r1, r3, #1
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	fbb1 f3f3 	udiv	r3, r1, r3
 8002984:	3301      	adds	r3, #1
 8002986:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800298a:	e051      	b.n	8002a30 <HAL_I2C_Init+0x1dc>
 800298c:	2304      	movs	r3, #4
 800298e:	e04f      	b.n	8002a30 <HAL_I2C_Init+0x1dc>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d111      	bne.n	80029bc <HAL_I2C_Init+0x168>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	1e58      	subs	r0, r3, #1
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6859      	ldr	r1, [r3, #4]
 80029a0:	460b      	mov	r3, r1
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	440b      	add	r3, r1
 80029a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029aa:	3301      	adds	r3, #1
 80029ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	bf0c      	ite	eq
 80029b4:	2301      	moveq	r3, #1
 80029b6:	2300      	movne	r3, #0
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	e012      	b.n	80029e2 <HAL_I2C_Init+0x18e>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	1e58      	subs	r0, r3, #1
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6859      	ldr	r1, [r3, #4]
 80029c4:	460b      	mov	r3, r1
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	0099      	lsls	r1, r3, #2
 80029cc:	440b      	add	r3, r1
 80029ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80029d2:	3301      	adds	r3, #1
 80029d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029d8:	2b00      	cmp	r3, #0
 80029da:	bf0c      	ite	eq
 80029dc:	2301      	moveq	r3, #1
 80029de:	2300      	movne	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <HAL_I2C_Init+0x196>
 80029e6:	2301      	movs	r3, #1
 80029e8:	e022      	b.n	8002a30 <HAL_I2C_Init+0x1dc>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10e      	bne.n	8002a10 <HAL_I2C_Init+0x1bc>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	1e58      	subs	r0, r3, #1
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6859      	ldr	r1, [r3, #4]
 80029fa:	460b      	mov	r3, r1
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	440b      	add	r3, r1
 8002a00:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a04:	3301      	adds	r3, #1
 8002a06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a0e:	e00f      	b.n	8002a30 <HAL_I2C_Init+0x1dc>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	1e58      	subs	r0, r3, #1
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6859      	ldr	r1, [r3, #4]
 8002a18:	460b      	mov	r3, r1
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	0099      	lsls	r1, r3, #2
 8002a20:	440b      	add	r3, r1
 8002a22:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a26:	3301      	adds	r3, #1
 8002a28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	6809      	ldr	r1, [r1, #0]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69da      	ldr	r2, [r3, #28]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	430a      	orrs	r2, r1
 8002a52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6911      	ldr	r1, [r2, #16]
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	68d2      	ldr	r2, [r2, #12]
 8002a6a:	4311      	orrs	r1, r2
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6812      	ldr	r2, [r2, #0]
 8002a70:	430b      	orrs	r3, r1
 8002a72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	695a      	ldr	r2, [r3, #20]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	431a      	orrs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f042 0201 	orr.w	r2, r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2220      	movs	r2, #32
 8002aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	000186a0 	.word	0x000186a0
 8002acc:	001e847f 	.word	0x001e847f
 8002ad0:	003d08ff 	.word	0x003d08ff
 8002ad4:	431bde83 	.word	0x431bde83
 8002ad8:	10624dd3 	.word	0x10624dd3

08002adc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b088      	sub	sp, #32
 8002ae0:	af02      	add	r7, sp, #8
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	607a      	str	r2, [r7, #4]
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	460b      	mov	r3, r1
 8002aea:	817b      	strh	r3, [r7, #10]
 8002aec:	4613      	mov	r3, r2
 8002aee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002af0:	f7fe fa8c 	bl	800100c <HAL_GetTick>
 8002af4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b20      	cmp	r3, #32
 8002b00:	f040 80e0 	bne.w	8002cc4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	2319      	movs	r3, #25
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	4970      	ldr	r1, [pc, #448]	; (8002cd0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 fc58 	bl	80033c4 <I2C_WaitOnFlagUntilTimeout>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	e0d3      	b.n	8002cc6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d101      	bne.n	8002b2c <HAL_I2C_Master_Transmit+0x50>
 8002b28:	2302      	movs	r3, #2
 8002b2a:	e0cc      	b.n	8002cc6 <HAL_I2C_Master_Transmit+0x1ea>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d007      	beq.n	8002b52 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f042 0201 	orr.w	r2, r2, #1
 8002b50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b60:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2221      	movs	r2, #33	; 0x21
 8002b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2210      	movs	r2, #16
 8002b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	893a      	ldrh	r2, [r7, #8]
 8002b82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	4a50      	ldr	r2, [pc, #320]	; (8002cd4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002b92:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b94:	8979      	ldrh	r1, [r7, #10]
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	6a3a      	ldr	r2, [r7, #32]
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 fac2 	bl	8003124 <I2C_MasterRequestWrite>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e08d      	b.n	8002cc6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002baa:	2300      	movs	r3, #0
 8002bac:	613b      	str	r3, [r7, #16]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	613b      	str	r3, [r7, #16]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	613b      	str	r3, [r7, #16]
 8002bbe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002bc0:	e066      	b.n	8002c90 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	6a39      	ldr	r1, [r7, #32]
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 fcd2 	bl	8003570 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00d      	beq.n	8002bee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d107      	bne.n	8002bea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002be8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e06b      	b.n	8002cc6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf2:	781a      	ldrb	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	1c5a      	adds	r2, r3, #1
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c16:	3b01      	subs	r3, #1
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	f003 0304 	and.w	r3, r3, #4
 8002c28:	2b04      	cmp	r3, #4
 8002c2a:	d11b      	bne.n	8002c64 <HAL_I2C_Master_Transmit+0x188>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d017      	beq.n	8002c64 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	781a      	ldrb	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	1c5a      	adds	r2, r3, #1
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	3b01      	subs	r3, #1
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	6a39      	ldr	r1, [r7, #32]
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f000 fcc2 	bl	80035f2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00d      	beq.n	8002c90 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d107      	bne.n	8002c8c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c8a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e01a      	b.n	8002cc6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d194      	bne.n	8002bc2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ca6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2220      	movs	r2, #32
 8002cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	e000      	b.n	8002cc6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002cc4:	2302      	movs	r3, #2
  }
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3718      	adds	r7, #24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	00100002 	.word	0x00100002
 8002cd4:	ffff0000 	.word	0xffff0000

08002cd8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b08c      	sub	sp, #48	; 0x30
 8002cdc:	af02      	add	r7, sp, #8
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	607a      	str	r2, [r7, #4]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	817b      	strh	r3, [r7, #10]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cec:	f7fe f98e 	bl	800100c <HAL_GetTick>
 8002cf0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b20      	cmp	r3, #32
 8002cfc:	f040 820b 	bne.w	8003116 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	2319      	movs	r3, #25
 8002d06:	2201      	movs	r2, #1
 8002d08:	497c      	ldr	r1, [pc, #496]	; (8002efc <HAL_I2C_Master_Receive+0x224>)
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f000 fb5a 	bl	80033c4 <I2C_WaitOnFlagUntilTimeout>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002d16:	2302      	movs	r3, #2
 8002d18:	e1fe      	b.n	8003118 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d101      	bne.n	8002d28 <HAL_I2C_Master_Receive+0x50>
 8002d24:	2302      	movs	r3, #2
 8002d26:	e1f7      	b.n	8003118 <HAL_I2C_Master_Receive+0x440>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d007      	beq.n	8002d4e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f042 0201 	orr.w	r2, r2, #1
 8002d4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d5c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2222      	movs	r2, #34	; 0x22
 8002d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2210      	movs	r2, #16
 8002d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	893a      	ldrh	r2, [r7, #8]
 8002d7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	4a5c      	ldr	r2, [pc, #368]	; (8002f00 <HAL_I2C_Master_Receive+0x228>)
 8002d8e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d90:	8979      	ldrh	r1, [r7, #10]
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 fa46 	bl	8003228 <I2C_MasterRequestRead>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e1b8      	b.n	8003118 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d113      	bne.n	8002dd6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dae:	2300      	movs	r3, #0
 8002db0:	623b      	str	r3, [r7, #32]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	623b      	str	r3, [r7, #32]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	623b      	str	r3, [r7, #32]
 8002dc2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	e18c      	b.n	80030f0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d11b      	bne.n	8002e16 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dee:	2300      	movs	r3, #0
 8002df0:	61fb      	str	r3, [r7, #28]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	61fb      	str	r3, [r7, #28]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	61fb      	str	r3, [r7, #28]
 8002e02:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	e16c      	b.n	80030f0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d11b      	bne.n	8002e56 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e2c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61bb      	str	r3, [r7, #24]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	61bb      	str	r3, [r7, #24]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	61bb      	str	r3, [r7, #24]
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	e14c      	b.n	80030f0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e66:	2300      	movs	r3, #0
 8002e68:	617b      	str	r3, [r7, #20]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	617b      	str	r3, [r7, #20]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	617b      	str	r3, [r7, #20]
 8002e7a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002e7c:	e138      	b.n	80030f0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e82:	2b03      	cmp	r3, #3
 8002e84:	f200 80f1 	bhi.w	800306a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d123      	bne.n	8002ed8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f000 fbed 	bl	8003674 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e139      	b.n	8003118 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	691a      	ldr	r2, [r3, #16]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb6:	1c5a      	adds	r2, r3, #1
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ed6:	e10b      	b.n	80030f0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d14e      	bne.n	8002f7e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	4906      	ldr	r1, [pc, #24]	; (8002f04 <HAL_I2C_Master_Receive+0x22c>)
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 fa6a 	bl	80033c4 <I2C_WaitOnFlagUntilTimeout>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d008      	beq.n	8002f08 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e10e      	b.n	8003118 <HAL_I2C_Master_Receive+0x440>
 8002efa:	bf00      	nop
 8002efc:	00100002 	.word	0x00100002
 8002f00:	ffff0000 	.word	0xffff0000
 8002f04:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	691a      	ldr	r2, [r3, #16]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	b2d2      	uxtb	r2, r2
 8002f24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f34:	3b01      	subs	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	3b01      	subs	r3, #1
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f66:	3b01      	subs	r3, #1
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	3b01      	subs	r3, #1
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f7c:	e0b8      	b.n	80030f0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f84:	2200      	movs	r2, #0
 8002f86:	4966      	ldr	r1, [pc, #408]	; (8003120 <HAL_I2C_Master_Receive+0x448>)
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f000 fa1b 	bl	80033c4 <I2C_WaitOnFlagUntilTimeout>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e0bf      	b.n	8003118 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fa6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	691a      	ldr	r2, [r3, #16]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fdc:	9300      	str	r3, [sp, #0]
 8002fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	494f      	ldr	r1, [pc, #316]	; (8003120 <HAL_I2C_Master_Receive+0x448>)
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f000 f9ed 	bl	80033c4 <I2C_WaitOnFlagUntilTimeout>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e091      	b.n	8003118 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003002:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	691a      	ldr	r2, [r3, #16]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	b2d2      	uxtb	r2, r2
 8003010:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	1c5a      	adds	r2, r3, #1
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003020:	3b01      	subs	r3, #1
 8003022:	b29a      	uxth	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302c:	b29b      	uxth	r3, r3
 800302e:	3b01      	subs	r3, #1
 8003030:	b29a      	uxth	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	691a      	ldr	r2, [r3, #16]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	b2d2      	uxtb	r2, r2
 8003042:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	1c5a      	adds	r2, r3, #1
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003052:	3b01      	subs	r3, #1
 8003054:	b29a      	uxth	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305e:	b29b      	uxth	r3, r3
 8003060:	3b01      	subs	r3, #1
 8003062:	b29a      	uxth	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003068:	e042      	b.n	80030f0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800306a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800306c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f000 fb00 	bl	8003674 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e04c      	b.n	8003118 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	691a      	ldr	r2, [r3, #16]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800309a:	3b01      	subs	r3, #1
 800309c:	b29a      	uxth	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	3b01      	subs	r3, #1
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	f003 0304 	and.w	r3, r3, #4
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	d118      	bne.n	80030f0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	691a      	ldr	r2, [r3, #16]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c8:	b2d2      	uxtb	r2, r2
 80030ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	1c5a      	adds	r2, r3, #1
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030da:	3b01      	subs	r3, #1
 80030dc:	b29a      	uxth	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	3b01      	subs	r3, #1
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f47f aec2 	bne.w	8002e7e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2220      	movs	r2, #32
 80030fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003112:	2300      	movs	r3, #0
 8003114:	e000      	b.n	8003118 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003116:	2302      	movs	r3, #2
  }
}
 8003118:	4618      	mov	r0, r3
 800311a:	3728      	adds	r7, #40	; 0x28
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	00010004 	.word	0x00010004

08003124 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b088      	sub	sp, #32
 8003128:	af02      	add	r7, sp, #8
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	607a      	str	r2, [r7, #4]
 800312e:	603b      	str	r3, [r7, #0]
 8003130:	460b      	mov	r3, r1
 8003132:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003138:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	2b08      	cmp	r3, #8
 800313e:	d006      	beq.n	800314e <I2C_MasterRequestWrite+0x2a>
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d003      	beq.n	800314e <I2C_MasterRequestWrite+0x2a>
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800314c:	d108      	bne.n	8003160 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	e00b      	b.n	8003178 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003164:	2b12      	cmp	r3, #18
 8003166:	d107      	bne.n	8003178 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003176:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f000 f91d 	bl	80033c4 <I2C_WaitOnFlagUntilTimeout>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00d      	beq.n	80031ac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800319e:	d103      	bne.n	80031a8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e035      	b.n	8003218 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031b4:	d108      	bne.n	80031c8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031b6:	897b      	ldrh	r3, [r7, #10]
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	461a      	mov	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031c4:	611a      	str	r2, [r3, #16]
 80031c6:	e01b      	b.n	8003200 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80031c8:	897b      	ldrh	r3, [r7, #10]
 80031ca:	11db      	asrs	r3, r3, #7
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	f003 0306 	and.w	r3, r3, #6
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	f063 030f 	orn	r3, r3, #15
 80031d8:	b2da      	uxtb	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	490e      	ldr	r1, [pc, #56]	; (8003220 <I2C_MasterRequestWrite+0xfc>)
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 f943 	bl	8003472 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e010      	b.n	8003218 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80031f6:	897b      	ldrh	r3, [r7, #10]
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	4907      	ldr	r1, [pc, #28]	; (8003224 <I2C_MasterRequestWrite+0x100>)
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 f933 	bl	8003472 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e000      	b.n	8003218 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3718      	adds	r7, #24
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	00010008 	.word	0x00010008
 8003224:	00010002 	.word	0x00010002

08003228 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b088      	sub	sp, #32
 800322c:	af02      	add	r7, sp, #8
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	607a      	str	r2, [r7, #4]
 8003232:	603b      	str	r3, [r7, #0]
 8003234:	460b      	mov	r3, r1
 8003236:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800324c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2b08      	cmp	r3, #8
 8003252:	d006      	beq.n	8003262 <I2C_MasterRequestRead+0x3a>
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d003      	beq.n	8003262 <I2C_MasterRequestRead+0x3a>
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003260:	d108      	bne.n	8003274 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	e00b      	b.n	800328c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003278:	2b11      	cmp	r3, #17
 800327a:	d107      	bne.n	800328c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800328a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 f893 	bl	80033c4 <I2C_WaitOnFlagUntilTimeout>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00d      	beq.n	80032c0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032b2:	d103      	bne.n	80032bc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e079      	b.n	80033b4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032c8:	d108      	bne.n	80032dc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80032ca:	897b      	ldrh	r3, [r7, #10]
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	f043 0301 	orr.w	r3, r3, #1
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	611a      	str	r2, [r3, #16]
 80032da:	e05f      	b.n	800339c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80032dc:	897b      	ldrh	r3, [r7, #10]
 80032de:	11db      	asrs	r3, r3, #7
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	f003 0306 	and.w	r3, r3, #6
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	f063 030f 	orn	r3, r3, #15
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	4930      	ldr	r1, [pc, #192]	; (80033bc <I2C_MasterRequestRead+0x194>)
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f000 f8b9 	bl	8003472 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e054      	b.n	80033b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800330a:	897b      	ldrh	r3, [r7, #10]
 800330c:	b2da      	uxtb	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	4929      	ldr	r1, [pc, #164]	; (80033c0 <I2C_MasterRequestRead+0x198>)
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 f8a9 	bl	8003472 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e044      	b.n	80033b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800332a:	2300      	movs	r3, #0
 800332c:	613b      	str	r3, [r7, #16]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	613b      	str	r3, [r7, #16]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	613b      	str	r3, [r7, #16]
 800333e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800334e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f000 f831 	bl	80033c4 <I2C_WaitOnFlagUntilTimeout>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00d      	beq.n	8003384 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003376:	d103      	bne.n	8003380 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800337e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e017      	b.n	80033b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003384:	897b      	ldrh	r3, [r7, #10]
 8003386:	11db      	asrs	r3, r3, #7
 8003388:	b2db      	uxtb	r3, r3
 800338a:	f003 0306 	and.w	r3, r3, #6
 800338e:	b2db      	uxtb	r3, r3
 8003390:	f063 030e 	orn	r3, r3, #14
 8003394:	b2da      	uxtb	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	4907      	ldr	r1, [pc, #28]	; (80033c0 <I2C_MasterRequestRead+0x198>)
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f000 f865 	bl	8003472 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e000      	b.n	80033b4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3718      	adds	r7, #24
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	00010008 	.word	0x00010008
 80033c0:	00010002 	.word	0x00010002

080033c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	603b      	str	r3, [r7, #0]
 80033d0:	4613      	mov	r3, r2
 80033d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033d4:	e025      	b.n	8003422 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033dc:	d021      	beq.n	8003422 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033de:	f7fd fe15 	bl	800100c <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d302      	bcc.n	80033f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d116      	bne.n	8003422 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2220      	movs	r2, #32
 80033fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	f043 0220 	orr.w	r2, r3, #32
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e023      	b.n	800346a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	0c1b      	lsrs	r3, r3, #16
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b01      	cmp	r3, #1
 800342a:	d10d      	bne.n	8003448 <I2C_WaitOnFlagUntilTimeout+0x84>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	43da      	mvns	r2, r3
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	4013      	ands	r3, r2
 8003438:	b29b      	uxth	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	bf0c      	ite	eq
 800343e:	2301      	moveq	r3, #1
 8003440:	2300      	movne	r3, #0
 8003442:	b2db      	uxtb	r3, r3
 8003444:	461a      	mov	r2, r3
 8003446:	e00c      	b.n	8003462 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	43da      	mvns	r2, r3
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	4013      	ands	r3, r2
 8003454:	b29b      	uxth	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	bf0c      	ite	eq
 800345a:	2301      	moveq	r3, #1
 800345c:	2300      	movne	r3, #0
 800345e:	b2db      	uxtb	r3, r3
 8003460:	461a      	mov	r2, r3
 8003462:	79fb      	ldrb	r3, [r7, #7]
 8003464:	429a      	cmp	r2, r3
 8003466:	d0b6      	beq.n	80033d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b084      	sub	sp, #16
 8003476:	af00      	add	r7, sp, #0
 8003478:	60f8      	str	r0, [r7, #12]
 800347a:	60b9      	str	r1, [r7, #8]
 800347c:	607a      	str	r2, [r7, #4]
 800347e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003480:	e051      	b.n	8003526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003490:	d123      	bne.n	80034da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2220      	movs	r2, #32
 80034b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	f043 0204 	orr.w	r2, r3, #4
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e046      	b.n	8003568 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034e0:	d021      	beq.n	8003526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034e2:	f7fd fd93 	bl	800100c <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d302      	bcc.n	80034f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d116      	bne.n	8003526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2220      	movs	r2, #32
 8003502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	f043 0220 	orr.w	r2, r3, #32
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e020      	b.n	8003568 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	0c1b      	lsrs	r3, r3, #16
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b01      	cmp	r3, #1
 800352e:	d10c      	bne.n	800354a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	43da      	mvns	r2, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	4013      	ands	r3, r2
 800353c:	b29b      	uxth	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	bf14      	ite	ne
 8003542:	2301      	movne	r3, #1
 8003544:	2300      	moveq	r3, #0
 8003546:	b2db      	uxtb	r3, r3
 8003548:	e00b      	b.n	8003562 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	43da      	mvns	r2, r3
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	4013      	ands	r3, r2
 8003556:	b29b      	uxth	r3, r3
 8003558:	2b00      	cmp	r3, #0
 800355a:	bf14      	ite	ne
 800355c:	2301      	movne	r3, #1
 800355e:	2300      	moveq	r3, #0
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d18d      	bne.n	8003482 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800357c:	e02d      	b.n	80035da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 f8ce 	bl	8003720 <I2C_IsAcknowledgeFailed>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e02d      	b.n	80035ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003594:	d021      	beq.n	80035da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003596:	f7fd fd39 	bl	800100c <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d302      	bcc.n	80035ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d116      	bne.n	80035da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2220      	movs	r2, #32
 80035b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	f043 0220 	orr.w	r2, r3, #32
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e007      	b.n	80035ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e4:	2b80      	cmp	r3, #128	; 0x80
 80035e6:	d1ca      	bne.n	800357e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b084      	sub	sp, #16
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	60f8      	str	r0, [r7, #12]
 80035fa:	60b9      	str	r1, [r7, #8]
 80035fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035fe:	e02d      	b.n	800365c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 f88d 	bl	8003720 <I2C_IsAcknowledgeFailed>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e02d      	b.n	800366c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003616:	d021      	beq.n	800365c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003618:	f7fd fcf8 	bl	800100c <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	429a      	cmp	r2, r3
 8003626:	d302      	bcc.n	800362e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d116      	bne.n	800365c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2220      	movs	r2, #32
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003648:	f043 0220 	orr.w	r2, r3, #32
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e007      	b.n	800366c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	f003 0304 	and.w	r3, r3, #4
 8003666:	2b04      	cmp	r3, #4
 8003668:	d1ca      	bne.n	8003600 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003680:	e042      	b.n	8003708 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	f003 0310 	and.w	r3, r3, #16
 800368c:	2b10      	cmp	r3, #16
 800368e:	d119      	bne.n	80036c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f06f 0210 	mvn.w	r2, #16
 8003698:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e029      	b.n	8003718 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c4:	f7fd fca2 	bl	800100c <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d302      	bcc.n	80036da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d116      	bne.n	8003708 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2220      	movs	r2, #32
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	f043 0220 	orr.w	r2, r3, #32
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e007      	b.n	8003718 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003712:	2b40      	cmp	r3, #64	; 0x40
 8003714:	d1b5      	bne.n	8003682 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003736:	d11b      	bne.n	8003770 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003740:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2220      	movs	r2, #32
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375c:	f043 0204 	orr.w	r2, r3, #4
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e000      	b.n	8003772 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
	...

08003780 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e25b      	b.n	8003c4a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	d075      	beq.n	800388a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800379e:	4ba3      	ldr	r3, [pc, #652]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 030c 	and.w	r3, r3, #12
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	d00c      	beq.n	80037c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037aa:	4ba0      	ldr	r3, [pc, #640]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037b2:	2b08      	cmp	r3, #8
 80037b4:	d112      	bne.n	80037dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037b6:	4b9d      	ldr	r3, [pc, #628]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037c2:	d10b      	bne.n	80037dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c4:	4b99      	ldr	r3, [pc, #612]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d05b      	beq.n	8003888 <HAL_RCC_OscConfig+0x108>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d157      	bne.n	8003888 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e236      	b.n	8003c4a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e4:	d106      	bne.n	80037f4 <HAL_RCC_OscConfig+0x74>
 80037e6:	4b91      	ldr	r3, [pc, #580]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a90      	ldr	r2, [pc, #576]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 80037ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	e01d      	b.n	8003830 <HAL_RCC_OscConfig+0xb0>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037fc:	d10c      	bne.n	8003818 <HAL_RCC_OscConfig+0x98>
 80037fe:	4b8b      	ldr	r3, [pc, #556]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a8a      	ldr	r2, [pc, #552]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 8003804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003808:	6013      	str	r3, [r2, #0]
 800380a:	4b88      	ldr	r3, [pc, #544]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a87      	ldr	r2, [pc, #540]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 8003810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003814:	6013      	str	r3, [r2, #0]
 8003816:	e00b      	b.n	8003830 <HAL_RCC_OscConfig+0xb0>
 8003818:	4b84      	ldr	r3, [pc, #528]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a83      	ldr	r2, [pc, #524]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 800381e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003822:	6013      	str	r3, [r2, #0]
 8003824:	4b81      	ldr	r3, [pc, #516]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a80      	ldr	r2, [pc, #512]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 800382a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800382e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d013      	beq.n	8003860 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003838:	f7fd fbe8 	bl	800100c <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003840:	f7fd fbe4 	bl	800100c <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b64      	cmp	r3, #100	; 0x64
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e1fb      	b.n	8003c4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003852:	4b76      	ldr	r3, [pc, #472]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0f0      	beq.n	8003840 <HAL_RCC_OscConfig+0xc0>
 800385e:	e014      	b.n	800388a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003860:	f7fd fbd4 	bl	800100c <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003868:	f7fd fbd0 	bl	800100c <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b64      	cmp	r3, #100	; 0x64
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e1e7      	b.n	8003c4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800387a:	4b6c      	ldr	r3, [pc, #432]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1f0      	bne.n	8003868 <HAL_RCC_OscConfig+0xe8>
 8003886:	e000      	b.n	800388a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d063      	beq.n	800395e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003896:	4b65      	ldr	r3, [pc, #404]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 030c 	and.w	r3, r3, #12
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00b      	beq.n	80038ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038a2:	4b62      	ldr	r3, [pc, #392]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038aa:	2b08      	cmp	r3, #8
 80038ac:	d11c      	bne.n	80038e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ae:	4b5f      	ldr	r3, [pc, #380]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d116      	bne.n	80038e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ba:	4b5c      	ldr	r3, [pc, #368]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d005      	beq.n	80038d2 <HAL_RCC_OscConfig+0x152>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d001      	beq.n	80038d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e1bb      	b.n	8003c4a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d2:	4b56      	ldr	r3, [pc, #344]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	4952      	ldr	r1, [pc, #328]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038e6:	e03a      	b.n	800395e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d020      	beq.n	8003932 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038f0:	4b4f      	ldr	r3, [pc, #316]	; (8003a30 <HAL_RCC_OscConfig+0x2b0>)
 80038f2:	2201      	movs	r2, #1
 80038f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f6:	f7fd fb89 	bl	800100c <HAL_GetTick>
 80038fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038fc:	e008      	b.n	8003910 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038fe:	f7fd fb85 	bl	800100c <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e19c      	b.n	8003c4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003910:	4b46      	ldr	r3, [pc, #280]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0f0      	beq.n	80038fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800391c:	4b43      	ldr	r3, [pc, #268]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	4940      	ldr	r1, [pc, #256]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 800392c:	4313      	orrs	r3, r2
 800392e:	600b      	str	r3, [r1, #0]
 8003930:	e015      	b.n	800395e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003932:	4b3f      	ldr	r3, [pc, #252]	; (8003a30 <HAL_RCC_OscConfig+0x2b0>)
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003938:	f7fd fb68 	bl	800100c <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003940:	f7fd fb64 	bl	800100c <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e17b      	b.n	8003c4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003952:	4b36      	ldr	r3, [pc, #216]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1f0      	bne.n	8003940 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	2b00      	cmp	r3, #0
 8003968:	d030      	beq.n	80039cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d016      	beq.n	80039a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003972:	4b30      	ldr	r3, [pc, #192]	; (8003a34 <HAL_RCC_OscConfig+0x2b4>)
 8003974:	2201      	movs	r2, #1
 8003976:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003978:	f7fd fb48 	bl	800100c <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003980:	f7fd fb44 	bl	800100c <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e15b      	b.n	8003c4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003992:	4b26      	ldr	r3, [pc, #152]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 8003994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0f0      	beq.n	8003980 <HAL_RCC_OscConfig+0x200>
 800399e:	e015      	b.n	80039cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039a0:	4b24      	ldr	r3, [pc, #144]	; (8003a34 <HAL_RCC_OscConfig+0x2b4>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a6:	f7fd fb31 	bl	800100c <HAL_GetTick>
 80039aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039ac:	e008      	b.n	80039c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039ae:	f7fd fb2d 	bl	800100c <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e144      	b.n	8003c4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039c0:	4b1a      	ldr	r3, [pc, #104]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 80039c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1f0      	bne.n	80039ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f000 80a0 	beq.w	8003b1a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039da:	2300      	movs	r3, #0
 80039dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039de:	4b13      	ldr	r3, [pc, #76]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10f      	bne.n	8003a0a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ea:	2300      	movs	r3, #0
 80039ec:	60bb      	str	r3, [r7, #8]
 80039ee:	4b0f      	ldr	r3, [pc, #60]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 80039f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f2:	4a0e      	ldr	r2, [pc, #56]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 80039f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f8:	6413      	str	r3, [r2, #64]	; 0x40
 80039fa:	4b0c      	ldr	r3, [pc, #48]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a02:	60bb      	str	r3, [r7, #8]
 8003a04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a06:	2301      	movs	r3, #1
 8003a08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a0a:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <HAL_RCC_OscConfig+0x2b8>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d121      	bne.n	8003a5a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a16:	4b08      	ldr	r3, [pc, #32]	; (8003a38 <HAL_RCC_OscConfig+0x2b8>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a07      	ldr	r2, [pc, #28]	; (8003a38 <HAL_RCC_OscConfig+0x2b8>)
 8003a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a22:	f7fd faf3 	bl	800100c <HAL_GetTick>
 8003a26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a28:	e011      	b.n	8003a4e <HAL_RCC_OscConfig+0x2ce>
 8003a2a:	bf00      	nop
 8003a2c:	40023800 	.word	0x40023800
 8003a30:	42470000 	.word	0x42470000
 8003a34:	42470e80 	.word	0x42470e80
 8003a38:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a3c:	f7fd fae6 	bl	800100c <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e0fd      	b.n	8003c4a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a4e:	4b81      	ldr	r3, [pc, #516]	; (8003c54 <HAL_RCC_OscConfig+0x4d4>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d0f0      	beq.n	8003a3c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d106      	bne.n	8003a70 <HAL_RCC_OscConfig+0x2f0>
 8003a62:	4b7d      	ldr	r3, [pc, #500]	; (8003c58 <HAL_RCC_OscConfig+0x4d8>)
 8003a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a66:	4a7c      	ldr	r2, [pc, #496]	; (8003c58 <HAL_RCC_OscConfig+0x4d8>)
 8003a68:	f043 0301 	orr.w	r3, r3, #1
 8003a6c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a6e:	e01c      	b.n	8003aaa <HAL_RCC_OscConfig+0x32a>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	2b05      	cmp	r3, #5
 8003a76:	d10c      	bne.n	8003a92 <HAL_RCC_OscConfig+0x312>
 8003a78:	4b77      	ldr	r3, [pc, #476]	; (8003c58 <HAL_RCC_OscConfig+0x4d8>)
 8003a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7c:	4a76      	ldr	r2, [pc, #472]	; (8003c58 <HAL_RCC_OscConfig+0x4d8>)
 8003a7e:	f043 0304 	orr.w	r3, r3, #4
 8003a82:	6713      	str	r3, [r2, #112]	; 0x70
 8003a84:	4b74      	ldr	r3, [pc, #464]	; (8003c58 <HAL_RCC_OscConfig+0x4d8>)
 8003a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a88:	4a73      	ldr	r2, [pc, #460]	; (8003c58 <HAL_RCC_OscConfig+0x4d8>)
 8003a8a:	f043 0301 	orr.w	r3, r3, #1
 8003a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a90:	e00b      	b.n	8003aaa <HAL_RCC_OscConfig+0x32a>
 8003a92:	4b71      	ldr	r3, [pc, #452]	; (8003c58 <HAL_RCC_OscConfig+0x4d8>)
 8003a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a96:	4a70      	ldr	r2, [pc, #448]	; (8003c58 <HAL_RCC_OscConfig+0x4d8>)
 8003a98:	f023 0301 	bic.w	r3, r3, #1
 8003a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a9e:	4b6e      	ldr	r3, [pc, #440]	; (8003c58 <HAL_RCC_OscConfig+0x4d8>)
 8003aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa2:	4a6d      	ldr	r2, [pc, #436]	; (8003c58 <HAL_RCC_OscConfig+0x4d8>)
 8003aa4:	f023 0304 	bic.w	r3, r3, #4
 8003aa8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d015      	beq.n	8003ade <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab2:	f7fd faab 	bl	800100c <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab8:	e00a      	b.n	8003ad0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aba:	f7fd faa7 	bl	800100c <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e0bc      	b.n	8003c4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ad0:	4b61      	ldr	r3, [pc, #388]	; (8003c58 <HAL_RCC_OscConfig+0x4d8>)
 8003ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0ee      	beq.n	8003aba <HAL_RCC_OscConfig+0x33a>
 8003adc:	e014      	b.n	8003b08 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ade:	f7fd fa95 	bl	800100c <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ae4:	e00a      	b.n	8003afc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ae6:	f7fd fa91 	bl	800100c <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e0a6      	b.n	8003c4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003afc:	4b56      	ldr	r3, [pc, #344]	; (8003c58 <HAL_RCC_OscConfig+0x4d8>)
 8003afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1ee      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b08:	7dfb      	ldrb	r3, [r7, #23]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d105      	bne.n	8003b1a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b0e:	4b52      	ldr	r3, [pc, #328]	; (8003c58 <HAL_RCC_OscConfig+0x4d8>)
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	4a51      	ldr	r2, [pc, #324]	; (8003c58 <HAL_RCC_OscConfig+0x4d8>)
 8003b14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 8092 	beq.w	8003c48 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b24:	4b4c      	ldr	r3, [pc, #304]	; (8003c58 <HAL_RCC_OscConfig+0x4d8>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f003 030c 	and.w	r3, r3, #12
 8003b2c:	2b08      	cmp	r3, #8
 8003b2e:	d05c      	beq.n	8003bea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d141      	bne.n	8003bbc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b38:	4b48      	ldr	r3, [pc, #288]	; (8003c5c <HAL_RCC_OscConfig+0x4dc>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b3e:	f7fd fa65 	bl	800100c <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b44:	e008      	b.n	8003b58 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b46:	f7fd fa61 	bl	800100c <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d901      	bls.n	8003b58 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e078      	b.n	8003c4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b58:	4b3f      	ldr	r3, [pc, #252]	; (8003c58 <HAL_RCC_OscConfig+0x4d8>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1f0      	bne.n	8003b46 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	69da      	ldr	r2, [r3, #28]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b72:	019b      	lsls	r3, r3, #6
 8003b74:	431a      	orrs	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7a:	085b      	lsrs	r3, r3, #1
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	041b      	lsls	r3, r3, #16
 8003b80:	431a      	orrs	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b86:	061b      	lsls	r3, r3, #24
 8003b88:	4933      	ldr	r1, [pc, #204]	; (8003c58 <HAL_RCC_OscConfig+0x4d8>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b8e:	4b33      	ldr	r3, [pc, #204]	; (8003c5c <HAL_RCC_OscConfig+0x4dc>)
 8003b90:	2201      	movs	r2, #1
 8003b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b94:	f7fd fa3a 	bl	800100c <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b9c:	f7fd fa36 	bl	800100c <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e04d      	b.n	8003c4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bae:	4b2a      	ldr	r3, [pc, #168]	; (8003c58 <HAL_RCC_OscConfig+0x4d8>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0f0      	beq.n	8003b9c <HAL_RCC_OscConfig+0x41c>
 8003bba:	e045      	b.n	8003c48 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bbc:	4b27      	ldr	r3, [pc, #156]	; (8003c5c <HAL_RCC_OscConfig+0x4dc>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc2:	f7fd fa23 	bl	800100c <HAL_GetTick>
 8003bc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bc8:	e008      	b.n	8003bdc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bca:	f7fd fa1f 	bl	800100c <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e036      	b.n	8003c4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bdc:	4b1e      	ldr	r3, [pc, #120]	; (8003c58 <HAL_RCC_OscConfig+0x4d8>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1f0      	bne.n	8003bca <HAL_RCC_OscConfig+0x44a>
 8003be8:	e02e      	b.n	8003c48 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d101      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e029      	b.n	8003c4a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bf6:	4b18      	ldr	r3, [pc, #96]	; (8003c58 <HAL_RCC_OscConfig+0x4d8>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d11c      	bne.n	8003c44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d115      	bne.n	8003c44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c1e:	4013      	ands	r3, r2
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d10d      	bne.n	8003c44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d106      	bne.n	8003c44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d001      	beq.n	8003c48 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e000      	b.n	8003c4a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3718      	adds	r7, #24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	40007000 	.word	0x40007000
 8003c58:	40023800 	.word	0x40023800
 8003c5c:	42470060 	.word	0x42470060

08003c60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e0cc      	b.n	8003e0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c74:	4b68      	ldr	r3, [pc, #416]	; (8003e18 <HAL_RCC_ClockConfig+0x1b8>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 030f 	and.w	r3, r3, #15
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d90c      	bls.n	8003c9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c82:	4b65      	ldr	r3, [pc, #404]	; (8003e18 <HAL_RCC_ClockConfig+0x1b8>)
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	b2d2      	uxtb	r2, r2
 8003c88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c8a:	4b63      	ldr	r3, [pc, #396]	; (8003e18 <HAL_RCC_ClockConfig+0x1b8>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	683a      	ldr	r2, [r7, #0]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d001      	beq.n	8003c9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e0b8      	b.n	8003e0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d020      	beq.n	8003cea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0304 	and.w	r3, r3, #4
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d005      	beq.n	8003cc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cb4:	4b59      	ldr	r3, [pc, #356]	; (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	4a58      	ldr	r2, [pc, #352]	; (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003cba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0308 	and.w	r3, r3, #8
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d005      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ccc:	4b53      	ldr	r3, [pc, #332]	; (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	4a52      	ldr	r2, [pc, #328]	; (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003cd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cd8:	4b50      	ldr	r3, [pc, #320]	; (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	494d      	ldr	r1, [pc, #308]	; (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d044      	beq.n	8003d80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d107      	bne.n	8003d0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cfe:	4b47      	ldr	r3, [pc, #284]	; (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d119      	bne.n	8003d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e07f      	b.n	8003e0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d003      	beq.n	8003d1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d1a:	2b03      	cmp	r3, #3
 8003d1c:	d107      	bne.n	8003d2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d1e:	4b3f      	ldr	r3, [pc, #252]	; (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d109      	bne.n	8003d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e06f      	b.n	8003e0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d2e:	4b3b      	ldr	r3, [pc, #236]	; (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e067      	b.n	8003e0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d3e:	4b37      	ldr	r3, [pc, #220]	; (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f023 0203 	bic.w	r2, r3, #3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	4934      	ldr	r1, [pc, #208]	; (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d50:	f7fd f95c 	bl	800100c <HAL_GetTick>
 8003d54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d56:	e00a      	b.n	8003d6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d58:	f7fd f958 	bl	800100c <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e04f      	b.n	8003e0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d6e:	4b2b      	ldr	r3, [pc, #172]	; (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f003 020c 	and.w	r2, r3, #12
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d1eb      	bne.n	8003d58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d80:	4b25      	ldr	r3, [pc, #148]	; (8003e18 <HAL_RCC_ClockConfig+0x1b8>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 030f 	and.w	r3, r3, #15
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d20c      	bcs.n	8003da8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d8e:	4b22      	ldr	r3, [pc, #136]	; (8003e18 <HAL_RCC_ClockConfig+0x1b8>)
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	b2d2      	uxtb	r2, r2
 8003d94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d96:	4b20      	ldr	r3, [pc, #128]	; (8003e18 <HAL_RCC_ClockConfig+0x1b8>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 030f 	and.w	r3, r3, #15
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d001      	beq.n	8003da8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e032      	b.n	8003e0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d008      	beq.n	8003dc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003db4:	4b19      	ldr	r3, [pc, #100]	; (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	4916      	ldr	r1, [pc, #88]	; (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0308 	and.w	r3, r3, #8
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d009      	beq.n	8003de6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dd2:	4b12      	ldr	r3, [pc, #72]	; (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	490e      	ldr	r1, [pc, #56]	; (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003de6:	f000 f821 	bl	8003e2c <HAL_RCC_GetSysClockFreq>
 8003dea:	4602      	mov	r2, r0
 8003dec:	4b0b      	ldr	r3, [pc, #44]	; (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	091b      	lsrs	r3, r3, #4
 8003df2:	f003 030f 	and.w	r3, r3, #15
 8003df6:	490a      	ldr	r1, [pc, #40]	; (8003e20 <HAL_RCC_ClockConfig+0x1c0>)
 8003df8:	5ccb      	ldrb	r3, [r1, r3]
 8003dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8003dfe:	4a09      	ldr	r2, [pc, #36]	; (8003e24 <HAL_RCC_ClockConfig+0x1c4>)
 8003e00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e02:	4b09      	ldr	r3, [pc, #36]	; (8003e28 <HAL_RCC_ClockConfig+0x1c8>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fd f8bc 	bl	8000f84 <HAL_InitTick>

  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	40023c00 	.word	0x40023c00
 8003e1c:	40023800 	.word	0x40023800
 8003e20:	08008dc0 	.word	0x08008dc0
 8003e24:	2000000c 	.word	0x2000000c
 8003e28:	20000000 	.word	0x20000000

08003e2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e2c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003e30:	b084      	sub	sp, #16
 8003e32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	607b      	str	r3, [r7, #4]
 8003e38:	2300      	movs	r3, #0
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e44:	4b67      	ldr	r3, [pc, #412]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f003 030c 	and.w	r3, r3, #12
 8003e4c:	2b08      	cmp	r3, #8
 8003e4e:	d00d      	beq.n	8003e6c <HAL_RCC_GetSysClockFreq+0x40>
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	f200 80bd 	bhi.w	8003fd0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d002      	beq.n	8003e60 <HAL_RCC_GetSysClockFreq+0x34>
 8003e5a:	2b04      	cmp	r3, #4
 8003e5c:	d003      	beq.n	8003e66 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e5e:	e0b7      	b.n	8003fd0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e60:	4b61      	ldr	r3, [pc, #388]	; (8003fe8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003e62:	60bb      	str	r3, [r7, #8]
       break;
 8003e64:	e0b7      	b.n	8003fd6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e66:	4b61      	ldr	r3, [pc, #388]	; (8003fec <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003e68:	60bb      	str	r3, [r7, #8]
      break;
 8003e6a:	e0b4      	b.n	8003fd6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e6c:	4b5d      	ldr	r3, [pc, #372]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e74:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e76:	4b5b      	ldr	r3, [pc, #364]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d04d      	beq.n	8003f1e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e82:	4b58      	ldr	r3, [pc, #352]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	099b      	lsrs	r3, r3, #6
 8003e88:	461a      	mov	r2, r3
 8003e8a:	f04f 0300 	mov.w	r3, #0
 8003e8e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e92:	f04f 0100 	mov.w	r1, #0
 8003e96:	ea02 0800 	and.w	r8, r2, r0
 8003e9a:	ea03 0901 	and.w	r9, r3, r1
 8003e9e:	4640      	mov	r0, r8
 8003ea0:	4649      	mov	r1, r9
 8003ea2:	f04f 0200 	mov.w	r2, #0
 8003ea6:	f04f 0300 	mov.w	r3, #0
 8003eaa:	014b      	lsls	r3, r1, #5
 8003eac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003eb0:	0142      	lsls	r2, r0, #5
 8003eb2:	4610      	mov	r0, r2
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	ebb0 0008 	subs.w	r0, r0, r8
 8003eba:	eb61 0109 	sbc.w	r1, r1, r9
 8003ebe:	f04f 0200 	mov.w	r2, #0
 8003ec2:	f04f 0300 	mov.w	r3, #0
 8003ec6:	018b      	lsls	r3, r1, #6
 8003ec8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ecc:	0182      	lsls	r2, r0, #6
 8003ece:	1a12      	subs	r2, r2, r0
 8003ed0:	eb63 0301 	sbc.w	r3, r3, r1
 8003ed4:	f04f 0000 	mov.w	r0, #0
 8003ed8:	f04f 0100 	mov.w	r1, #0
 8003edc:	00d9      	lsls	r1, r3, #3
 8003ede:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ee2:	00d0      	lsls	r0, r2, #3
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	eb12 0208 	adds.w	r2, r2, r8
 8003eec:	eb43 0309 	adc.w	r3, r3, r9
 8003ef0:	f04f 0000 	mov.w	r0, #0
 8003ef4:	f04f 0100 	mov.w	r1, #0
 8003ef8:	0259      	lsls	r1, r3, #9
 8003efa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003efe:	0250      	lsls	r0, r2, #9
 8003f00:	4602      	mov	r2, r0
 8003f02:	460b      	mov	r3, r1
 8003f04:	4610      	mov	r0, r2
 8003f06:	4619      	mov	r1, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	f04f 0300 	mov.w	r3, #0
 8003f10:	f7fc fe9a 	bl	8000c48 <__aeabi_uldivmod>
 8003f14:	4602      	mov	r2, r0
 8003f16:	460b      	mov	r3, r1
 8003f18:	4613      	mov	r3, r2
 8003f1a:	60fb      	str	r3, [r7, #12]
 8003f1c:	e04a      	b.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f1e:	4b31      	ldr	r3, [pc, #196]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	099b      	lsrs	r3, r3, #6
 8003f24:	461a      	mov	r2, r3
 8003f26:	f04f 0300 	mov.w	r3, #0
 8003f2a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003f2e:	f04f 0100 	mov.w	r1, #0
 8003f32:	ea02 0400 	and.w	r4, r2, r0
 8003f36:	ea03 0501 	and.w	r5, r3, r1
 8003f3a:	4620      	mov	r0, r4
 8003f3c:	4629      	mov	r1, r5
 8003f3e:	f04f 0200 	mov.w	r2, #0
 8003f42:	f04f 0300 	mov.w	r3, #0
 8003f46:	014b      	lsls	r3, r1, #5
 8003f48:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f4c:	0142      	lsls	r2, r0, #5
 8003f4e:	4610      	mov	r0, r2
 8003f50:	4619      	mov	r1, r3
 8003f52:	1b00      	subs	r0, r0, r4
 8003f54:	eb61 0105 	sbc.w	r1, r1, r5
 8003f58:	f04f 0200 	mov.w	r2, #0
 8003f5c:	f04f 0300 	mov.w	r3, #0
 8003f60:	018b      	lsls	r3, r1, #6
 8003f62:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f66:	0182      	lsls	r2, r0, #6
 8003f68:	1a12      	subs	r2, r2, r0
 8003f6a:	eb63 0301 	sbc.w	r3, r3, r1
 8003f6e:	f04f 0000 	mov.w	r0, #0
 8003f72:	f04f 0100 	mov.w	r1, #0
 8003f76:	00d9      	lsls	r1, r3, #3
 8003f78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f7c:	00d0      	lsls	r0, r2, #3
 8003f7e:	4602      	mov	r2, r0
 8003f80:	460b      	mov	r3, r1
 8003f82:	1912      	adds	r2, r2, r4
 8003f84:	eb45 0303 	adc.w	r3, r5, r3
 8003f88:	f04f 0000 	mov.w	r0, #0
 8003f8c:	f04f 0100 	mov.w	r1, #0
 8003f90:	0299      	lsls	r1, r3, #10
 8003f92:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003f96:	0290      	lsls	r0, r2, #10
 8003f98:	4602      	mov	r2, r0
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	4610      	mov	r0, r2
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	f04f 0300 	mov.w	r3, #0
 8003fa8:	f7fc fe4e 	bl	8000c48 <__aeabi_uldivmod>
 8003fac:	4602      	mov	r2, r0
 8003fae:	460b      	mov	r3, r1
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fb4:	4b0b      	ldr	r3, [pc, #44]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	0c1b      	lsrs	r3, r3, #16
 8003fba:	f003 0303 	and.w	r3, r3, #3
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fcc:	60bb      	str	r3, [r7, #8]
      break;
 8003fce:	e002      	b.n	8003fd6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fd0:	4b05      	ldr	r3, [pc, #20]	; (8003fe8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003fd2:	60bb      	str	r3, [r7, #8]
      break;
 8003fd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fd6:	68bb      	ldr	r3, [r7, #8]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003fe2:	bf00      	nop
 8003fe4:	40023800 	.word	0x40023800
 8003fe8:	00f42400 	.word	0x00f42400
 8003fec:	007a1200 	.word	0x007a1200

08003ff0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ff4:	4b03      	ldr	r3, [pc, #12]	; (8004004 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	2000000c 	.word	0x2000000c

08004008 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800400c:	f7ff fff0 	bl	8003ff0 <HAL_RCC_GetHCLKFreq>
 8004010:	4602      	mov	r2, r0
 8004012:	4b05      	ldr	r3, [pc, #20]	; (8004028 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	0a9b      	lsrs	r3, r3, #10
 8004018:	f003 0307 	and.w	r3, r3, #7
 800401c:	4903      	ldr	r1, [pc, #12]	; (800402c <HAL_RCC_GetPCLK1Freq+0x24>)
 800401e:	5ccb      	ldrb	r3, [r1, r3]
 8004020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004024:	4618      	mov	r0, r3
 8004026:	bd80      	pop	{r7, pc}
 8004028:	40023800 	.word	0x40023800
 800402c:	08008dd0 	.word	0x08008dd0

08004030 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e01d      	b.n	800407e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d106      	bne.n	800405c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f001 fc30 	bl	80058bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2202      	movs	r2, #2
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3304      	adds	r3, #4
 800406c:	4619      	mov	r1, r3
 800406e:	4610      	mov	r0, r2
 8004070:	f000 fa06 	bl	8004480 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b082      	sub	sp, #8
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d101      	bne.n	8004098 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e01d      	b.n	80040d4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d106      	bne.n	80040b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 f815 	bl	80040dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2202      	movs	r2, #2
 80040b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	3304      	adds	r3, #4
 80040c2:	4619      	mov	r1, r3
 80040c4:	4610      	mov	r0, r2
 80040c6:	f000 f9db 	bl	8004480 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3708      	adds	r7, #8
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2201      	movs	r2, #1
 8004100:	6839      	ldr	r1, [r7, #0]
 8004102:	4618      	mov	r0, r3
 8004104:	f000 fca6 	bl	8004a54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a15      	ldr	r2, [pc, #84]	; (8004164 <HAL_TIM_PWM_Start+0x74>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d004      	beq.n	800411c <HAL_TIM_PWM_Start+0x2c>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a14      	ldr	r2, [pc, #80]	; (8004168 <HAL_TIM_PWM_Start+0x78>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d101      	bne.n	8004120 <HAL_TIM_PWM_Start+0x30>
 800411c:	2301      	movs	r3, #1
 800411e:	e000      	b.n	8004122 <HAL_TIM_PWM_Start+0x32>
 8004120:	2300      	movs	r3, #0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d007      	beq.n	8004136 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004134:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f003 0307 	and.w	r3, r3, #7
 8004140:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2b06      	cmp	r3, #6
 8004146:	d007      	beq.n	8004158 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f042 0201 	orr.w	r2, r2, #1
 8004156:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	40010000 	.word	0x40010000
 8004168:	40010400 	.word	0x40010400

0800416c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800417e:	2b01      	cmp	r3, #1
 8004180:	d101      	bne.n	8004186 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004182:	2302      	movs	r3, #2
 8004184:	e0b4      	b.n	80042f0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2202      	movs	r2, #2
 8004192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2b0c      	cmp	r3, #12
 800419a:	f200 809f 	bhi.w	80042dc <HAL_TIM_PWM_ConfigChannel+0x170>
 800419e:	a201      	add	r2, pc, #4	; (adr r2, 80041a4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80041a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a4:	080041d9 	.word	0x080041d9
 80041a8:	080042dd 	.word	0x080042dd
 80041ac:	080042dd 	.word	0x080042dd
 80041b0:	080042dd 	.word	0x080042dd
 80041b4:	08004219 	.word	0x08004219
 80041b8:	080042dd 	.word	0x080042dd
 80041bc:	080042dd 	.word	0x080042dd
 80041c0:	080042dd 	.word	0x080042dd
 80041c4:	0800425b 	.word	0x0800425b
 80041c8:	080042dd 	.word	0x080042dd
 80041cc:	080042dd 	.word	0x080042dd
 80041d0:	080042dd 	.word	0x080042dd
 80041d4:	0800429b 	.word	0x0800429b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68b9      	ldr	r1, [r7, #8]
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 f9ee 	bl	80045c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	699a      	ldr	r2, [r3, #24]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f042 0208 	orr.w	r2, r2, #8
 80041f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	699a      	ldr	r2, [r3, #24]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f022 0204 	bic.w	r2, r2, #4
 8004202:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6999      	ldr	r1, [r3, #24]
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	691a      	ldr	r2, [r3, #16]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	619a      	str	r2, [r3, #24]
      break;
 8004216:	e062      	b.n	80042de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68b9      	ldr	r1, [r7, #8]
 800421e:	4618      	mov	r0, r3
 8004220:	f000 fa3e 	bl	80046a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	699a      	ldr	r2, [r3, #24]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	699a      	ldr	r2, [r3, #24]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6999      	ldr	r1, [r3, #24]
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	021a      	lsls	r2, r3, #8
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	619a      	str	r2, [r3, #24]
      break;
 8004258:	e041      	b.n	80042de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68b9      	ldr	r1, [r7, #8]
 8004260:	4618      	mov	r0, r3
 8004262:	f000 fa93 	bl	800478c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	69da      	ldr	r2, [r3, #28]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f042 0208 	orr.w	r2, r2, #8
 8004274:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	69da      	ldr	r2, [r3, #28]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 0204 	bic.w	r2, r2, #4
 8004284:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	69d9      	ldr	r1, [r3, #28]
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	691a      	ldr	r2, [r3, #16]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	430a      	orrs	r2, r1
 8004296:	61da      	str	r2, [r3, #28]
      break;
 8004298:	e021      	b.n	80042de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68b9      	ldr	r1, [r7, #8]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f000 fae7 	bl	8004874 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	69da      	ldr	r2, [r3, #28]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	69da      	ldr	r2, [r3, #28]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	69d9      	ldr	r1, [r3, #28]
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	021a      	lsls	r2, r3, #8
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	61da      	str	r2, [r3, #28]
      break;
 80042da:	e000      	b.n	80042de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80042dc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004308:	2b01      	cmp	r3, #1
 800430a:	d101      	bne.n	8004310 <HAL_TIM_ConfigClockSource+0x18>
 800430c:	2302      	movs	r3, #2
 800430e:	e0b3      	b.n	8004478 <HAL_TIM_ConfigClockSource+0x180>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2202      	movs	r2, #2
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800432e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004336:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004348:	d03e      	beq.n	80043c8 <HAL_TIM_ConfigClockSource+0xd0>
 800434a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800434e:	f200 8087 	bhi.w	8004460 <HAL_TIM_ConfigClockSource+0x168>
 8004352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004356:	f000 8085 	beq.w	8004464 <HAL_TIM_ConfigClockSource+0x16c>
 800435a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800435e:	d87f      	bhi.n	8004460 <HAL_TIM_ConfigClockSource+0x168>
 8004360:	2b70      	cmp	r3, #112	; 0x70
 8004362:	d01a      	beq.n	800439a <HAL_TIM_ConfigClockSource+0xa2>
 8004364:	2b70      	cmp	r3, #112	; 0x70
 8004366:	d87b      	bhi.n	8004460 <HAL_TIM_ConfigClockSource+0x168>
 8004368:	2b60      	cmp	r3, #96	; 0x60
 800436a:	d050      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x116>
 800436c:	2b60      	cmp	r3, #96	; 0x60
 800436e:	d877      	bhi.n	8004460 <HAL_TIM_ConfigClockSource+0x168>
 8004370:	2b50      	cmp	r3, #80	; 0x50
 8004372:	d03c      	beq.n	80043ee <HAL_TIM_ConfigClockSource+0xf6>
 8004374:	2b50      	cmp	r3, #80	; 0x50
 8004376:	d873      	bhi.n	8004460 <HAL_TIM_ConfigClockSource+0x168>
 8004378:	2b40      	cmp	r3, #64	; 0x40
 800437a:	d058      	beq.n	800442e <HAL_TIM_ConfigClockSource+0x136>
 800437c:	2b40      	cmp	r3, #64	; 0x40
 800437e:	d86f      	bhi.n	8004460 <HAL_TIM_ConfigClockSource+0x168>
 8004380:	2b30      	cmp	r3, #48	; 0x30
 8004382:	d064      	beq.n	800444e <HAL_TIM_ConfigClockSource+0x156>
 8004384:	2b30      	cmp	r3, #48	; 0x30
 8004386:	d86b      	bhi.n	8004460 <HAL_TIM_ConfigClockSource+0x168>
 8004388:	2b20      	cmp	r3, #32
 800438a:	d060      	beq.n	800444e <HAL_TIM_ConfigClockSource+0x156>
 800438c:	2b20      	cmp	r3, #32
 800438e:	d867      	bhi.n	8004460 <HAL_TIM_ConfigClockSource+0x168>
 8004390:	2b00      	cmp	r3, #0
 8004392:	d05c      	beq.n	800444e <HAL_TIM_ConfigClockSource+0x156>
 8004394:	2b10      	cmp	r3, #16
 8004396:	d05a      	beq.n	800444e <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004398:	e062      	b.n	8004460 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6818      	ldr	r0, [r3, #0]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	6899      	ldr	r1, [r3, #8]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f000 fb33 	bl	8004a14 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	609a      	str	r2, [r3, #8]
      break;
 80043c6:	e04e      	b.n	8004466 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6818      	ldr	r0, [r3, #0]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	6899      	ldr	r1, [r3, #8]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	f000 fb1c 	bl	8004a14 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689a      	ldr	r2, [r3, #8]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043ea:	609a      	str	r2, [r3, #8]
      break;
 80043ec:	e03b      	b.n	8004466 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6818      	ldr	r0, [r3, #0]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	6859      	ldr	r1, [r3, #4]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	461a      	mov	r2, r3
 80043fc:	f000 fa90 	bl	8004920 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2150      	movs	r1, #80	; 0x50
 8004406:	4618      	mov	r0, r3
 8004408:	f000 fae9 	bl	80049de <TIM_ITRx_SetConfig>
      break;
 800440c:	e02b      	b.n	8004466 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6818      	ldr	r0, [r3, #0]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	6859      	ldr	r1, [r3, #4]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	461a      	mov	r2, r3
 800441c:	f000 faaf 	bl	800497e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2160      	movs	r1, #96	; 0x60
 8004426:	4618      	mov	r0, r3
 8004428:	f000 fad9 	bl	80049de <TIM_ITRx_SetConfig>
      break;
 800442c:	e01b      	b.n	8004466 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6818      	ldr	r0, [r3, #0]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	6859      	ldr	r1, [r3, #4]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	461a      	mov	r2, r3
 800443c:	f000 fa70 	bl	8004920 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2140      	movs	r1, #64	; 0x40
 8004446:	4618      	mov	r0, r3
 8004448:	f000 fac9 	bl	80049de <TIM_ITRx_SetConfig>
      break;
 800444c:	e00b      	b.n	8004466 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4619      	mov	r1, r3
 8004458:	4610      	mov	r0, r2
 800445a:	f000 fac0 	bl	80049de <TIM_ITRx_SetConfig>
      break;
 800445e:	e002      	b.n	8004466 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004460:	bf00      	nop
 8004462:	e000      	b.n	8004466 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004464:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a40      	ldr	r2, [pc, #256]	; (8004594 <TIM_Base_SetConfig+0x114>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d013      	beq.n	80044c0 <TIM_Base_SetConfig+0x40>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800449e:	d00f      	beq.n	80044c0 <TIM_Base_SetConfig+0x40>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a3d      	ldr	r2, [pc, #244]	; (8004598 <TIM_Base_SetConfig+0x118>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d00b      	beq.n	80044c0 <TIM_Base_SetConfig+0x40>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a3c      	ldr	r2, [pc, #240]	; (800459c <TIM_Base_SetConfig+0x11c>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d007      	beq.n	80044c0 <TIM_Base_SetConfig+0x40>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a3b      	ldr	r2, [pc, #236]	; (80045a0 <TIM_Base_SetConfig+0x120>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d003      	beq.n	80044c0 <TIM_Base_SetConfig+0x40>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a3a      	ldr	r2, [pc, #232]	; (80045a4 <TIM_Base_SetConfig+0x124>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d108      	bne.n	80044d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a2f      	ldr	r2, [pc, #188]	; (8004594 <TIM_Base_SetConfig+0x114>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d02b      	beq.n	8004532 <TIM_Base_SetConfig+0xb2>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e0:	d027      	beq.n	8004532 <TIM_Base_SetConfig+0xb2>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a2c      	ldr	r2, [pc, #176]	; (8004598 <TIM_Base_SetConfig+0x118>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d023      	beq.n	8004532 <TIM_Base_SetConfig+0xb2>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a2b      	ldr	r2, [pc, #172]	; (800459c <TIM_Base_SetConfig+0x11c>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d01f      	beq.n	8004532 <TIM_Base_SetConfig+0xb2>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a2a      	ldr	r2, [pc, #168]	; (80045a0 <TIM_Base_SetConfig+0x120>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d01b      	beq.n	8004532 <TIM_Base_SetConfig+0xb2>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a29      	ldr	r2, [pc, #164]	; (80045a4 <TIM_Base_SetConfig+0x124>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d017      	beq.n	8004532 <TIM_Base_SetConfig+0xb2>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a28      	ldr	r2, [pc, #160]	; (80045a8 <TIM_Base_SetConfig+0x128>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d013      	beq.n	8004532 <TIM_Base_SetConfig+0xb2>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a27      	ldr	r2, [pc, #156]	; (80045ac <TIM_Base_SetConfig+0x12c>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d00f      	beq.n	8004532 <TIM_Base_SetConfig+0xb2>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a26      	ldr	r2, [pc, #152]	; (80045b0 <TIM_Base_SetConfig+0x130>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d00b      	beq.n	8004532 <TIM_Base_SetConfig+0xb2>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a25      	ldr	r2, [pc, #148]	; (80045b4 <TIM_Base_SetConfig+0x134>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d007      	beq.n	8004532 <TIM_Base_SetConfig+0xb2>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a24      	ldr	r2, [pc, #144]	; (80045b8 <TIM_Base_SetConfig+0x138>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d003      	beq.n	8004532 <TIM_Base_SetConfig+0xb2>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a23      	ldr	r2, [pc, #140]	; (80045bc <TIM_Base_SetConfig+0x13c>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d108      	bne.n	8004544 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	4313      	orrs	r3, r2
 8004542:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	4313      	orrs	r3, r2
 8004550:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a0a      	ldr	r2, [pc, #40]	; (8004594 <TIM_Base_SetConfig+0x114>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d003      	beq.n	8004578 <TIM_Base_SetConfig+0xf8>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a0c      	ldr	r2, [pc, #48]	; (80045a4 <TIM_Base_SetConfig+0x124>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d103      	bne.n	8004580 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	691a      	ldr	r2, [r3, #16]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	615a      	str	r2, [r3, #20]
}
 8004586:	bf00      	nop
 8004588:	3714      	adds	r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	40010000 	.word	0x40010000
 8004598:	40000400 	.word	0x40000400
 800459c:	40000800 	.word	0x40000800
 80045a0:	40000c00 	.word	0x40000c00
 80045a4:	40010400 	.word	0x40010400
 80045a8:	40014000 	.word	0x40014000
 80045ac:	40014400 	.word	0x40014400
 80045b0:	40014800 	.word	0x40014800
 80045b4:	40001800 	.word	0x40001800
 80045b8:	40001c00 	.word	0x40001c00
 80045bc:	40002000 	.word	0x40002000

080045c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b087      	sub	sp, #28
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	f023 0201 	bic.w	r2, r3, #1
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f023 0303 	bic.w	r3, r3, #3
 80045f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	4313      	orrs	r3, r2
 8004600:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f023 0302 	bic.w	r3, r3, #2
 8004608:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	4313      	orrs	r3, r2
 8004612:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a20      	ldr	r2, [pc, #128]	; (8004698 <TIM_OC1_SetConfig+0xd8>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d003      	beq.n	8004624 <TIM_OC1_SetConfig+0x64>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a1f      	ldr	r2, [pc, #124]	; (800469c <TIM_OC1_SetConfig+0xdc>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d10c      	bne.n	800463e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	f023 0308 	bic.w	r3, r3, #8
 800462a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	4313      	orrs	r3, r2
 8004634:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f023 0304 	bic.w	r3, r3, #4
 800463c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a15      	ldr	r2, [pc, #84]	; (8004698 <TIM_OC1_SetConfig+0xd8>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d003      	beq.n	800464e <TIM_OC1_SetConfig+0x8e>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a14      	ldr	r2, [pc, #80]	; (800469c <TIM_OC1_SetConfig+0xdc>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d111      	bne.n	8004672 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004654:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800465c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	4313      	orrs	r3, r2
 8004666:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	4313      	orrs	r3, r2
 8004670:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685a      	ldr	r2, [r3, #4]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	621a      	str	r2, [r3, #32]
}
 800468c:	bf00      	nop
 800468e:	371c      	adds	r7, #28
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr
 8004698:	40010000 	.word	0x40010000
 800469c:	40010400 	.word	0x40010400

080046a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b087      	sub	sp, #28
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	f023 0210 	bic.w	r2, r3, #16
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	021b      	lsls	r3, r3, #8
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	f023 0320 	bic.w	r3, r3, #32
 80046ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	011b      	lsls	r3, r3, #4
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a22      	ldr	r2, [pc, #136]	; (8004784 <TIM_OC2_SetConfig+0xe4>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d003      	beq.n	8004708 <TIM_OC2_SetConfig+0x68>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a21      	ldr	r2, [pc, #132]	; (8004788 <TIM_OC2_SetConfig+0xe8>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d10d      	bne.n	8004724 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800470e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	011b      	lsls	r3, r3, #4
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	4313      	orrs	r3, r2
 800471a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004722:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a17      	ldr	r2, [pc, #92]	; (8004784 <TIM_OC2_SetConfig+0xe4>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d003      	beq.n	8004734 <TIM_OC2_SetConfig+0x94>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a16      	ldr	r2, [pc, #88]	; (8004788 <TIM_OC2_SetConfig+0xe8>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d113      	bne.n	800475c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800473a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004742:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	4313      	orrs	r3, r2
 800474e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	4313      	orrs	r3, r2
 800475a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	621a      	str	r2, [r3, #32]
}
 8004776:	bf00      	nop
 8004778:	371c      	adds	r7, #28
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	40010000 	.word	0x40010000
 8004788:	40010400 	.word	0x40010400

0800478c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800478c:	b480      	push	{r7}
 800478e:	b087      	sub	sp, #28
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	69db      	ldr	r3, [r3, #28]
 80047b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f023 0303 	bic.w	r3, r3, #3
 80047c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	021b      	lsls	r3, r3, #8
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	4313      	orrs	r3, r2
 80047e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a21      	ldr	r2, [pc, #132]	; (800486c <TIM_OC3_SetConfig+0xe0>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d003      	beq.n	80047f2 <TIM_OC3_SetConfig+0x66>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a20      	ldr	r2, [pc, #128]	; (8004870 <TIM_OC3_SetConfig+0xe4>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d10d      	bne.n	800480e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	021b      	lsls	r3, r3, #8
 8004800:	697a      	ldr	r2, [r7, #20]
 8004802:	4313      	orrs	r3, r2
 8004804:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800480c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a16      	ldr	r2, [pc, #88]	; (800486c <TIM_OC3_SetConfig+0xe0>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d003      	beq.n	800481e <TIM_OC3_SetConfig+0x92>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a15      	ldr	r2, [pc, #84]	; (8004870 <TIM_OC3_SetConfig+0xe4>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d113      	bne.n	8004846 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004824:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800482c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	011b      	lsls	r3, r3, #4
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	4313      	orrs	r3, r2
 8004838:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	011b      	lsls	r3, r3, #4
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	4313      	orrs	r3, r2
 8004844:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	621a      	str	r2, [r3, #32]
}
 8004860:	bf00      	nop
 8004862:	371c      	adds	r7, #28
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	40010000 	.word	0x40010000
 8004870:	40010400 	.word	0x40010400

08004874 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004874:	b480      	push	{r7}
 8004876:	b087      	sub	sp, #28
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	69db      	ldr	r3, [r3, #28]
 800489a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	021b      	lsls	r3, r3, #8
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	031b      	lsls	r3, r3, #12
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a12      	ldr	r2, [pc, #72]	; (8004918 <TIM_OC4_SetConfig+0xa4>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d003      	beq.n	80048dc <TIM_OC4_SetConfig+0x68>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a11      	ldr	r2, [pc, #68]	; (800491c <TIM_OC4_SetConfig+0xa8>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d109      	bne.n	80048f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	019b      	lsls	r3, r3, #6
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	685a      	ldr	r2, [r3, #4]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	621a      	str	r2, [r3, #32]
}
 800490a:	bf00      	nop
 800490c:	371c      	adds	r7, #28
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	40010000 	.word	0x40010000
 800491c:	40010400 	.word	0x40010400

08004920 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004920:	b480      	push	{r7}
 8004922:	b087      	sub	sp, #28
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6a1b      	ldr	r3, [r3, #32]
 8004930:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	f023 0201 	bic.w	r2, r3, #1
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800494a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	011b      	lsls	r3, r3, #4
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	4313      	orrs	r3, r2
 8004954:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f023 030a 	bic.w	r3, r3, #10
 800495c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	4313      	orrs	r3, r2
 8004964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	621a      	str	r2, [r3, #32]
}
 8004972:	bf00      	nop
 8004974:	371c      	adds	r7, #28
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800497e:	b480      	push	{r7}
 8004980:	b087      	sub	sp, #28
 8004982:	af00      	add	r7, sp, #0
 8004984:	60f8      	str	r0, [r7, #12]
 8004986:	60b9      	str	r1, [r7, #8]
 8004988:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	f023 0210 	bic.w	r2, r3, #16
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	031b      	lsls	r3, r3, #12
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	011b      	lsls	r3, r3, #4
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	621a      	str	r2, [r3, #32]
}
 80049d2:	bf00      	nop
 80049d4:	371c      	adds	r7, #28
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049de:	b480      	push	{r7}
 80049e0:	b085      	sub	sp, #20
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
 80049e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	f043 0307 	orr.w	r3, r3, #7
 8004a00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	609a      	str	r2, [r3, #8]
}
 8004a08:	bf00      	nop
 8004a0a:	3714      	adds	r7, #20
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b087      	sub	sp, #28
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
 8004a20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	021a      	lsls	r2, r3, #8
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	431a      	orrs	r2, r3
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	609a      	str	r2, [r3, #8]
}
 8004a48:	bf00      	nop
 8004a4a:	371c      	adds	r7, #28
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b087      	sub	sp, #28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	f003 031f 	and.w	r3, r3, #31
 8004a66:	2201      	movs	r2, #1
 8004a68:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6a1a      	ldr	r2, [r3, #32]
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	43db      	mvns	r3, r3
 8004a76:	401a      	ands	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6a1a      	ldr	r2, [r3, #32]
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	f003 031f 	and.w	r3, r3, #31
 8004a86:	6879      	ldr	r1, [r7, #4]
 8004a88:	fa01 f303 	lsl.w	r3, r1, r3
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	621a      	str	r2, [r3, #32]
}
 8004a92:	bf00      	nop
 8004a94:	371c      	adds	r7, #28
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
	...

08004aa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d101      	bne.n	8004ab8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	e05a      	b.n	8004b6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ade:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a21      	ldr	r2, [pc, #132]	; (8004b7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d022      	beq.n	8004b42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b04:	d01d      	beq.n	8004b42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a1d      	ldr	r2, [pc, #116]	; (8004b80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d018      	beq.n	8004b42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a1b      	ldr	r2, [pc, #108]	; (8004b84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d013      	beq.n	8004b42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a1a      	ldr	r2, [pc, #104]	; (8004b88 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d00e      	beq.n	8004b42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a18      	ldr	r2, [pc, #96]	; (8004b8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d009      	beq.n	8004b42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a17      	ldr	r2, [pc, #92]	; (8004b90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d004      	beq.n	8004b42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a15      	ldr	r2, [pc, #84]	; (8004b94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d10c      	bne.n	8004b5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	40010000 	.word	0x40010000
 8004b80:	40000400 	.word	0x40000400
 8004b84:	40000800 	.word	0x40000800
 8004b88:	40000c00 	.word	0x40000c00
 8004b8c:	40010400 	.word	0x40010400
 8004b90:	40014000 	.word	0x40014000
 8004b94:	40001800 	.word	0x40001800

08004b98 <Array_sort_pressure>:
#include "Pressure.h"
#include "stdio.h"

// function to sort the array in ascending order
void Array_sort_pressure(int *array , int k)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b087      	sub	sp, #28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
    // declare some local variables
    int i=0 , j=0 , temp=0;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	617b      	str	r3, [r7, #20]
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	613b      	str	r3, [r7, #16]
 8004baa:	2300      	movs	r3, #0
 8004bac:	60fb      	str	r3, [r7, #12]

    for(i=0 ; i<k ; i++)
 8004bae:	2300      	movs	r3, #0
 8004bb0:	617b      	str	r3, [r7, #20]
 8004bb2:	e032      	b.n	8004c1a <Array_sort_pressure+0x82>
    {
        for(j=0 ; j<k-1 ; j++)
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	613b      	str	r3, [r7, #16]
 8004bb8:	e027      	b.n	8004c0a <Array_sort_pressure+0x72>
        {
            if(array[j]>array[j+1])
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	6879      	ldr	r1, [r7, #4]
 8004bcc:	440b      	add	r3, r1
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	dd17      	ble.n	8004c04 <Array_sort_pressure+0x6c>
            {
                temp        = array[j];
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	4413      	add	r3, r2
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	60fb      	str	r3, [r7, #12]
                array[j]    = array[j+1];
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	3301      	adds	r3, #1
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	441a      	add	r2, r3
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	6879      	ldr	r1, [r7, #4]
 8004bf0:	440b      	add	r3, r1
 8004bf2:	6812      	ldr	r2, [r2, #0]
 8004bf4:	601a      	str	r2, [r3, #0]
                array[j+1]  = temp;
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	4413      	add	r3, r2
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	601a      	str	r2, [r3, #0]
        for(j=0 ; j<k-1 ; j++)
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	3301      	adds	r3, #1
 8004c08:	613b      	str	r3, [r7, #16]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	dbd2      	blt.n	8004bba <Array_sort_pressure+0x22>
    for(i=0 ; i<k ; i++)
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	3301      	adds	r3, #1
 8004c18:	617b      	str	r3, [r7, #20]
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	dbc8      	blt.n	8004bb4 <Array_sort_pressure+0x1c>
            }
        }
    }
}
 8004c22:	bf00      	nop
 8004c24:	bf00      	nop
 8004c26:	371c      	adds	r7, #28
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <Find_median_pressure>:


// function to calculate the median of the array
float Find_median_pressure(int array[] , int k)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
   float median=0;
 8004c3a:	f04f 0300 	mov.w	r3, #0
 8004c3e:	60fb      	str	r3, [r7, #12]

  // if number of elements are even
   if(k%2 == 0)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d123      	bne.n	8004c92 <Find_median_pressure+0x62>
   median = (array[(k-1)/2] + array[k/2])/2.0;
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	0fda      	lsrs	r2, r3, #31
 8004c50:	4413      	add	r3, r2
 8004c52:	105b      	asrs	r3, r3, #1
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	4413      	add	r3, r2
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	0fd9      	lsrs	r1, r3, #31
 8004c60:	440b      	add	r3, r1
 8004c62:	105b      	asrs	r3, r3, #1
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	6879      	ldr	r1, [r7, #4]
 8004c68:	440b      	add	r3, r1
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7fb fc58 	bl	8000524 <__aeabi_i2d>
 8004c74:	f04f 0200 	mov.w	r2, #0
 8004c78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c7c:	f7fb fde6 	bl	800084c <__aeabi_ddiv>
 8004c80:	4602      	mov	r2, r0
 8004c82:	460b      	mov	r3, r1
 8004c84:	4610      	mov	r0, r2
 8004c86:	4619      	mov	r1, r3
 8004c88:	f7fb ff8e 	bl	8000ba8 <__aeabi_d2f>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	60fb      	str	r3, [r7, #12]
 8004c90:	e00d      	b.n	8004cae <Find_median_pressure+0x7e>
   // if number of elements are odd
    else
    median = array[k/2];
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	0fda      	lsrs	r2, r3, #31
 8004c96:	4413      	add	r3, r2
 8004c98:	105b      	asrs	r3, r3, #1
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	ee07 3a90 	vmov	s15, r3
 8004ca6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004caa:	edc7 7a03 	vstr	s15, [r7, #12]

    return median;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	ee07 3a90 	vmov	s15, r3
}
 8004cb4:	eeb0 0a67 	vmov.f32	s0, s15
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <Pressure_median>:

uint16_t Pressure_median(uint16_t pressure_value)
{
 8004cbe:	b5b0      	push	{r4, r5, r7, lr}
 8004cc0:	b088      	sub	sp, #32
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	80fb      	strh	r3, [r7, #6]
 8004cc8:	466b      	mov	r3, sp
 8004cca:	461d      	mov	r5, r3
	    // declare some local variables
	    int i=0 ,k=25;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	61fb      	str	r3, [r7, #28]
 8004cd0:	2319      	movs	r3, #25
 8004cd2:	61bb      	str	r3, [r7, #24]
	    float median=0;
 8004cd4:	f04f 0300 	mov.w	r3, #0
 8004cd8:	617b      	str	r3, [r7, #20]

	    // declare two int arrays
	  	    int array_pressure[k];
 8004cda:	69bc      	ldr	r4, [r7, #24]
 8004cdc:	1e63      	subs	r3, r4, #1
 8004cde:	613b      	str	r3, [r7, #16]
 8004ce0:	4623      	mov	r3, r4
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f04f 0100 	mov.w	r1, #0
 8004ce8:	f04f 0200 	mov.w	r2, #0
 8004cec:	f04f 0300 	mov.w	r3, #0
 8004cf0:	014b      	lsls	r3, r1, #5
 8004cf2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004cf6:	0142      	lsls	r2, r0, #5
 8004cf8:	4623      	mov	r3, r4
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f04f 0100 	mov.w	r1, #0
 8004d00:	f04f 0200 	mov.w	r2, #0
 8004d04:	f04f 0300 	mov.w	r3, #0
 8004d08:	014b      	lsls	r3, r1, #5
 8004d0a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004d0e:	0142      	lsls	r2, r0, #5
 8004d10:	4623      	mov	r3, r4
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	3307      	adds	r3, #7
 8004d16:	08db      	lsrs	r3, r3, #3
 8004d18:	00db      	lsls	r3, r3, #3
 8004d1a:	ebad 0d03 	sub.w	sp, sp, r3
 8004d1e:	466b      	mov	r3, sp
 8004d20:	3303      	adds	r3, #3
 8004d22:	089b      	lsrs	r3, r3, #2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	60fb      	str	r3, [r7, #12]

	    for(i = 0; i < k; i++)
 8004d28:	2300      	movs	r3, #0
 8004d2a:	61fb      	str	r3, [r7, #28]
 8004d2c:	e007      	b.n	8004d3e <Pressure_median+0x80>
	    {
	    	array_pressure[i] = pressure_value;
 8004d2e:	88f9      	ldrh	r1, [r7, #6]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	69fa      	ldr	r2, [r7, #28]
 8004d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	    for(i = 0; i < k; i++)
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	61fb      	str	r3, [r7, #28]
 8004d3e:	69fa      	ldr	r2, [r7, #28]
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	dbf3      	blt.n	8004d2e <Pressure_median+0x70>
	    }

	    // Sort the array in ascending order
	       Array_sort_pressure(array_pressure, k);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	69b9      	ldr	r1, [r7, #24]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7ff ff24 	bl	8004b98 <Array_sort_pressure>

	       // Now pass the sorted array to calculate
	      //    the median of your array.
	          median = Find_median_pressure(array_pressure , k);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	69b9      	ldr	r1, [r7, #24]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7ff ff6b 	bl	8004c30 <Find_median_pressure>
 8004d5a:	ed87 0a05 	vstr	s0, [r7, #20]

	 return(median);
 8004d5e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004d62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d66:	ee17 3a90 	vmov	r3, s15
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	46ad      	mov	sp, r5
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3720      	adds	r7, #32
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b08e      	sub	sp, #56	; 0x38
 8004d7c:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN 1 */
uint16_t Temperature = 0;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	81fb      	strh	r3, [r7, #14]
uint16_t Pressure = 0;
 8004d82:	2300      	movs	r3, #0
 8004d84:	81bb      	strh	r3, [r7, #12]
float Distance = 0;
 8004d86:	f04f 0300 	mov.w	r3, #0
 8004d8a:	60bb      	str	r3, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004d8c:	f7fc f8d8 	bl	8000f40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004d90:	f000 f89e 	bl	8004ed0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004d94:	f000 faaa 	bl	80052ec <MX_GPIO_Init>
  MX_CAN1_Init();
 8004d98:	f000 f958 	bl	800504c <MX_CAN1_Init>
  MX_I2C1_Init();
 8004d9c:	f000 f9b6 	bl	800510c <MX_I2C1_Init>
  MX_ADC1_Init();
 8004da0:	f000 f900 	bl	8004fa4 <MX_ADC1_Init>
  MX_TIM4_Init();
 8004da4:	f000 fa56 	bl	8005254 <MX_TIM4_Init>
  MX_TIM2_Init();
 8004da8:	f000 f9de 	bl	8005168 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  void Delay_us(uint32_t delay);

  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8004dac:	4840      	ldr	r0, [pc, #256]	; (8004eb0 <main+0x138>)
 8004dae:	f7fc fef3 	bl	8001b98 <HAL_CAN_Start>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d001      	beq.n	8004dbc <main+0x44>
  {
    /* Start Error */
     Error_Handler();
 8004db8:	f000 fc5a 	bl	8005670 <Error_Handler>
  }

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8004dbc:	2102      	movs	r1, #2
 8004dbe:	483c      	ldr	r0, [pc, #240]	; (8004eb0 <main+0x138>)
 8004dc0:	f7fd f809 	bl	8001dd6 <HAL_CAN_ActivateNotification>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <main+0x56>
  {

    /* Notification Error */
    Error_Handler();
 8004dca:	f000 fc51 	bl	8005670 <Error_Handler>
  }

  TxHeader.StdId = master_ID;
 8004dce:	4b39      	ldr	r3, [pc, #228]	; (8004eb4 <main+0x13c>)
 8004dd0:	881b      	ldrh	r3, [r3, #0]
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	4b38      	ldr	r3, [pc, #224]	; (8004eb8 <main+0x140>)
 8004dd6:	601a      	str	r2, [r3, #0]
  //TxHeader.StdId = slave_ID;
  TxHeader.ExtId = 0x00;
 8004dd8:	4b37      	ldr	r3, [pc, #220]	; (8004eb8 <main+0x140>)
 8004dda:	2200      	movs	r2, #0
 8004ddc:	605a      	str	r2, [r3, #4]
  TxHeader.RTR = CAN_RTR_DATA;
 8004dde:	4b36      	ldr	r3, [pc, #216]	; (8004eb8 <main+0x140>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 8004de4:	4b34      	ldr	r3, [pc, #208]	; (8004eb8 <main+0x140>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 4;
 8004dea:	4b33      	ldr	r3, [pc, #204]	; (8004eb8 <main+0x140>)
 8004dec:	2204      	movs	r2, #4
 8004dee:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8004df0:	4b31      	ldr	r3, [pc, #196]	; (8004eb8 <main+0x140>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	751a      	strb	r2, [r3, #20]


  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8004df6:	2100      	movs	r1, #0
 8004df8:	4830      	ldr	r0, [pc, #192]	; (8004ebc <main+0x144>)
 8004dfa:	f7ff f979 	bl	80040f0 <HAL_TIM_PWM_Start>

/* LCD Pins */
  lcd16x2_init_8bits(RS_GPIO_Port, RS_Pin, E_Pin,
 8004dfe:	2380      	movs	r3, #128	; 0x80
 8004e00:	9308      	str	r3, [sp, #32]
 8004e02:	2340      	movs	r3, #64	; 0x40
 8004e04:	9307      	str	r3, [sp, #28]
 8004e06:	2320      	movs	r3, #32
 8004e08:	9306      	str	r3, [sp, #24]
 8004e0a:	2310      	movs	r3, #16
 8004e0c:	9305      	str	r3, [sp, #20]
 8004e0e:	4b2c      	ldr	r3, [pc, #176]	; (8004ec0 <main+0x148>)
 8004e10:	9304      	str	r3, [sp, #16]
 8004e12:	2308      	movs	r3, #8
 8004e14:	9303      	str	r3, [sp, #12]
 8004e16:	2304      	movs	r3, #4
 8004e18:	9302      	str	r3, [sp, #8]
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	9301      	str	r3, [sp, #4]
 8004e1e:	2301      	movs	r3, #1
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	4b27      	ldr	r3, [pc, #156]	; (8004ec0 <main+0x148>)
 8004e24:	2210      	movs	r2, #16
 8004e26:	2108      	movs	r1, #8
 8004e28:	4826      	ldr	r0, [pc, #152]	; (8004ec4 <main+0x14c>)
 8004e2a:	f001 fa13 	bl	8006254 <lcd16x2_init_8bits>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(50);
 8004e2e:	2032      	movs	r0, #50	; 0x32
 8004e30:	f7fc f8f8 	bl	8001024 <HAL_Delay>

	  Temperature = ReadTemp();
 8004e34:	f000 faf2 	bl	800541c <ReadTemp>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	81fb      	strh	r3, [r7, #14]
	  HAL_Delay(50);
 8004e3c:	2032      	movs	r0, #50	; 0x32
 8004e3e:	f7fc f8f1 	bl	8001024 <HAL_Delay>

	  Distance = readdistance();
 8004e42:	f000 fb2d 	bl	80054a0 <readdistance>
 8004e46:	ed87 0a02 	vstr	s0, [r7, #8]
	  HAL_Delay(50);
 8004e4a:	2032      	movs	r0, #50	; 0x32
 8004e4c:	f7fc f8ea 	bl	8001024 <HAL_Delay>

	  Pressure = pressure();
 8004e50:	f000 fbbe 	bl	80055d0 <pressure>
 8004e54:	eef0 7a40 	vmov.f32	s15, s0
 8004e58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e5c:	ee17 3a90 	vmov	r3, s15
 8004e60:	81bb      	strh	r3, [r7, #12]
	  HAL_Delay(50);
 8004e62:	2032      	movs	r0, #50	; 0x32
 8004e64:	f7fc f8de 	bl	8001024 <HAL_Delay>


	  TxData[0] = Temperature;
 8004e68:	89fb      	ldrh	r3, [r7, #14]
 8004e6a:	b2da      	uxtb	r2, r3
 8004e6c:	4b16      	ldr	r3, [pc, #88]	; (8004ec8 <main+0x150>)
 8004e6e:	701a      	strb	r2, [r3, #0]
	  TxData[1] = Pressure;
 8004e70:	89bb      	ldrh	r3, [r7, #12]
 8004e72:	b2da      	uxtb	r2, r3
 8004e74:	4b14      	ldr	r3, [pc, #80]	; (8004ec8 <main+0x150>)
 8004e76:	705a      	strb	r2, [r3, #1]
	  TxData[2] = Distance;
 8004e78:	edd7 7a02 	vldr	s15, [r7, #8]
 8004e7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e80:	edc7 7a01 	vstr	s15, [r7, #4]
 8004e84:	793b      	ldrb	r3, [r7, #4]
 8004e86:	b2da      	uxtb	r2, r3
 8004e88:	4b0f      	ldr	r3, [pc, #60]	; (8004ec8 <main+0x150>)
 8004e8a:	709a      	strb	r2, [r3, #2]
	  HAL_Delay(50);
 8004e8c:	2032      	movs	r0, #50	; 0x32
 8004e8e:	f7fc f8c9 	bl	8001024 <HAL_Delay>
	  //if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
	  //{
	          if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8004e92:	4b0e      	ldr	r3, [pc, #56]	; (8004ecc <main+0x154>)
 8004e94:	4a0c      	ldr	r2, [pc, #48]	; (8004ec8 <main+0x150>)
 8004e96:	4908      	ldr	r1, [pc, #32]	; (8004eb8 <main+0x140>)
 8004e98:	4805      	ldr	r0, [pc, #20]	; (8004eb0 <main+0x138>)
 8004e9a:	f7fc fec1 	bl	8001c20 <HAL_CAN_AddTxMessage>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d001      	beq.n	8004ea8 <main+0x130>
		      {
			      Error_Handler();
 8004ea4:	f000 fbe4 	bl	8005670 <Error_Handler>

		      }
		      HAL_Delay(200);
 8004ea8:	20c8      	movs	r0, #200	; 0xc8
 8004eaa:	f7fc f8bb 	bl	8001024 <HAL_Delay>
	  HAL_Delay(50);
 8004eae:	e7be      	b.n	8004e2e <main+0xb6>
 8004eb0:	2000038c 	.word	0x2000038c
 8004eb4:	20000006 	.word	0x20000006
 8004eb8:	200003b4 	.word	0x200003b4
 8004ebc:	2000034c 	.word	0x2000034c
 8004ec0:	40020c00 	.word	0x40020c00
 8004ec4:	40020400 	.word	0x40020400
 8004ec8:	20000338 	.word	0x20000338
 8004ecc:	20000340 	.word	0x20000340

08004ed0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b094      	sub	sp, #80	; 0x50
 8004ed4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004ed6:	f107 0320 	add.w	r3, r7, #32
 8004eda:	2230      	movs	r2, #48	; 0x30
 8004edc:	2100      	movs	r1, #0
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f001 fa88 	bl	80063f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ee4:	f107 030c 	add.w	r3, r7, #12
 8004ee8:	2200      	movs	r2, #0
 8004eea:	601a      	str	r2, [r3, #0]
 8004eec:	605a      	str	r2, [r3, #4]
 8004eee:	609a      	str	r2, [r3, #8]
 8004ef0:	60da      	str	r2, [r3, #12]
 8004ef2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	60bb      	str	r3, [r7, #8]
 8004ef8:	4b28      	ldr	r3, [pc, #160]	; (8004f9c <SystemClock_Config+0xcc>)
 8004efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efc:	4a27      	ldr	r2, [pc, #156]	; (8004f9c <SystemClock_Config+0xcc>)
 8004efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f02:	6413      	str	r3, [r2, #64]	; 0x40
 8004f04:	4b25      	ldr	r3, [pc, #148]	; (8004f9c <SystemClock_Config+0xcc>)
 8004f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f0c:	60bb      	str	r3, [r7, #8]
 8004f0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f10:	2300      	movs	r3, #0
 8004f12:	607b      	str	r3, [r7, #4]
 8004f14:	4b22      	ldr	r3, [pc, #136]	; (8004fa0 <SystemClock_Config+0xd0>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a21      	ldr	r2, [pc, #132]	; (8004fa0 <SystemClock_Config+0xd0>)
 8004f1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f1e:	6013      	str	r3, [r2, #0]
 8004f20:	4b1f      	ldr	r3, [pc, #124]	; (8004fa0 <SystemClock_Config+0xd0>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f28:	607b      	str	r3, [r7, #4]
 8004f2a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004f30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f34:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004f36:	2302      	movs	r3, #2
 8004f38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004f3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004f40:	2304      	movs	r3, #4
 8004f42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004f44:	23a8      	movs	r3, #168	; 0xa8
 8004f46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004f48:	2302      	movs	r3, #2
 8004f4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004f4c:	2307      	movs	r3, #7
 8004f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004f50:	f107 0320 	add.w	r3, r7, #32
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7fe fc13 	bl	8003780 <HAL_RCC_OscConfig>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d001      	beq.n	8004f64 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004f60:	f000 fb86 	bl	8005670 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004f64:	230f      	movs	r3, #15
 8004f66:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004f68:	2302      	movs	r3, #2
 8004f6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004f70:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004f74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004f76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f7a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004f7c:	f107 030c 	add.w	r3, r7, #12
 8004f80:	2105      	movs	r1, #5
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7fe fe6c 	bl	8003c60 <HAL_RCC_ClockConfig>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d001      	beq.n	8004f92 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004f8e:	f000 fb6f 	bl	8005670 <Error_Handler>
  }
}
 8004f92:	bf00      	nop
 8004f94:	3750      	adds	r7, #80	; 0x50
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	40023800 	.word	0x40023800
 8004fa0:	40007000 	.word	0x40007000

08004fa4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004faa:	463b      	mov	r3, r7
 8004fac:	2200      	movs	r2, #0
 8004fae:	601a      	str	r2, [r3, #0]
 8004fb0:	605a      	str	r2, [r3, #4]
 8004fb2:	609a      	str	r2, [r3, #8]
 8004fb4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004fb6:	4b22      	ldr	r3, [pc, #136]	; (8005040 <MX_ADC1_Init+0x9c>)
 8004fb8:	4a22      	ldr	r2, [pc, #136]	; (8005044 <MX_ADC1_Init+0xa0>)
 8004fba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004fbc:	4b20      	ldr	r3, [pc, #128]	; (8005040 <MX_ADC1_Init+0x9c>)
 8004fbe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004fc2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8004fc4:	4b1e      	ldr	r3, [pc, #120]	; (8005040 <MX_ADC1_Init+0x9c>)
 8004fc6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004fca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8004fcc:	4b1c      	ldr	r3, [pc, #112]	; (8005040 <MX_ADC1_Init+0x9c>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004fd2:	4b1b      	ldr	r3, [pc, #108]	; (8005040 <MX_ADC1_Init+0x9c>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004fd8:	4b19      	ldr	r3, [pc, #100]	; (8005040 <MX_ADC1_Init+0x9c>)
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004fe0:	4b17      	ldr	r3, [pc, #92]	; (8005040 <MX_ADC1_Init+0x9c>)
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004fe6:	4b16      	ldr	r3, [pc, #88]	; (8005040 <MX_ADC1_Init+0x9c>)
 8004fe8:	4a17      	ldr	r2, [pc, #92]	; (8005048 <MX_ADC1_Init+0xa4>)
 8004fea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004fec:	4b14      	ldr	r3, [pc, #80]	; (8005040 <MX_ADC1_Init+0x9c>)
 8004fee:	2200      	movs	r2, #0
 8004ff0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004ff2:	4b13      	ldr	r3, [pc, #76]	; (8005040 <MX_ADC1_Init+0x9c>)
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004ff8:	4b11      	ldr	r3, [pc, #68]	; (8005040 <MX_ADC1_Init+0x9c>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005000:	4b0f      	ldr	r3, [pc, #60]	; (8005040 <MX_ADC1_Init+0x9c>)
 8005002:	2201      	movs	r2, #1
 8005004:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005006:	480e      	ldr	r0, [pc, #56]	; (8005040 <MX_ADC1_Init+0x9c>)
 8005008:	f7fc f830 	bl	800106c <HAL_ADC_Init>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d001      	beq.n	8005016 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8005012:	f000 fb2d 	bl	8005670 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8005016:	2304      	movs	r3, #4
 8005018:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800501a:	2301      	movs	r3, #1
 800501c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800501e:	2300      	movs	r3, #0
 8005020:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005022:	463b      	mov	r3, r7
 8005024:	4619      	mov	r1, r3
 8005026:	4806      	ldr	r0, [pc, #24]	; (8005040 <MX_ADC1_Init+0x9c>)
 8005028:	f7fc f9bc 	bl	80013a4 <HAL_ADC_ConfigChannel>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8005032:	f000 fb1d 	bl	8005670 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8005036:	bf00      	nop
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	200002f0 	.word	0x200002f0
 8005044:	40012000 	.word	0x40012000
 8005048:	0f000001 	.word	0x0f000001

0800504c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8005050:	4b2b      	ldr	r3, [pc, #172]	; (8005100 <MX_CAN1_Init+0xb4>)
 8005052:	4a2c      	ldr	r2, [pc, #176]	; (8005104 <MX_CAN1_Init+0xb8>)
 8005054:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 14;
 8005056:	4b2a      	ldr	r3, [pc, #168]	; (8005100 <MX_CAN1_Init+0xb4>)
 8005058:	220e      	movs	r2, #14
 800505a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800505c:	4b28      	ldr	r3, [pc, #160]	; (8005100 <MX_CAN1_Init+0xb4>)
 800505e:	2200      	movs	r2, #0
 8005060:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8005062:	4b27      	ldr	r3, [pc, #156]	; (8005100 <MX_CAN1_Init+0xb4>)
 8005064:	2200      	movs	r2, #0
 8005066:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8005068:	4b25      	ldr	r3, [pc, #148]	; (8005100 <MX_CAN1_Init+0xb4>)
 800506a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800506e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8005070:	4b23      	ldr	r3, [pc, #140]	; (8005100 <MX_CAN1_Init+0xb4>)
 8005072:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005076:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8005078:	4b21      	ldr	r3, [pc, #132]	; (8005100 <MX_CAN1_Init+0xb4>)
 800507a:	2200      	movs	r2, #0
 800507c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800507e:	4b20      	ldr	r3, [pc, #128]	; (8005100 <MX_CAN1_Init+0xb4>)
 8005080:	2200      	movs	r2, #0
 8005082:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8005084:	4b1e      	ldr	r3, [pc, #120]	; (8005100 <MX_CAN1_Init+0xb4>)
 8005086:	2200      	movs	r2, #0
 8005088:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800508a:	4b1d      	ldr	r3, [pc, #116]	; (8005100 <MX_CAN1_Init+0xb4>)
 800508c:	2200      	movs	r2, #0
 800508e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8005090:	4b1b      	ldr	r3, [pc, #108]	; (8005100 <MX_CAN1_Init+0xb4>)
 8005092:	2200      	movs	r2, #0
 8005094:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8005096:	4b1a      	ldr	r3, [pc, #104]	; (8005100 <MX_CAN1_Init+0xb4>)
 8005098:	2200      	movs	r2, #0
 800509a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800509c:	4818      	ldr	r0, [pc, #96]	; (8005100 <MX_CAN1_Init+0xb4>)
 800509e:	f7fc fb9f 	bl	80017e0 <HAL_CAN_Init>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d001      	beq.n	80050ac <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80050a8:	f000 fae2 	bl	8005670 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* CAN filter */
  sFilterConfig.FilterBank = 10;
 80050ac:	4b16      	ldr	r3, [pc, #88]	; (8005108 <MX_CAN1_Init+0xbc>)
 80050ae:	220a      	movs	r2, #10
 80050b0:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80050b2:	4b15      	ldr	r3, [pc, #84]	; (8005108 <MX_CAN1_Init+0xbc>)
 80050b4:	2200      	movs	r2, #0
 80050b6:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80050b8:	4b13      	ldr	r3, [pc, #76]	; (8005108 <MX_CAN1_Init+0xbc>)
 80050ba:	2201      	movs	r2, #1
 80050bc:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 80050be:	4b12      	ldr	r3, [pc, #72]	; (8005108 <MX_CAN1_Init+0xbc>)
 80050c0:	2200      	movs	r2, #0
 80050c2:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80050c4:	4b10      	ldr	r3, [pc, #64]	; (8005108 <MX_CAN1_Init+0xbc>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80050ca:	4b0f      	ldr	r3, [pc, #60]	; (8005108 <MX_CAN1_Init+0xbc>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80050d0:	4b0d      	ldr	r3, [pc, #52]	; (8005108 <MX_CAN1_Init+0xbc>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80050d6:	4b0c      	ldr	r3, [pc, #48]	; (8005108 <MX_CAN1_Init+0xbc>)
 80050d8:	2200      	movs	r2, #0
 80050da:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80050dc:	4b0a      	ldr	r3, [pc, #40]	; (8005108 <MX_CAN1_Init+0xbc>)
 80050de:	2201      	movs	r2, #1
 80050e0:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank = 0;
 80050e2:	4b09      	ldr	r3, [pc, #36]	; (8005108 <MX_CAN1_Init+0xbc>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80050e8:	4907      	ldr	r1, [pc, #28]	; (8005108 <MX_CAN1_Init+0xbc>)
 80050ea:	4805      	ldr	r0, [pc, #20]	; (8005100 <MX_CAN1_Init+0xb4>)
 80050ec:	f7fc fc74 	bl	80019d8 <HAL_CAN_ConfigFilter>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <MX_CAN1_Init+0xae>
  {
     /* Filter configuration Error */
  Error_Handler();
 80050f6:	f000 fabb 	bl	8005670 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 80050fa:	bf00      	nop
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	2000038c 	.word	0x2000038c
 8005104:	40006400 	.word	0x40006400
 8005108:	20000234 	.word	0x20000234

0800510c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005110:	4b12      	ldr	r3, [pc, #72]	; (800515c <MX_I2C1_Init+0x50>)
 8005112:	4a13      	ldr	r2, [pc, #76]	; (8005160 <MX_I2C1_Init+0x54>)
 8005114:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005116:	4b11      	ldr	r3, [pc, #68]	; (800515c <MX_I2C1_Init+0x50>)
 8005118:	4a12      	ldr	r2, [pc, #72]	; (8005164 <MX_I2C1_Init+0x58>)
 800511a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800511c:	4b0f      	ldr	r3, [pc, #60]	; (800515c <MX_I2C1_Init+0x50>)
 800511e:	2200      	movs	r2, #0
 8005120:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005122:	4b0e      	ldr	r3, [pc, #56]	; (800515c <MX_I2C1_Init+0x50>)
 8005124:	2200      	movs	r2, #0
 8005126:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005128:	4b0c      	ldr	r3, [pc, #48]	; (800515c <MX_I2C1_Init+0x50>)
 800512a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800512e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005130:	4b0a      	ldr	r3, [pc, #40]	; (800515c <MX_I2C1_Init+0x50>)
 8005132:	2200      	movs	r2, #0
 8005134:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005136:	4b09      	ldr	r3, [pc, #36]	; (800515c <MX_I2C1_Init+0x50>)
 8005138:	2200      	movs	r2, #0
 800513a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800513c:	4b07      	ldr	r3, [pc, #28]	; (800515c <MX_I2C1_Init+0x50>)
 800513e:	2200      	movs	r2, #0
 8005140:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005142:	4b06      	ldr	r3, [pc, #24]	; (800515c <MX_I2C1_Init+0x50>)
 8005144:	2200      	movs	r2, #0
 8005146:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005148:	4804      	ldr	r0, [pc, #16]	; (800515c <MX_I2C1_Init+0x50>)
 800514a:	f7fd fb83 	bl	8002854 <HAL_I2C_Init>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005154:	f000 fa8c 	bl	8005670 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005158:	bf00      	nop
 800515a:	bd80      	pop	{r7, pc}
 800515c:	2000029c 	.word	0x2000029c
 8005160:	40005400 	.word	0x40005400
 8005164:	000186a0 	.word	0x000186a0

08005168 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b08e      	sub	sp, #56	; 0x38
 800516c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
//
  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800516e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005172:	2200      	movs	r2, #0
 8005174:	601a      	str	r2, [r3, #0]
 8005176:	605a      	str	r2, [r3, #4]
 8005178:	609a      	str	r2, [r3, #8]
 800517a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800517c:	f107 0320 	add.w	r3, r7, #32
 8005180:	2200      	movs	r2, #0
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005186:	1d3b      	adds	r3, r7, #4
 8005188:	2200      	movs	r2, #0
 800518a:	601a      	str	r2, [r3, #0]
 800518c:	605a      	str	r2, [r3, #4]
 800518e:	609a      	str	r2, [r3, #8]
 8005190:	60da      	str	r2, [r3, #12]
 8005192:	611a      	str	r2, [r3, #16]
 8005194:	615a      	str	r2, [r3, #20]
 8005196:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */
//
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005198:	4b2d      	ldr	r3, [pc, #180]	; (8005250 <MX_TIM2_Init+0xe8>)
 800519a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800519e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80051a0:	4b2b      	ldr	r3, [pc, #172]	; (8005250 <MX_TIM2_Init+0xe8>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051a6:	4b2a      	ldr	r3, [pc, #168]	; (8005250 <MX_TIM2_Init+0xe8>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80051ac:	4b28      	ldr	r3, [pc, #160]	; (8005250 <MX_TIM2_Init+0xe8>)
 80051ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051b4:	4b26      	ldr	r3, [pc, #152]	; (8005250 <MX_TIM2_Init+0xe8>)
 80051b6:	2200      	movs	r2, #0
 80051b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80051ba:	4b25      	ldr	r3, [pc, #148]	; (8005250 <MX_TIM2_Init+0xe8>)
 80051bc:	2200      	movs	r2, #0
 80051be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80051c0:	4823      	ldr	r0, [pc, #140]	; (8005250 <MX_TIM2_Init+0xe8>)
 80051c2:	f7fe ff35 	bl	8004030 <HAL_TIM_Base_Init>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d001      	beq.n	80051d0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80051cc:	f000 fa50 	bl	8005670 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80051d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051d4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80051d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051da:	4619      	mov	r1, r3
 80051dc:	481c      	ldr	r0, [pc, #112]	; (8005250 <MX_TIM2_Init+0xe8>)
 80051de:	f7ff f88b 	bl	80042f8 <HAL_TIM_ConfigClockSource>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d001      	beq.n	80051ec <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80051e8:	f000 fa42 	bl	8005670 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80051ec:	4818      	ldr	r0, [pc, #96]	; (8005250 <MX_TIM2_Init+0xe8>)
 80051ee:	f7fe ff4a 	bl	8004086 <HAL_TIM_PWM_Init>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d001      	beq.n	80051fc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80051f8:	f000 fa3a 	bl	8005670 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80051fc:	2300      	movs	r3, #0
 80051fe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005200:	2300      	movs	r3, #0
 8005202:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005204:	f107 0320 	add.w	r3, r7, #32
 8005208:	4619      	mov	r1, r3
 800520a:	4811      	ldr	r0, [pc, #68]	; (8005250 <MX_TIM2_Init+0xe8>)
 800520c:	f7ff fc48 	bl	8004aa0 <HAL_TIMEx_MasterConfigSynchronization>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8005216:	f000 fa2b 	bl	8005670 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800521a:	2360      	movs	r3, #96	; 0x60
 800521c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800521e:	2300      	movs	r3, #0
 8005220:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005222:	2300      	movs	r3, #0
 8005224:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005226:	2300      	movs	r3, #0
 8005228:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800522a:	1d3b      	adds	r3, r7, #4
 800522c:	2200      	movs	r2, #0
 800522e:	4619      	mov	r1, r3
 8005230:	4807      	ldr	r0, [pc, #28]	; (8005250 <MX_TIM2_Init+0xe8>)
 8005232:	f7fe ff9b 	bl	800416c <HAL_TIM_PWM_ConfigChannel>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d001      	beq.n	8005240 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800523c:	f000 fa18 	bl	8005670 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
//
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8005240:	4803      	ldr	r0, [pc, #12]	; (8005250 <MX_TIM2_Init+0xe8>)
 8005242:	f000 fb71 	bl	8005928 <HAL_TIM_MspPostInit>

}
 8005246:	bf00      	nop
 8005248:	3738      	adds	r7, #56	; 0x38
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	2000034c 	.word	0x2000034c

08005254 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b086      	sub	sp, #24
 8005258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800525a:	f107 0308 	add.w	r3, r7, #8
 800525e:	2200      	movs	r2, #0
 8005260:	601a      	str	r2, [r3, #0]
 8005262:	605a      	str	r2, [r3, #4]
 8005264:	609a      	str	r2, [r3, #8]
 8005266:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005268:	463b      	mov	r3, r7
 800526a:	2200      	movs	r2, #0
 800526c:	601a      	str	r2, [r3, #0]
 800526e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005270:	4b1c      	ldr	r3, [pc, #112]	; (80052e4 <MX_TIM4_Init+0x90>)
 8005272:	4a1d      	ldr	r2, [pc, #116]	; (80052e8 <MX_TIM4_Init+0x94>)
 8005274:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 168-1;
 8005276:	4b1b      	ldr	r3, [pc, #108]	; (80052e4 <MX_TIM4_Init+0x90>)
 8005278:	22a7      	movs	r2, #167	; 0xa7
 800527a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800527c:	4b19      	ldr	r3, [pc, #100]	; (80052e4 <MX_TIM4_Init+0x90>)
 800527e:	2200      	movs	r2, #0
 8005280:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8005282:	4b18      	ldr	r3, [pc, #96]	; (80052e4 <MX_TIM4_Init+0x90>)
 8005284:	2200      	movs	r2, #0
 8005286:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005288:	4b16      	ldr	r3, [pc, #88]	; (80052e4 <MX_TIM4_Init+0x90>)
 800528a:	2200      	movs	r2, #0
 800528c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800528e:	4b15      	ldr	r3, [pc, #84]	; (80052e4 <MX_TIM4_Init+0x90>)
 8005290:	2200      	movs	r2, #0
 8005292:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005294:	4813      	ldr	r0, [pc, #76]	; (80052e4 <MX_TIM4_Init+0x90>)
 8005296:	f7fe fecb 	bl	8004030 <HAL_TIM_Base_Init>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d001      	beq.n	80052a4 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 80052a0:	f000 f9e6 	bl	8005670 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80052a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80052aa:	f107 0308 	add.w	r3, r7, #8
 80052ae:	4619      	mov	r1, r3
 80052b0:	480c      	ldr	r0, [pc, #48]	; (80052e4 <MX_TIM4_Init+0x90>)
 80052b2:	f7ff f821 	bl	80042f8 <HAL_TIM_ConfigClockSource>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d001      	beq.n	80052c0 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 80052bc:	f000 f9d8 	bl	8005670 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80052c0:	2300      	movs	r3, #0
 80052c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80052c4:	2300      	movs	r3, #0
 80052c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80052c8:	463b      	mov	r3, r7
 80052ca:	4619      	mov	r1, r3
 80052cc:	4805      	ldr	r0, [pc, #20]	; (80052e4 <MX_TIM4_Init+0x90>)
 80052ce:	f7ff fbe7 	bl	8004aa0 <HAL_TIMEx_MasterConfigSynchronization>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d001      	beq.n	80052dc <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 80052d8:	f000 f9ca 	bl	8005670 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80052dc:	bf00      	nop
 80052de:	3718      	adds	r7, #24
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	2000025c 	.word	0x2000025c
 80052e8:	40000800 	.word	0x40000800

080052ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b08a      	sub	sp, #40	; 0x28
 80052f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052f2:	f107 0314 	add.w	r3, r7, #20
 80052f6:	2200      	movs	r2, #0
 80052f8:	601a      	str	r2, [r3, #0]
 80052fa:	605a      	str	r2, [r3, #4]
 80052fc:	609a      	str	r2, [r3, #8]
 80052fe:	60da      	str	r2, [r3, #12]
 8005300:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005302:	2300      	movs	r3, #0
 8005304:	613b      	str	r3, [r7, #16]
 8005306:	4b41      	ldr	r3, [pc, #260]	; (800540c <MX_GPIO_Init+0x120>)
 8005308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530a:	4a40      	ldr	r2, [pc, #256]	; (800540c <MX_GPIO_Init+0x120>)
 800530c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005310:	6313      	str	r3, [r2, #48]	; 0x30
 8005312:	4b3e      	ldr	r3, [pc, #248]	; (800540c <MX_GPIO_Init+0x120>)
 8005314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800531a:	613b      	str	r3, [r7, #16]
 800531c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800531e:	2300      	movs	r3, #0
 8005320:	60fb      	str	r3, [r7, #12]
 8005322:	4b3a      	ldr	r3, [pc, #232]	; (800540c <MX_GPIO_Init+0x120>)
 8005324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005326:	4a39      	ldr	r2, [pc, #228]	; (800540c <MX_GPIO_Init+0x120>)
 8005328:	f043 0301 	orr.w	r3, r3, #1
 800532c:	6313      	str	r3, [r2, #48]	; 0x30
 800532e:	4b37      	ldr	r3, [pc, #220]	; (800540c <MX_GPIO_Init+0x120>)
 8005330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	60fb      	str	r3, [r7, #12]
 8005338:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800533a:	2300      	movs	r3, #0
 800533c:	60bb      	str	r3, [r7, #8]
 800533e:	4b33      	ldr	r3, [pc, #204]	; (800540c <MX_GPIO_Init+0x120>)
 8005340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005342:	4a32      	ldr	r2, [pc, #200]	; (800540c <MX_GPIO_Init+0x120>)
 8005344:	f043 0302 	orr.w	r3, r3, #2
 8005348:	6313      	str	r3, [r2, #48]	; 0x30
 800534a:	4b30      	ldr	r3, [pc, #192]	; (800540c <MX_GPIO_Init+0x120>)
 800534c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	60bb      	str	r3, [r7, #8]
 8005354:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005356:	2300      	movs	r3, #0
 8005358:	607b      	str	r3, [r7, #4]
 800535a:	4b2c      	ldr	r3, [pc, #176]	; (800540c <MX_GPIO_Init+0x120>)
 800535c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535e:	4a2b      	ldr	r2, [pc, #172]	; (800540c <MX_GPIO_Init+0x120>)
 8005360:	f043 0308 	orr.w	r3, r3, #8
 8005364:	6313      	str	r3, [r2, #48]	; 0x30
 8005366:	4b29      	ldr	r3, [pc, #164]	; (800540c <MX_GPIO_Init+0x120>)
 8005368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536a:	f003 0308 	and.w	r3, r3, #8
 800536e:	607b      	str	r3, [r7, #4]
 8005370:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8005372:	2200      	movs	r2, #0
 8005374:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005378:	4825      	ldr	r0, [pc, #148]	; (8005410 <MX_GPIO_Init+0x124>)
 800537a:	f7fd fa51 	bl	8002820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, D0_Pin|D1_Pin|D2_Pin|D3_Pin
 800537e:	2200      	movs	r2, #0
 8005380:	21ff      	movs	r1, #255	; 0xff
 8005382:	4824      	ldr	r0, [pc, #144]	; (8005414 <MX_GPIO_Init+0x128>)
 8005384:	f7fd fa4c 	bl	8002820 <HAL_GPIO_WritePin>
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS_Pin|E_Pin, GPIO_PIN_RESET);
 8005388:	2200      	movs	r2, #0
 800538a:	2118      	movs	r1, #24
 800538c:	4822      	ldr	r0, [pc, #136]	; (8005418 <MX_GPIO_Init+0x12c>)
 800538e:	f7fd fa47 	bl	8002820 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Button_Pin ECHO_Pin */
  GPIO_InitStruct.Pin = Button_Pin|ECHO_Pin;
 8005392:	f240 2301 	movw	r3, #513	; 0x201
 8005396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005398:	2300      	movs	r3, #0
 800539a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800539c:	2300      	movs	r3, #0
 800539e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053a0:	f107 0314 	add.w	r3, r7, #20
 80053a4:	4619      	mov	r1, r3
 80053a6:	481a      	ldr	r0, [pc, #104]	; (8005410 <MX_GPIO_Init+0x124>)
 80053a8:	f7fd f886 	bl	80024b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 80053ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80053b2:	2301      	movs	r3, #1
 80053b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053b6:	2300      	movs	r3, #0
 80053b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053ba:	2300      	movs	r3, #0
 80053bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 80053be:	f107 0314 	add.w	r3, r7, #20
 80053c2:	4619      	mov	r1, r3
 80053c4:	4812      	ldr	r0, [pc, #72]	; (8005410 <MX_GPIO_Init+0x124>)
 80053c6:	f7fd f877 	bl	80024b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin D5_Pin D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 80053ca:	23ff      	movs	r3, #255	; 0xff
 80053cc:	617b      	str	r3, [r7, #20]
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80053ce:	2301      	movs	r3, #1
 80053d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053d2:	2300      	movs	r3, #0
 80053d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053d6:	2300      	movs	r3, #0
 80053d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80053da:	f107 0314 	add.w	r3, r7, #20
 80053de:	4619      	mov	r1, r3
 80053e0:	480c      	ldr	r0, [pc, #48]	; (8005414 <MX_GPIO_Init+0x128>)
 80053e2:	f7fd f869 	bl	80024b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin E_Pin */
  GPIO_InitStruct.Pin = RS_Pin|E_Pin;
 80053e6:	2318      	movs	r3, #24
 80053e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80053ea:	2301      	movs	r3, #1
 80053ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ee:	2300      	movs	r3, #0
 80053f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053f2:	2300      	movs	r3, #0
 80053f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053f6:	f107 0314 	add.w	r3, r7, #20
 80053fa:	4619      	mov	r1, r3
 80053fc:	4806      	ldr	r0, [pc, #24]	; (8005418 <MX_GPIO_Init+0x12c>)
 80053fe:	f7fd f85b 	bl	80024b8 <HAL_GPIO_Init>

}
 8005402:	bf00      	nop
 8005404:	3728      	adds	r7, #40	; 0x28
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	40023800 	.word	0x40023800
 8005410:	40020000 	.word	0x40020000
 8005414:	40020c00 	.word	0x40020c00
 8005418:	40020400 	.word	0x40020400

0800541c <ReadTemp>:

/* USER CODE BEGIN 4 */

uint16_t ReadTemp(void)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af02      	add	r7, sp, #8
	volatile uint16_t Temp_reading[2];
	volatile uint16_t Temp_C;
    volatile uint16_t Temp_C_median;

		  Temp_reading[0] = 0x00;
 8005422:	2300      	movs	r3, #0
 8005424:	80bb      	strh	r3, [r7, #4]
		  ret = HAL_I2C_Master_Transmit(&hi2c1, TC74_ADDER, Temp_reading, 1, 1000);
 8005426:	2190      	movs	r1, #144	; 0x90
 8005428:	1d3a      	adds	r2, r7, #4
 800542a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800542e:	9300      	str	r3, [sp, #0]
 8005430:	2301      	movs	r3, #1
 8005432:	4819      	ldr	r0, [pc, #100]	; (8005498 <ReadTemp+0x7c>)
 8005434:	f7fd fb52 	bl	8002adc <HAL_I2C_Master_Transmit>
 8005438:	4603      	mov	r3, r0
 800543a:	461a      	mov	r2, r3
 800543c:	4b17      	ldr	r3, [pc, #92]	; (800549c <ReadTemp+0x80>)
 800543e:	701a      	strb	r2, [r3, #0]
		  if(ret != HAL_OK)
 8005440:	4b16      	ldr	r3, [pc, #88]	; (800549c <ReadTemp+0x80>)
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d002      	beq.n	800544e <ReadTemp+0x32>
		  {
			  Error_Handler();
 8005448:	f000 f912 	bl	8005670 <Error_Handler>
 800544c:	e01d      	b.n	800548a <ReadTemp+0x6e>
		  }
		  else
		  {
			  ret = HAL_I2C_Master_Receive(&hi2c1, TC74_ADDER, Temp_reading, 1, 1000);
 800544e:	2190      	movs	r1, #144	; 0x90
 8005450:	1d3a      	adds	r2, r7, #4
 8005452:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005456:	9300      	str	r3, [sp, #0]
 8005458:	2301      	movs	r3, #1
 800545a:	480f      	ldr	r0, [pc, #60]	; (8005498 <ReadTemp+0x7c>)
 800545c:	f7fd fc3c 	bl	8002cd8 <HAL_I2C_Master_Receive>
 8005460:	4603      	mov	r3, r0
 8005462:	461a      	mov	r2, r3
 8005464:	4b0d      	ldr	r3, [pc, #52]	; (800549c <ReadTemp+0x80>)
 8005466:	701a      	strb	r2, [r3, #0]
			  if(ret != HAL_OK)
 8005468:	4b0c      	ldr	r3, [pc, #48]	; (800549c <ReadTemp+0x80>)
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d002      	beq.n	8005476 <ReadTemp+0x5a>
			  {
				  Error_Handler();
 8005470:	f000 f8fe 	bl	8005670 <Error_Handler>
 8005474:	e002      	b.n	800547c <ReadTemp+0x60>
			  }
			  else
			  {
				  Temp_C = Temp_reading[0];
 8005476:	88bb      	ldrh	r3, [r7, #4]
 8005478:	b29b      	uxth	r3, r3
 800547a:	807b      	strh	r3, [r7, #2]
			  }

			  Temp_C_median = temperature_median(Temp_C);
 800547c:	887b      	ldrh	r3, [r7, #2]
 800547e:	b29b      	uxth	r3, r3
 8005480:	4618      	mov	r0, r3
 8005482:	f000 fc22 	bl	8005cca <temperature_median>
 8005486:	4603      	mov	r3, r0
 8005488:	803b      	strh	r3, [r7, #0]
		  }

    return(Temp_C_median);
 800548a:	883b      	ldrh	r3, [r7, #0]
 800548c:	b29b      	uxth	r3, r3
}
 800548e:	4618      	mov	r0, r3
 8005490:	3708      	adds	r7, #8
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	2000029c 	.word	0x2000029c
 800549c:	200003e8 	.word	0x200003e8

080054a0 <readdistance>:
}


/***** Start ultrasound *****/
float readdistance(void)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
	const float speedOfSound = 0.0343/2;
 80054a6:	4b2d      	ldr	r3, [pc, #180]	; (800555c <readdistance+0xbc>)
 80054a8:	60bb      	str	r3, [r7, #8]
	uint32_t numTicks = 0;
 80054aa:	2300      	movs	r3, #0
 80054ac:	60fb      	str	r3, [r7, #12]
	uint16_t distance = 0;
 80054ae:	2300      	movs	r3, #0
 80054b0:	80fb      	strh	r3, [r7, #6]
	float filtered_distance;

	//Set TRIG to LOW for few uSec
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 80054b2:	2200      	movs	r2, #0
 80054b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054b8:	4829      	ldr	r0, [pc, #164]	; (8005560 <readdistance+0xc0>)
 80054ba:	f7fd f9b1 	bl	8002820 <HAL_GPIO_WritePin>
	Delay_us(3);
 80054be:	2003      	movs	r0, #3
 80054c0:	f000 f852 	bl	8005568 <Delay_us>

	//*** START Ultrasonic measure routine ***//
	//Output 10 usec TRIG
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 80054c4:	2201      	movs	r2, #1
 80054c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054ca:	4825      	ldr	r0, [pc, #148]	; (8005560 <readdistance+0xc0>)
 80054cc:	f7fd f9a8 	bl	8002820 <HAL_GPIO_WritePin>
	Delay_us(10);
 80054d0:	200a      	movs	r0, #10
 80054d2:	f000 f849 	bl	8005568 <Delay_us>
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 80054d6:	2200      	movs	r2, #0
 80054d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054dc:	4820      	ldr	r0, [pc, #128]	; (8005560 <readdistance+0xc0>)
 80054de:	f7fd f99f 	bl	8002820 <HAL_GPIO_WritePin>

	//Wait for ECHO pin rising edge
	while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_RESET);
 80054e2:	bf00      	nop
 80054e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80054e8:	481d      	ldr	r0, [pc, #116]	; (8005560 <readdistance+0xc0>)
 80054ea:	f7fd f981 	bl	80027f0 <HAL_GPIO_ReadPin>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d0f7      	beq.n	80054e4 <readdistance+0x44>

	//Start measuring ECHO pulse width in usec
	numTicks = 0;
 80054f4:	2300      	movs	r3, #0
 80054f6:	60fb      	str	r3, [r7, #12]
	while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET)
 80054f8:	e002      	b.n	8005500 <readdistance+0x60>
	{
		numTicks++;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	3301      	adds	r3, #1
 80054fe:	60fb      	str	r3, [r7, #12]
	while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET)
 8005500:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005504:	4816      	ldr	r0, [pc, #88]	; (8005560 <readdistance+0xc0>)
 8005506:	f7fd f973 	bl	80027f0 <HAL_GPIO_ReadPin>
 800550a:	4603      	mov	r3, r0
 800550c:	2b01      	cmp	r3, #1
 800550e:	d0f4      	beq.n	80054fa <readdistance+0x5a>
	    //Delay_us(2); //2.8usec
	};

	//Estimate distance in cm
	distance = (numTicks + 0.0f) * speedOfSound;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	ee07 3a90 	vmov	s15, r3
 8005516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800551a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8005564 <readdistance+0xc4>
 800551e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005522:	edd7 7a02 	vldr	s15, [r7, #8]
 8005526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800552a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800552e:	ee17 3a90 	vmov	r3, s15
 8005532:	80fb      	strh	r3, [r7, #6]

	filtered_distance = ultrasonic_median(distance);
 8005534:	88fb      	ldrh	r3, [r7, #6]
 8005536:	4618      	mov	r0, r3
 8005538:	f000 fcb6 	bl	8005ea8 <ultrasonic_median>
 800553c:	4603      	mov	r3, r0
 800553e:	ee07 3a90 	vmov	s15, r3
 8005542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005546:	edc7 7a00 	vstr	s15, [r7]

	return(filtered_distance);
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	ee07 3a90 	vmov	s15, r3
}
 8005550:	eeb0 0a67 	vmov.f32	s0, s15
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	3c8c7e28 	.word	0x3c8c7e28
 8005560:	40020000 	.word	0x40020000
 8005564:	00000000 	.word	0x00000000

08005568 <Delay_us>:

void Delay_us(uint32_t delay)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
	if(delay < 2) delay = 2;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d801      	bhi.n	800557a <Delay_us+0x12>
 8005576:	2302      	movs	r3, #2
 8005578:	607b      	str	r3, [r7, #4]
	usTIM->ARR = delay - 1; 	/*sets the value in the auto-reload register*/
 800557a:	4a13      	ldr	r2, [pc, #76]	; (80055c8 <Delay_us+0x60>)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	3b01      	subs	r3, #1
 8005580:	62d3      	str	r3, [r2, #44]	; 0x2c
	usTIM->EGR = 1; 			/*Re-initialises the timer*/
 8005582:	4b11      	ldr	r3, [pc, #68]	; (80055c8 <Delay_us+0x60>)
 8005584:	2201      	movs	r2, #1
 8005586:	615a      	str	r2, [r3, #20]
	usTIM->SR &= ~1; 		//Resets the flag
 8005588:	4b0f      	ldr	r3, [pc, #60]	; (80055c8 <Delay_us+0x60>)
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	4a0e      	ldr	r2, [pc, #56]	; (80055c8 <Delay_us+0x60>)
 800558e:	f023 0301 	bic.w	r3, r3, #1
 8005592:	6113      	str	r3, [r2, #16]
	usTIM->CR1 |= 1; 		//Enables the counter
 8005594:	4b0c      	ldr	r3, [pc, #48]	; (80055c8 <Delay_us+0x60>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a0b      	ldr	r2, [pc, #44]	; (80055c8 <Delay_us+0x60>)
 800559a:	f043 0301 	orr.w	r3, r3, #1
 800559e:	6013      	str	r3, [r2, #0]
	while((usTIM->SR&0x0001) != 1);
 80055a0:	bf00      	nop
 80055a2:	4b09      	ldr	r3, [pc, #36]	; (80055c8 <Delay_us+0x60>)
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d1f9      	bne.n	80055a2 <Delay_us+0x3a>
	usTIM->SR &= ~(0x0001);
 80055ae:	4b06      	ldr	r3, [pc, #24]	; (80055c8 <Delay_us+0x60>)
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	4a05      	ldr	r2, [pc, #20]	; (80055c8 <Delay_us+0x60>)
 80055b4:	f023 0301 	bic.w	r3, r3, #1
 80055b8:	6113      	str	r3, [r2, #16]
}
 80055ba:	bf00      	nop
 80055bc:	370c      	adds	r7, #12
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	40000800 	.word	0x40000800
 80055cc:	00000000 	.word	0x00000000

080055d0 <pressure>:

float pressure(void)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
	uint16_t ADC_reading;
	uint16_t val;
	float pkPa;
	 // Start ADC Conversion
	    HAL_ADC_Start(&hadc1);
 80055d6:	4824      	ldr	r0, [pc, #144]	; (8005668 <pressure+0x98>)
 80055d8:	f7fb fd8c 	bl	80010f4 <HAL_ADC_Start>
     // Poll ADC1 Perihperal & TimeOut = 1mSec
		HAL_ADC_PollForConversion(&hadc1, 1);
 80055dc:	2101      	movs	r1, #1
 80055de:	4822      	ldr	r0, [pc, #136]	; (8005668 <pressure+0x98>)
 80055e0:	f7fb fe4e 	bl	8001280 <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result & Map It To PWM DutyCycle
		ADC_reading = HAL_ADC_GetValue(&hadc1);
 80055e4:	4820      	ldr	r0, [pc, #128]	; (8005668 <pressure+0x98>)
 80055e6:	f7fb fecf 	bl	8001388 <HAL_ADC_GetValue>
 80055ea:	4603      	mov	r3, r0
 80055ec:	80fb      	strh	r3, [r7, #6]
		HAL_Delay(1);
 80055ee:	2001      	movs	r0, #1
 80055f0:	f7fb fd18 	bl	8001024 <HAL_Delay>

		val = Pressure_median(ADC_reading);
 80055f4:	88fb      	ldrh	r3, [r7, #6]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f7ff fb61 	bl	8004cbe <Pressure_median>
 80055fc:	4603      	mov	r3, r0
 80055fe:	80bb      	strh	r3, [r7, #4]

		pkPa = ((float)val/(float)1023+0.095)/0.009;
 8005600:	88bb      	ldrh	r3, [r7, #4]
 8005602:	ee07 3a90 	vmov	s15, r3
 8005606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800560a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800566c <pressure+0x9c>
 800560e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005612:	ee16 0a90 	vmov	r0, s13
 8005616:	f7fa ff97 	bl	8000548 <__aeabi_f2d>
 800561a:	a30f      	add	r3, pc, #60	; (adr r3, 8005658 <pressure+0x88>)
 800561c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005620:	f7fa fe34 	bl	800028c <__adddf3>
 8005624:	4602      	mov	r2, r0
 8005626:	460b      	mov	r3, r1
 8005628:	4610      	mov	r0, r2
 800562a:	4619      	mov	r1, r3
 800562c:	a30c      	add	r3, pc, #48	; (adr r3, 8005660 <pressure+0x90>)
 800562e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005632:	f7fb f90b 	bl	800084c <__aeabi_ddiv>
 8005636:	4602      	mov	r2, r0
 8005638:	460b      	mov	r3, r1
 800563a:	4610      	mov	r0, r2
 800563c:	4619      	mov	r1, r3
 800563e:	f7fb fab3 	bl	8000ba8 <__aeabi_d2f>
 8005642:	4603      	mov	r3, r0
 8005644:	603b      	str	r3, [r7, #0]


		return(pkPa);
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	ee07 3a90 	vmov	s15, r3
}
 800564c:	eeb0 0a67 	vmov.f32	s0, s15
 8005650:	3708      	adds	r7, #8
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	851eb852 	.word	0x851eb852
 800565c:	3fb851eb 	.word	0x3fb851eb
 8005660:	8d4fdf3b 	.word	0x8d4fdf3b
 8005664:	3f826e97 	.word	0x3f826e97
 8005668:	200002f0 	.word	0x200002f0
 800566c:	447fc000 	.word	0x447fc000

08005670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005670:	b480      	push	{r7}
 8005672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005674:	b672      	cpsid	i
}
 8005676:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005678:	e7fe      	b.n	8005678 <Error_Handler+0x8>
	...

0800567c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005682:	2300      	movs	r3, #0
 8005684:	607b      	str	r3, [r7, #4]
 8005686:	4b10      	ldr	r3, [pc, #64]	; (80056c8 <HAL_MspInit+0x4c>)
 8005688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800568a:	4a0f      	ldr	r2, [pc, #60]	; (80056c8 <HAL_MspInit+0x4c>)
 800568c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005690:	6453      	str	r3, [r2, #68]	; 0x44
 8005692:	4b0d      	ldr	r3, [pc, #52]	; (80056c8 <HAL_MspInit+0x4c>)
 8005694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800569a:	607b      	str	r3, [r7, #4]
 800569c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800569e:	2300      	movs	r3, #0
 80056a0:	603b      	str	r3, [r7, #0]
 80056a2:	4b09      	ldr	r3, [pc, #36]	; (80056c8 <HAL_MspInit+0x4c>)
 80056a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a6:	4a08      	ldr	r2, [pc, #32]	; (80056c8 <HAL_MspInit+0x4c>)
 80056a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056ac:	6413      	str	r3, [r2, #64]	; 0x40
 80056ae:	4b06      	ldr	r3, [pc, #24]	; (80056c8 <HAL_MspInit+0x4c>)
 80056b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056b6:	603b      	str	r3, [r7, #0]
 80056b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80056ba:	2007      	movs	r0, #7
 80056bc:	f7fc feba 	bl	8002434 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80056c0:	bf00      	nop
 80056c2:	3708      	adds	r7, #8
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	40023800 	.word	0x40023800

080056cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b08a      	sub	sp, #40	; 0x28
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056d4:	f107 0314 	add.w	r3, r7, #20
 80056d8:	2200      	movs	r2, #0
 80056da:	601a      	str	r2, [r3, #0]
 80056dc:	605a      	str	r2, [r3, #4]
 80056de:	609a      	str	r2, [r3, #8]
 80056e0:	60da      	str	r2, [r3, #12]
 80056e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a24      	ldr	r2, [pc, #144]	; (800577c <HAL_ADC_MspInit+0xb0>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d141      	bne.n	8005772 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80056ee:	2300      	movs	r3, #0
 80056f0:	613b      	str	r3, [r7, #16]
 80056f2:	4b23      	ldr	r3, [pc, #140]	; (8005780 <HAL_ADC_MspInit+0xb4>)
 80056f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f6:	4a22      	ldr	r2, [pc, #136]	; (8005780 <HAL_ADC_MspInit+0xb4>)
 80056f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056fc:	6453      	str	r3, [r2, #68]	; 0x44
 80056fe:	4b20      	ldr	r3, [pc, #128]	; (8005780 <HAL_ADC_MspInit+0xb4>)
 8005700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005706:	613b      	str	r3, [r7, #16]
 8005708:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800570a:	2300      	movs	r3, #0
 800570c:	60fb      	str	r3, [r7, #12]
 800570e:	4b1c      	ldr	r3, [pc, #112]	; (8005780 <HAL_ADC_MspInit+0xb4>)
 8005710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005712:	4a1b      	ldr	r2, [pc, #108]	; (8005780 <HAL_ADC_MspInit+0xb4>)
 8005714:	f043 0301 	orr.w	r3, r3, #1
 8005718:	6313      	str	r3, [r2, #48]	; 0x30
 800571a:	4b19      	ldr	r3, [pc, #100]	; (8005780 <HAL_ADC_MspInit+0xb4>)
 800571c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	60fb      	str	r3, [r7, #12]
 8005724:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005726:	2300      	movs	r3, #0
 8005728:	60bb      	str	r3, [r7, #8]
 800572a:	4b15      	ldr	r3, [pc, #84]	; (8005780 <HAL_ADC_MspInit+0xb4>)
 800572c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572e:	4a14      	ldr	r2, [pc, #80]	; (8005780 <HAL_ADC_MspInit+0xb4>)
 8005730:	f043 0302 	orr.w	r3, r3, #2
 8005734:	6313      	str	r3, [r2, #48]	; 0x30
 8005736:	4b12      	ldr	r3, [pc, #72]	; (8005780 <HAL_ADC_MspInit+0xb4>)
 8005738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573a:	f003 0302 	and.w	r3, r3, #2
 800573e:	60bb      	str	r3, [r7, #8]
 8005740:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005742:	2310      	movs	r3, #16
 8005744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005746:	2303      	movs	r3, #3
 8005748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800574a:	2300      	movs	r3, #0
 800574c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800574e:	f107 0314 	add.w	r3, r7, #20
 8005752:	4619      	mov	r1, r3
 8005754:	480b      	ldr	r0, [pc, #44]	; (8005784 <HAL_ADC_MspInit+0xb8>)
 8005756:	f7fc feaf 	bl	80024b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Pressure_Pin;
 800575a:	2301      	movs	r3, #1
 800575c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800575e:	2303      	movs	r3, #3
 8005760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005762:	2300      	movs	r3, #0
 8005764:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Pressure_GPIO_Port, &GPIO_InitStruct);
 8005766:	f107 0314 	add.w	r3, r7, #20
 800576a:	4619      	mov	r1, r3
 800576c:	4806      	ldr	r0, [pc, #24]	; (8005788 <HAL_ADC_MspInit+0xbc>)
 800576e:	f7fc fea3 	bl	80024b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005772:	bf00      	nop
 8005774:	3728      	adds	r7, #40	; 0x28
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	40012000 	.word	0x40012000
 8005780:	40023800 	.word	0x40023800
 8005784:	40020000 	.word	0x40020000
 8005788:	40020400 	.word	0x40020400

0800578c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b08a      	sub	sp, #40	; 0x28
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005794:	f107 0314 	add.w	r3, r7, #20
 8005798:	2200      	movs	r2, #0
 800579a:	601a      	str	r2, [r3, #0]
 800579c:	605a      	str	r2, [r3, #4]
 800579e:	609a      	str	r2, [r3, #8]
 80057a0:	60da      	str	r2, [r3, #12]
 80057a2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a1d      	ldr	r2, [pc, #116]	; (8005820 <HAL_CAN_MspInit+0x94>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d134      	bne.n	8005818 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80057ae:	2300      	movs	r3, #0
 80057b0:	613b      	str	r3, [r7, #16]
 80057b2:	4b1c      	ldr	r3, [pc, #112]	; (8005824 <HAL_CAN_MspInit+0x98>)
 80057b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b6:	4a1b      	ldr	r2, [pc, #108]	; (8005824 <HAL_CAN_MspInit+0x98>)
 80057b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80057bc:	6413      	str	r3, [r2, #64]	; 0x40
 80057be:	4b19      	ldr	r3, [pc, #100]	; (8005824 <HAL_CAN_MspInit+0x98>)
 80057c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057c6:	613b      	str	r3, [r7, #16]
 80057c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057ca:	2300      	movs	r3, #0
 80057cc:	60fb      	str	r3, [r7, #12]
 80057ce:	4b15      	ldr	r3, [pc, #84]	; (8005824 <HAL_CAN_MspInit+0x98>)
 80057d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d2:	4a14      	ldr	r2, [pc, #80]	; (8005824 <HAL_CAN_MspInit+0x98>)
 80057d4:	f043 0302 	orr.w	r3, r3, #2
 80057d8:	6313      	str	r3, [r2, #48]	; 0x30
 80057da:	4b12      	ldr	r3, [pc, #72]	; (8005824 <HAL_CAN_MspInit+0x98>)
 80057dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057de:	f003 0302 	and.w	r3, r3, #2
 80057e2:	60fb      	str	r3, [r7, #12]
 80057e4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80057e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80057ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057ec:	2302      	movs	r3, #2
 80057ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057f0:	2300      	movs	r3, #0
 80057f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057f4:	2303      	movs	r3, #3
 80057f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80057f8:	2309      	movs	r3, #9
 80057fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057fc:	f107 0314 	add.w	r3, r7, #20
 8005800:	4619      	mov	r1, r3
 8005802:	4809      	ldr	r0, [pc, #36]	; (8005828 <HAL_CAN_MspInit+0x9c>)
 8005804:	f7fc fe58 	bl	80024b8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8005808:	2200      	movs	r2, #0
 800580a:	2100      	movs	r1, #0
 800580c:	2014      	movs	r0, #20
 800580e:	f7fc fe1c 	bl	800244a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8005812:	2014      	movs	r0, #20
 8005814:	f7fc fe35 	bl	8002482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8005818:	bf00      	nop
 800581a:	3728      	adds	r7, #40	; 0x28
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	40006400 	.word	0x40006400
 8005824:	40023800 	.word	0x40023800
 8005828:	40020400 	.word	0x40020400

0800582c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b08a      	sub	sp, #40	; 0x28
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005834:	f107 0314 	add.w	r3, r7, #20
 8005838:	2200      	movs	r2, #0
 800583a:	601a      	str	r2, [r3, #0]
 800583c:	605a      	str	r2, [r3, #4]
 800583e:	609a      	str	r2, [r3, #8]
 8005840:	60da      	str	r2, [r3, #12]
 8005842:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a19      	ldr	r2, [pc, #100]	; (80058b0 <HAL_I2C_MspInit+0x84>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d12b      	bne.n	80058a6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800584e:	2300      	movs	r3, #0
 8005850:	613b      	str	r3, [r7, #16]
 8005852:	4b18      	ldr	r3, [pc, #96]	; (80058b4 <HAL_I2C_MspInit+0x88>)
 8005854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005856:	4a17      	ldr	r2, [pc, #92]	; (80058b4 <HAL_I2C_MspInit+0x88>)
 8005858:	f043 0302 	orr.w	r3, r3, #2
 800585c:	6313      	str	r3, [r2, #48]	; 0x30
 800585e:	4b15      	ldr	r3, [pc, #84]	; (80058b4 <HAL_I2C_MspInit+0x88>)
 8005860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005862:	f003 0302 	and.w	r3, r3, #2
 8005866:	613b      	str	r3, [r7, #16]
 8005868:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800586a:	23c0      	movs	r3, #192	; 0xc0
 800586c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800586e:	2312      	movs	r3, #18
 8005870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005872:	2301      	movs	r3, #1
 8005874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005876:	2303      	movs	r3, #3
 8005878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800587a:	2304      	movs	r3, #4
 800587c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800587e:	f107 0314 	add.w	r3, r7, #20
 8005882:	4619      	mov	r1, r3
 8005884:	480c      	ldr	r0, [pc, #48]	; (80058b8 <HAL_I2C_MspInit+0x8c>)
 8005886:	f7fc fe17 	bl	80024b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800588a:	2300      	movs	r3, #0
 800588c:	60fb      	str	r3, [r7, #12]
 800588e:	4b09      	ldr	r3, [pc, #36]	; (80058b4 <HAL_I2C_MspInit+0x88>)
 8005890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005892:	4a08      	ldr	r2, [pc, #32]	; (80058b4 <HAL_I2C_MspInit+0x88>)
 8005894:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005898:	6413      	str	r3, [r2, #64]	; 0x40
 800589a:	4b06      	ldr	r3, [pc, #24]	; (80058b4 <HAL_I2C_MspInit+0x88>)
 800589c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058a2:	60fb      	str	r3, [r7, #12]
 80058a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80058a6:	bf00      	nop
 80058a8:	3728      	adds	r7, #40	; 0x28
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	40005400 	.word	0x40005400
 80058b4:	40023800 	.word	0x40023800
 80058b8:	40020400 	.word	0x40020400

080058bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058cc:	d10e      	bne.n	80058ec <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80058ce:	2300      	movs	r3, #0
 80058d0:	60fb      	str	r3, [r7, #12]
 80058d2:	4b13      	ldr	r3, [pc, #76]	; (8005920 <HAL_TIM_Base_MspInit+0x64>)
 80058d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d6:	4a12      	ldr	r2, [pc, #72]	; (8005920 <HAL_TIM_Base_MspInit+0x64>)
 80058d8:	f043 0301 	orr.w	r3, r3, #1
 80058dc:	6413      	str	r3, [r2, #64]	; 0x40
 80058de:	4b10      	ldr	r3, [pc, #64]	; (8005920 <HAL_TIM_Base_MspInit+0x64>)
 80058e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	60fb      	str	r3, [r7, #12]
 80058e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80058ea:	e012      	b.n	8005912 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a0c      	ldr	r2, [pc, #48]	; (8005924 <HAL_TIM_Base_MspInit+0x68>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d10d      	bne.n	8005912 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80058f6:	2300      	movs	r3, #0
 80058f8:	60bb      	str	r3, [r7, #8]
 80058fa:	4b09      	ldr	r3, [pc, #36]	; (8005920 <HAL_TIM_Base_MspInit+0x64>)
 80058fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fe:	4a08      	ldr	r2, [pc, #32]	; (8005920 <HAL_TIM_Base_MspInit+0x64>)
 8005900:	f043 0304 	orr.w	r3, r3, #4
 8005904:	6413      	str	r3, [r2, #64]	; 0x40
 8005906:	4b06      	ldr	r3, [pc, #24]	; (8005920 <HAL_TIM_Base_MspInit+0x64>)
 8005908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590a:	f003 0304 	and.w	r3, r3, #4
 800590e:	60bb      	str	r3, [r7, #8]
 8005910:	68bb      	ldr	r3, [r7, #8]
}
 8005912:	bf00      	nop
 8005914:	3714      	adds	r7, #20
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	40023800 	.word	0x40023800
 8005924:	40000800 	.word	0x40000800

08005928 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b088      	sub	sp, #32
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005930:	f107 030c 	add.w	r3, r7, #12
 8005934:	2200      	movs	r2, #0
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	605a      	str	r2, [r3, #4]
 800593a:	609a      	str	r2, [r3, #8]
 800593c:	60da      	str	r2, [r3, #12]
 800593e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005948:	d11d      	bne.n	8005986 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800594a:	2300      	movs	r3, #0
 800594c:	60bb      	str	r3, [r7, #8]
 800594e:	4b10      	ldr	r3, [pc, #64]	; (8005990 <HAL_TIM_MspPostInit+0x68>)
 8005950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005952:	4a0f      	ldr	r2, [pc, #60]	; (8005990 <HAL_TIM_MspPostInit+0x68>)
 8005954:	f043 0301 	orr.w	r3, r3, #1
 8005958:	6313      	str	r3, [r2, #48]	; 0x30
 800595a:	4b0d      	ldr	r3, [pc, #52]	; (8005990 <HAL_TIM_MspPostInit+0x68>)
 800595c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	60bb      	str	r3, [r7, #8]
 8005964:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005966:	2320      	movs	r3, #32
 8005968:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800596a:	2302      	movs	r3, #2
 800596c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800596e:	2300      	movs	r3, #0
 8005970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005972:	2300      	movs	r3, #0
 8005974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005976:	2301      	movs	r3, #1
 8005978:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800597a:	f107 030c 	add.w	r3, r7, #12
 800597e:	4619      	mov	r1, r3
 8005980:	4804      	ldr	r0, [pc, #16]	; (8005994 <HAL_TIM_MspPostInit+0x6c>)
 8005982:	f7fc fd99 	bl	80024b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8005986:	bf00      	nop
 8005988:	3720      	adds	r7, #32
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	40023800 	.word	0x40023800
 8005994:	40020000 	.word	0x40020000

08005998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005998:	b480      	push	{r7}
 800599a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800599c:	e7fe      	b.n	800599c <NMI_Handler+0x4>

0800599e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800599e:	b480      	push	{r7}
 80059a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80059a2:	e7fe      	b.n	80059a2 <HardFault_Handler+0x4>

080059a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80059a4:	b480      	push	{r7}
 80059a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80059a8:	e7fe      	b.n	80059a8 <MemManage_Handler+0x4>

080059aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80059aa:	b480      	push	{r7}
 80059ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80059ae:	e7fe      	b.n	80059ae <BusFault_Handler+0x4>

080059b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80059b0:	b480      	push	{r7}
 80059b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80059b4:	e7fe      	b.n	80059b4 <UsageFault_Handler+0x4>

080059b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80059b6:	b480      	push	{r7}
 80059b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80059ba:	bf00      	nop
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80059c4:	b480      	push	{r7}
 80059c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80059c8:	bf00      	nop
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80059d2:	b480      	push	{r7}
 80059d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80059d6:	bf00      	nop
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80059e4:	f7fb fafe 	bl	8000fe4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80059e8:	bf00      	nop
 80059ea:	bd80      	pop	{r7, pc}

080059ec <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80059f0:	4802      	ldr	r0, [pc, #8]	; (80059fc <CAN1_RX0_IRQHandler+0x10>)
 80059f2:	f7fc fa16 	bl	8001e22 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80059f6:	bf00      	nop
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	2000038c 	.word	0x2000038c

08005a00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005a00:	b480      	push	{r7}
 8005a02:	af00      	add	r7, sp, #0
	return 1;
 8005a04:	2301      	movs	r3, #1
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <_kill>:

int _kill(int pid, int sig)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005a1a:	f000 fcc1 	bl	80063a0 <__errno>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2216      	movs	r2, #22
 8005a22:	601a      	str	r2, [r3, #0]
	return -1;
 8005a24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3708      	adds	r7, #8
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <_exit>:

void _exit (int status)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005a38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f7ff ffe7 	bl	8005a10 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005a42:	e7fe      	b.n	8005a42 <_exit+0x12>

08005a44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a50:	2300      	movs	r3, #0
 8005a52:	617b      	str	r3, [r7, #20]
 8005a54:	e00a      	b.n	8005a6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005a56:	f3af 8000 	nop.w
 8005a5a:	4601      	mov	r1, r0
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	1c5a      	adds	r2, r3, #1
 8005a60:	60ba      	str	r2, [r7, #8]
 8005a62:	b2ca      	uxtb	r2, r1
 8005a64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	617b      	str	r3, [r7, #20]
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	dbf0      	blt.n	8005a56 <_read+0x12>
	}

return len;
 8005a74:	687b      	ldr	r3, [r7, #4]
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3718      	adds	r7, #24
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b086      	sub	sp, #24
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	60f8      	str	r0, [r7, #12]
 8005a86:	60b9      	str	r1, [r7, #8]
 8005a88:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	617b      	str	r3, [r7, #20]
 8005a8e:	e009      	b.n	8005aa4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	1c5a      	adds	r2, r3, #1
 8005a94:	60ba      	str	r2, [r7, #8]
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	617b      	str	r3, [r7, #20]
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	dbf1      	blt.n	8005a90 <_write+0x12>
	}
	return len;
 8005aac:	687b      	ldr	r3, [r7, #4]
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3718      	adds	r7, #24
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
	...

08005ab8 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005ac0:	4b11      	ldr	r3, [pc, #68]	; (8005b08 <_sbrk+0x50>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d102      	bne.n	8005ace <_sbrk+0x16>
		heap_end = &end;
 8005ac8:	4b0f      	ldr	r3, [pc, #60]	; (8005b08 <_sbrk+0x50>)
 8005aca:	4a10      	ldr	r2, [pc, #64]	; (8005b0c <_sbrk+0x54>)
 8005acc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005ace:	4b0e      	ldr	r3, [pc, #56]	; (8005b08 <_sbrk+0x50>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005ad4:	4b0c      	ldr	r3, [pc, #48]	; (8005b08 <_sbrk+0x50>)
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4413      	add	r3, r2
 8005adc:	466a      	mov	r2, sp
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d907      	bls.n	8005af2 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8005ae2:	f000 fc5d 	bl	80063a0 <__errno>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	220c      	movs	r2, #12
 8005aea:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8005aec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005af0:	e006      	b.n	8005b00 <_sbrk+0x48>
	}

	heap_end += incr;
 8005af2:	4b05      	ldr	r3, [pc, #20]	; (8005b08 <_sbrk+0x50>)
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4413      	add	r3, r2
 8005afa:	4a03      	ldr	r2, [pc, #12]	; (8005b08 <_sbrk+0x50>)
 8005afc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005afe:	68fb      	ldr	r3, [r7, #12]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3710      	adds	r7, #16
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	20000204 	.word	0x20000204
 8005b0c:	20000400 	.word	0x20000400

08005b10 <_close>:

int _close(int file)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
	return -1;
 8005b18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005b38:	605a      	str	r2, [r3, #4]
	return 0;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <_isatty>:

int _isatty(int file)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
	return 1;
 8005b50:	2301      	movs	r3, #1
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	370c      	adds	r7, #12
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr

08005b5e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005b5e:	b480      	push	{r7}
 8005b60:	b085      	sub	sp, #20
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	60f8      	str	r0, [r7, #12]
 8005b66:	60b9      	str	r1, [r7, #8]
 8005b68:	607a      	str	r2, [r7, #4]
	return 0;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3714      	adds	r7, #20
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005b7c:	4b08      	ldr	r3, [pc, #32]	; (8005ba0 <SystemInit+0x28>)
 8005b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b82:	4a07      	ldr	r2, [pc, #28]	; (8005ba0 <SystemInit+0x28>)
 8005b84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005b8c:	4b04      	ldr	r3, [pc, #16]	; (8005ba0 <SystemInit+0x28>)
 8005b8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005b92:	609a      	str	r2, [r3, #8]
#endif
}
 8005b94:	bf00      	nop
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	e000ed00 	.word	0xe000ed00

08005ba4 <Array_sort_temp>:



// function to sort the array in ascending order
void Array_sort_temp(int *array , int k)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b087      	sub	sp, #28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
    // declare some local variables
    int i=0 , j=0 , temp=0;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	617b      	str	r3, [r7, #20]
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	613b      	str	r3, [r7, #16]
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	60fb      	str	r3, [r7, #12]

    for(i=0 ; i<k ; i++)
 8005bba:	2300      	movs	r3, #0
 8005bbc:	617b      	str	r3, [r7, #20]
 8005bbe:	e032      	b.n	8005c26 <Array_sort_temp+0x82>
    {
        for(j=0 ; j<k-1 ; j++)
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	613b      	str	r3, [r7, #16]
 8005bc4:	e027      	b.n	8005c16 <Array_sort_temp+0x72>
        {
            if(array[j]>array[j+1])
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	4413      	add	r3, r2
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	6879      	ldr	r1, [r7, #4]
 8005bd8:	440b      	add	r3, r1
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	dd17      	ble.n	8005c10 <Array_sort_temp+0x6c>
            {
                temp        = array[j];
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	4413      	add	r3, r2
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	60fb      	str	r3, [r7, #12]
                array[j]    = array[j+1];
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	441a      	add	r2, r3
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	6879      	ldr	r1, [r7, #4]
 8005bfc:	440b      	add	r3, r1
 8005bfe:	6812      	ldr	r2, [r2, #0]
 8005c00:	601a      	str	r2, [r3, #0]
                array[j+1]  = temp;
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	3301      	adds	r3, #1
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	601a      	str	r2, [r3, #0]
        for(j=0 ; j<k-1 ; j++)
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	3301      	adds	r3, #1
 8005c14:	613b      	str	r3, [r7, #16]
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	dbd2      	blt.n	8005bc6 <Array_sort_temp+0x22>
    for(i=0 ; i<k ; i++)
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	3301      	adds	r3, #1
 8005c24:	617b      	str	r3, [r7, #20]
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	dbc8      	blt.n	8005bc0 <Array_sort_temp+0x1c>
            }
        }
    }
}
 8005c2e:	bf00      	nop
 8005c30:	bf00      	nop
 8005c32:	371c      	adds	r7, #28
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <Find_median_temperature>:


// function to calculate the median of the array
float Find_median_temperature(int array[] , int k)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
   float median=0;
 8005c46:	f04f 0300 	mov.w	r3, #0
 8005c4a:	60fb      	str	r3, [r7, #12]

  // if number of elements are even
   if(k%2 == 0)
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	f003 0301 	and.w	r3, r3, #1
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d123      	bne.n	8005c9e <Find_median_temperature+0x62>
   median = (array[(k-1)/2] + array[k/2])/2.0;
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	0fda      	lsrs	r2, r3, #31
 8005c5c:	4413      	add	r3, r2
 8005c5e:	105b      	asrs	r3, r3, #1
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	4413      	add	r3, r2
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	0fd9      	lsrs	r1, r3, #31
 8005c6c:	440b      	add	r3, r1
 8005c6e:	105b      	asrs	r3, r3, #1
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	6879      	ldr	r1, [r7, #4]
 8005c74:	440b      	add	r3, r1
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4413      	add	r3, r2
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7fa fc52 	bl	8000524 <__aeabi_i2d>
 8005c80:	f04f 0200 	mov.w	r2, #0
 8005c84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c88:	f7fa fde0 	bl	800084c <__aeabi_ddiv>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	460b      	mov	r3, r1
 8005c90:	4610      	mov	r0, r2
 8005c92:	4619      	mov	r1, r3
 8005c94:	f7fa ff88 	bl	8000ba8 <__aeabi_d2f>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	60fb      	str	r3, [r7, #12]
 8005c9c:	e00d      	b.n	8005cba <Find_median_temperature+0x7e>
   // if number of elements are odd
    else
    median = array[k/2];
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	0fda      	lsrs	r2, r3, #31
 8005ca2:	4413      	add	r3, r2
 8005ca4:	105b      	asrs	r3, r3, #1
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	4413      	add	r3, r2
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	ee07 3a90 	vmov	s15, r3
 8005cb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cb6:	edc7 7a03 	vstr	s15, [r7, #12]

    return median;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	ee07 3a90 	vmov	s15, r3
}
 8005cc0:	eeb0 0a67 	vmov.f32	s0, s15
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <temperature_median>:




uint16_t temperature_median(uint16_t temperature_value)
{
 8005cca:	b5b0      	push	{r4, r5, r7, lr}
 8005ccc:	b088      	sub	sp, #32
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	80fb      	strh	r3, [r7, #6]
 8005cd4:	466b      	mov	r3, sp
 8005cd6:	461d      	mov	r5, r3
	    // declare some local variables
	    int i=0 ,k=25;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	61fb      	str	r3, [r7, #28]
 8005cdc:	2319      	movs	r3, #25
 8005cde:	61bb      	str	r3, [r7, #24]
	    float median=0;
 8005ce0:	f04f 0300 	mov.w	r3, #0
 8005ce4:	617b      	str	r3, [r7, #20]

	    // declare two int arrays
	  	    int array_temperature[k];
 8005ce6:	69bc      	ldr	r4, [r7, #24]
 8005ce8:	1e63      	subs	r3, r4, #1
 8005cea:	613b      	str	r3, [r7, #16]
 8005cec:	4623      	mov	r3, r4
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f04f 0100 	mov.w	r1, #0
 8005cf4:	f04f 0200 	mov.w	r2, #0
 8005cf8:	f04f 0300 	mov.w	r3, #0
 8005cfc:	014b      	lsls	r3, r1, #5
 8005cfe:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005d02:	0142      	lsls	r2, r0, #5
 8005d04:	4623      	mov	r3, r4
 8005d06:	4618      	mov	r0, r3
 8005d08:	f04f 0100 	mov.w	r1, #0
 8005d0c:	f04f 0200 	mov.w	r2, #0
 8005d10:	f04f 0300 	mov.w	r3, #0
 8005d14:	014b      	lsls	r3, r1, #5
 8005d16:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005d1a:	0142      	lsls	r2, r0, #5
 8005d1c:	4623      	mov	r3, r4
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	3307      	adds	r3, #7
 8005d22:	08db      	lsrs	r3, r3, #3
 8005d24:	00db      	lsls	r3, r3, #3
 8005d26:	ebad 0d03 	sub.w	sp, sp, r3
 8005d2a:	466b      	mov	r3, sp
 8005d2c:	3303      	adds	r3, #3
 8005d2e:	089b      	lsrs	r3, r3, #2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	60fb      	str	r3, [r7, #12]

	    for(i = 0; i < k; i++)
 8005d34:	2300      	movs	r3, #0
 8005d36:	61fb      	str	r3, [r7, #28]
 8005d38:	e007      	b.n	8005d4a <temperature_median+0x80>
	    {
	    	array_temperature[i] = temperature_value;
 8005d3a:	88f9      	ldrh	r1, [r7, #6]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	69fa      	ldr	r2, [r7, #28]
 8005d40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	    for(i = 0; i < k; i++)
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	3301      	adds	r3, #1
 8005d48:	61fb      	str	r3, [r7, #28]
 8005d4a:	69fa      	ldr	r2, [r7, #28]
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	dbf3      	blt.n	8005d3a <temperature_median+0x70>
	    }

	    // Sort the array in ascending order
	       Array_sort_temp(array_temperature, k);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	69b9      	ldr	r1, [r7, #24]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7ff ff24 	bl	8005ba4 <Array_sort_temp>

	       // Now pass the sorted array to calculate
	      //    the median of your array.
	          median = Find_median_temperature(array_temperature , k);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	69b9      	ldr	r1, [r7, #24]
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7ff ff6b 	bl	8005c3c <Find_median_temperature>
 8005d66:	ed87 0a05 	vstr	s0, [r7, #20]

	 return(median);
 8005d6a:	edd7 7a05 	vldr	s15, [r7, #20]
 8005d6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d72:	ee17 3a90 	vmov	r3, s15
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	46ad      	mov	sp, r5
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3720      	adds	r7, #32
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bdb0      	pop	{r4, r5, r7, pc}

08005d82 <Array_sort_ultrasonic>:



// function to sort the array in ascending order
void Array_sort_ultrasonic(int *array , int k)
{
 8005d82:	b480      	push	{r7}
 8005d84:	b087      	sub	sp, #28
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
 8005d8a:	6039      	str	r1, [r7, #0]
    // declare some local variables
    int i=0 , j=0 , temp=0;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	617b      	str	r3, [r7, #20]
 8005d90:	2300      	movs	r3, #0
 8005d92:	613b      	str	r3, [r7, #16]
 8005d94:	2300      	movs	r3, #0
 8005d96:	60fb      	str	r3, [r7, #12]

    for(i=0 ; i<k ; i++)
 8005d98:	2300      	movs	r3, #0
 8005d9a:	617b      	str	r3, [r7, #20]
 8005d9c:	e032      	b.n	8005e04 <Array_sort_ultrasonic+0x82>
    {
        for(j=0 ; j<k-1 ; j++)
 8005d9e:	2300      	movs	r3, #0
 8005da0:	613b      	str	r3, [r7, #16]
 8005da2:	e027      	b.n	8005df4 <Array_sort_ultrasonic+0x72>
        {
            if(array[j]>array[j+1])
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	4413      	add	r3, r2
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	3301      	adds	r3, #1
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	6879      	ldr	r1, [r7, #4]
 8005db6:	440b      	add	r3, r1
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	dd17      	ble.n	8005dee <Array_sort_ultrasonic+0x6c>
            {
                temp        = array[j];
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	60fb      	str	r3, [r7, #12]
                array[j]    = array[j+1];
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	3301      	adds	r3, #1
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	441a      	add	r2, r3
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	6879      	ldr	r1, [r7, #4]
 8005dda:	440b      	add	r3, r1
 8005ddc:	6812      	ldr	r2, [r2, #0]
 8005dde:	601a      	str	r2, [r3, #0]
                array[j+1]  = temp;
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	3301      	adds	r3, #1
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	4413      	add	r3, r2
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	601a      	str	r2, [r3, #0]
        for(j=0 ; j<k-1 ; j++)
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	3301      	adds	r3, #1
 8005df2:	613b      	str	r3, [r7, #16]
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	3b01      	subs	r3, #1
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	dbd2      	blt.n	8005da4 <Array_sort_ultrasonic+0x22>
    for(i=0 ; i<k ; i++)
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	3301      	adds	r3, #1
 8005e02:	617b      	str	r3, [r7, #20]
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	dbc8      	blt.n	8005d9e <Array_sort_ultrasonic+0x1c>
            }
        }
    }
}
 8005e0c:	bf00      	nop
 8005e0e:	bf00      	nop
 8005e10:	371c      	adds	r7, #28
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr

08005e1a <Find_median_ultrasonic>:


// function to calculate the median of the array
float Find_median_ultrasonic(int array[] , int k)
{
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b084      	sub	sp, #16
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
 8005e22:	6039      	str	r1, [r7, #0]
   float median=0;
 8005e24:	f04f 0300 	mov.w	r3, #0
 8005e28:	60fb      	str	r3, [r7, #12]

  // if number of elements are even
   if(k%2 == 0)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	f003 0301 	and.w	r3, r3, #1
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d123      	bne.n	8005e7c <Find_median_ultrasonic+0x62>
   median = (array[(k-1)/2] + array[k/2])/2.0;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	3b01      	subs	r3, #1
 8005e38:	0fda      	lsrs	r2, r3, #31
 8005e3a:	4413      	add	r3, r2
 8005e3c:	105b      	asrs	r3, r3, #1
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	4413      	add	r3, r2
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	0fd9      	lsrs	r1, r3, #31
 8005e4a:	440b      	add	r3, r1
 8005e4c:	105b      	asrs	r3, r3, #1
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	6879      	ldr	r1, [r7, #4]
 8005e52:	440b      	add	r3, r1
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4413      	add	r3, r2
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7fa fb63 	bl	8000524 <__aeabi_i2d>
 8005e5e:	f04f 0200 	mov.w	r2, #0
 8005e62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005e66:	f7fa fcf1 	bl	800084c <__aeabi_ddiv>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	460b      	mov	r3, r1
 8005e6e:	4610      	mov	r0, r2
 8005e70:	4619      	mov	r1, r3
 8005e72:	f7fa fe99 	bl	8000ba8 <__aeabi_d2f>
 8005e76:	4603      	mov	r3, r0
 8005e78:	60fb      	str	r3, [r7, #12]
 8005e7a:	e00d      	b.n	8005e98 <Find_median_ultrasonic+0x7e>
   // if number of elements are odd
    else
    median = array[k/2];
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	0fda      	lsrs	r2, r3, #31
 8005e80:	4413      	add	r3, r2
 8005e82:	105b      	asrs	r3, r3, #1
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	4413      	add	r3, r2
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	ee07 3a90 	vmov	s15, r3
 8005e90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e94:	edc7 7a03 	vstr	s15, [r7, #12]

    return median;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	ee07 3a90 	vmov	s15, r3
}
 8005e9e:	eeb0 0a67 	vmov.f32	s0, s15
 8005ea2:	3710      	adds	r7, #16
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <ultrasonic_median>:




uint16_t ultrasonic_median(uint16_t ultrasonic_value)
{
 8005ea8:	b5b0      	push	{r4, r5, r7, lr}
 8005eaa:	b088      	sub	sp, #32
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	4603      	mov	r3, r0
 8005eb0:	80fb      	strh	r3, [r7, #6]
 8005eb2:	466b      	mov	r3, sp
 8005eb4:	461d      	mov	r5, r3
	    // declare some local variables
	    int i=0 ,k=25;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	61fb      	str	r3, [r7, #28]
 8005eba:	2319      	movs	r3, #25
 8005ebc:	61bb      	str	r3, [r7, #24]
	    float median=0;
 8005ebe:	f04f 0300 	mov.w	r3, #0
 8005ec2:	617b      	str	r3, [r7, #20]

	    // declare two int arrays
	  	    int array_ultrasonic[k];
 8005ec4:	69bc      	ldr	r4, [r7, #24]
 8005ec6:	1e63      	subs	r3, r4, #1
 8005ec8:	613b      	str	r3, [r7, #16]
 8005eca:	4623      	mov	r3, r4
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f04f 0100 	mov.w	r1, #0
 8005ed2:	f04f 0200 	mov.w	r2, #0
 8005ed6:	f04f 0300 	mov.w	r3, #0
 8005eda:	014b      	lsls	r3, r1, #5
 8005edc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005ee0:	0142      	lsls	r2, r0, #5
 8005ee2:	4623      	mov	r3, r4
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f04f 0100 	mov.w	r1, #0
 8005eea:	f04f 0200 	mov.w	r2, #0
 8005eee:	f04f 0300 	mov.w	r3, #0
 8005ef2:	014b      	lsls	r3, r1, #5
 8005ef4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005ef8:	0142      	lsls	r2, r0, #5
 8005efa:	4623      	mov	r3, r4
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	3307      	adds	r3, #7
 8005f00:	08db      	lsrs	r3, r3, #3
 8005f02:	00db      	lsls	r3, r3, #3
 8005f04:	ebad 0d03 	sub.w	sp, sp, r3
 8005f08:	466b      	mov	r3, sp
 8005f0a:	3303      	adds	r3, #3
 8005f0c:	089b      	lsrs	r3, r3, #2
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	60fb      	str	r3, [r7, #12]

	    for(i = 0; i < k; i++)
 8005f12:	2300      	movs	r3, #0
 8005f14:	61fb      	str	r3, [r7, #28]
 8005f16:	e007      	b.n	8005f28 <ultrasonic_median+0x80>
	    {
	    	array_ultrasonic[i] = ultrasonic_value;
 8005f18:	88f9      	ldrh	r1, [r7, #6]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	69fa      	ldr	r2, [r7, #28]
 8005f1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	    for(i = 0; i < k; i++)
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	3301      	adds	r3, #1
 8005f26:	61fb      	str	r3, [r7, #28]
 8005f28:	69fa      	ldr	r2, [r7, #28]
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	dbf3      	blt.n	8005f18 <ultrasonic_median+0x70>
	    }

	    // Sort the array in ascending order
	       Array_sort_ultrasonic(array_ultrasonic, k);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	69b9      	ldr	r1, [r7, #24]
 8005f34:	4618      	mov	r0, r3
 8005f36:	f7ff ff24 	bl	8005d82 <Array_sort_ultrasonic>

	       // Now pass the sorted array to calculate
	      //    the median of your array.
	          median = Find_median_ultrasonic(array_ultrasonic , k);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	69b9      	ldr	r1, [r7, #24]
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7ff ff6b 	bl	8005e1a <Find_median_ultrasonic>
 8005f44:	ed87 0a05 	vstr	s0, [r7, #20]

	 return(median);
 8005f48:	edd7 7a05 	vldr	s15, [r7, #20]
 8005f4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f50:	ee17 3a90 	vmov	r3, s15
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	46ad      	mov	sp, r5
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3720      	adds	r7, #32
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bdb0      	pop	{r4, r5, r7, pc}

08005f60 <DWT_Delay_Init>:

/* private functions prototypes */
/**
 * @brief DWT Cortex Tick counter for Microsecond delay
 */
static uint32_t DWT_Delay_Init(void) {
 8005f60:	b480      	push	{r7}
 8005f62:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8005f64:	4b14      	ldr	r3, [pc, #80]	; (8005fb8 <DWT_Delay_Init+0x58>)
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	4a13      	ldr	r2, [pc, #76]	; (8005fb8 <DWT_Delay_Init+0x58>)
 8005f6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f6e:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8005f70:	4b11      	ldr	r3, [pc, #68]	; (8005fb8 <DWT_Delay_Init+0x58>)
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	4a10      	ldr	r2, [pc, #64]	; (8005fb8 <DWT_Delay_Init+0x58>)
 8005f76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f7a:	60d3      	str	r3, [r2, #12]
  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 8005f7c:	4b0f      	ldr	r3, [pc, #60]	; (8005fbc <DWT_Delay_Init+0x5c>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a0e      	ldr	r2, [pc, #56]	; (8005fbc <DWT_Delay_Init+0x5c>)
 8005f82:	f023 0301 	bic.w	r3, r3, #1
 8005f86:	6013      	str	r3, [r2, #0]
  /* Enable clock cycle counter */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8005f88:	4b0c      	ldr	r3, [pc, #48]	; (8005fbc <DWT_Delay_Init+0x5c>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a0b      	ldr	r2, [pc, #44]	; (8005fbc <DWT_Delay_Init+0x5c>)
 8005f8e:	f043 0301 	orr.w	r3, r3, #1
 8005f92:	6013      	str	r3, [r2, #0]
  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8005f94:	4b09      	ldr	r3, [pc, #36]	; (8005fbc <DWT_Delay_Init+0x5c>)
 8005f96:	2200      	movs	r2, #0
 8005f98:	605a      	str	r2, [r3, #4]
  /* 3 NO OPERATION instructions */
  __NOP();
 8005f9a:	bf00      	nop
  __NOP();
 8005f9c:	bf00      	nop
  __NOP();
 8005f9e:	bf00      	nop
  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 8005fa0:	4b06      	ldr	r3, [pc, #24]	; (8005fbc <DWT_Delay_Init+0x5c>)
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d001      	beq.n	8005fac <DWT_Delay_Init+0x4c>
  {
    return 0;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	e000      	b.n	8005fae <DWT_Delay_Init+0x4e>
  }
  else
  {
    return 1;
 8005fac:	2301      	movs	r3, #1
  }
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr
 8005fb8:	e000edf0 	.word	0xe000edf0
 8005fbc:	e0001000 	.word	0xe0001000

08005fc0 <DWT_Delay_us>:

__STATIC_INLINE void DWT_Delay_us(volatile uint32_t usec)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 uint32_t clk_cycle_start = DWT->CYCCNT;
 8005fc8:	4b0d      	ldr	r3, [pc, #52]	; (8006000 <DWT_Delay_us+0x40>)
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	60fb      	str	r3, [r7, #12]
 usec *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8005fce:	f7fe f80f 	bl	8003ff0 <HAL_RCC_GetHCLKFreq>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	4a0b      	ldr	r2, [pc, #44]	; (8006004 <DWT_Delay_us+0x44>)
 8005fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fda:	0c9b      	lsrs	r3, r3, #18
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	fb02 f303 	mul.w	r3, r2, r3
 8005fe2:	607b      	str	r3, [r7, #4]
 while ((DWT->CYCCNT - clk_cycle_start) < usec);
 8005fe4:	bf00      	nop
 8005fe6:	4b06      	ldr	r3, [pc, #24]	; (8006000 <DWT_Delay_us+0x40>)
 8005fe8:	685a      	ldr	r2, [r3, #4]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	1ad2      	subs	r2, r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d3f8      	bcc.n	8005fe6 <DWT_Delay_us+0x26>
}
 8005ff4:	bf00      	nop
 8005ff6:	bf00      	nop
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	e0001000 	.word	0xe0001000
 8006004:	431bde83 	.word	0x431bde83

08006008 <lcd16x2_enablePulse>:

/**
 * @brief Enable Pulse function
 */
static void lcd16x2_enablePulse(void)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 800600c:	4b0b      	ldr	r3, [pc, #44]	; (800603c <lcd16x2_enablePulse+0x34>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a0b      	ldr	r2, [pc, #44]	; (8006040 <lcd16x2_enablePulse+0x38>)
 8006012:	8811      	ldrh	r1, [r2, #0]
 8006014:	2201      	movs	r2, #1
 8006016:	4618      	mov	r0, r3
 8006018:	f7fc fc02 	bl	8002820 <HAL_GPIO_WritePin>
  DWT_Delay_us(T_CONST);
 800601c:	2014      	movs	r0, #20
 800601e:	f7ff ffcf 	bl	8005fc0 <DWT_Delay_us>
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 8006022:	4b06      	ldr	r3, [pc, #24]	; (800603c <lcd16x2_enablePulse+0x34>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a06      	ldr	r2, [pc, #24]	; (8006040 <lcd16x2_enablePulse+0x38>)
 8006028:	8811      	ldrh	r1, [r2, #0]
 800602a:	2200      	movs	r2, #0
 800602c:	4618      	mov	r0, r3
 800602e:	f7fc fbf7 	bl	8002820 <HAL_GPIO_WritePin>
  DWT_Delay_us(60);
 8006032:	203c      	movs	r0, #60	; 0x3c
 8006034:	f7ff ffc4 	bl	8005fc0 <DWT_Delay_us>
}
 8006038:	bf00      	nop
 800603a:	bd80      	pop	{r7, pc}
 800603c:	20000208 	.word	0x20000208
 8006040:	2000020e 	.word	0x2000020e

08006044 <lcd16x2_rs>:

/**
 * @brief RS control
 */
static void lcd16x2_rs(bool state)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	4603      	mov	r3, r0
 800604c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 800604e:	4b06      	ldr	r3, [pc, #24]	; (8006068 <lcd16x2_rs+0x24>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a06      	ldr	r2, [pc, #24]	; (800606c <lcd16x2_rs+0x28>)
 8006054:	8811      	ldrh	r1, [r2, #0]
 8006056:	79fa      	ldrb	r2, [r7, #7]
 8006058:	4618      	mov	r0, r3
 800605a:	f7fc fbe1 	bl	8002820 <HAL_GPIO_WritePin>
}
 800605e:	bf00      	nop
 8006060:	3708      	adds	r7, #8
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	20000208 	.word	0x20000208
 800606c:	2000020c 	.word	0x2000020c

08006070 <lcd16x2_write>:

/**
 * @brief Write parallel signal to lcd
 */
static void lcd16x2_write(uint8_t wbyte)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	4603      	mov	r3, r0
 8006078:	71fb      	strb	r3, [r7, #7]
  uint8_t LSB_nibble = wbyte&0xF, MSB_nibble = (wbyte>>4)&0xF;
 800607a:	79fb      	ldrb	r3, [r7, #7]
 800607c:	f003 030f 	and.w	r3, r3, #15
 8006080:	73fb      	strb	r3, [r7, #15]
 8006082:	79fb      	ldrb	r3, [r7, #7]
 8006084:	091b      	lsrs	r3, r3, #4
 8006086:	73bb      	strb	r3, [r7, #14]
  if(is8BitsMode)
 8006088:	4b5f      	ldr	r3, [pc, #380]	; (8006208 <lcd16x2_write+0x198>)
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d05a      	beq.n	8006146 <lcd16x2_write+0xd6>
  {
    //LSB data
    HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8006090:	4b5e      	ldr	r3, [pc, #376]	; (800620c <lcd16x2_write+0x19c>)
 8006092:	6818      	ldr	r0, [r3, #0]
 8006094:	4b5e      	ldr	r3, [pc, #376]	; (8006210 <lcd16x2_write+0x1a0>)
 8006096:	8819      	ldrh	r1, [r3, #0]
 8006098:	7bfb      	ldrb	r3, [r7, #15]
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	461a      	mov	r2, r3
 80060a2:	f7fc fbbd 	bl	8002820 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 80060a6:	4b59      	ldr	r3, [pc, #356]	; (800620c <lcd16x2_write+0x19c>)
 80060a8:	6818      	ldr	r0, [r3, #0]
 80060aa:	4b5a      	ldr	r3, [pc, #360]	; (8006214 <lcd16x2_write+0x1a4>)
 80060ac:	8819      	ldrh	r1, [r3, #0]
 80060ae:	7bfb      	ldrb	r3, [r7, #15]
 80060b0:	f003 0302 	and.w	r3, r3, #2
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	461a      	mov	r2, r3
 80060b8:	f7fc fbb2 	bl	8002820 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 80060bc:	4b53      	ldr	r3, [pc, #332]	; (800620c <lcd16x2_write+0x19c>)
 80060be:	6818      	ldr	r0, [r3, #0]
 80060c0:	4b55      	ldr	r3, [pc, #340]	; (8006218 <lcd16x2_write+0x1a8>)
 80060c2:	8819      	ldrh	r1, [r3, #0]
 80060c4:	7bfb      	ldrb	r3, [r7, #15]
 80060c6:	f003 0304 	and.w	r3, r3, #4
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	461a      	mov	r2, r3
 80060ce:	f7fc fba7 	bl	8002820 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 80060d2:	4b4e      	ldr	r3, [pc, #312]	; (800620c <lcd16x2_write+0x19c>)
 80060d4:	6818      	ldr	r0, [r3, #0]
 80060d6:	4b51      	ldr	r3, [pc, #324]	; (800621c <lcd16x2_write+0x1ac>)
 80060d8:	8819      	ldrh	r1, [r3, #0]
 80060da:	7bfb      	ldrb	r3, [r7, #15]
 80060dc:	f003 0308 	and.w	r3, r3, #8
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	461a      	mov	r2, r3
 80060e4:	f7fc fb9c 	bl	8002820 <HAL_GPIO_WritePin>
    //MSB data
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 80060e8:	4b4d      	ldr	r3, [pc, #308]	; (8006220 <lcd16x2_write+0x1b0>)
 80060ea:	6818      	ldr	r0, [r3, #0]
 80060ec:	4b4d      	ldr	r3, [pc, #308]	; (8006224 <lcd16x2_write+0x1b4>)
 80060ee:	8819      	ldrh	r1, [r3, #0]
 80060f0:	7bbb      	ldrb	r3, [r7, #14]
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	461a      	mov	r2, r3
 80060fa:	f7fc fb91 	bl	8002820 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 80060fe:	4b48      	ldr	r3, [pc, #288]	; (8006220 <lcd16x2_write+0x1b0>)
 8006100:	6818      	ldr	r0, [r3, #0]
 8006102:	4b49      	ldr	r3, [pc, #292]	; (8006228 <lcd16x2_write+0x1b8>)
 8006104:	8819      	ldrh	r1, [r3, #0]
 8006106:	7bbb      	ldrb	r3, [r7, #14]
 8006108:	f003 0302 	and.w	r3, r3, #2
 800610c:	b2db      	uxtb	r3, r3
 800610e:	461a      	mov	r2, r3
 8006110:	f7fc fb86 	bl	8002820 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8006114:	4b42      	ldr	r3, [pc, #264]	; (8006220 <lcd16x2_write+0x1b0>)
 8006116:	6818      	ldr	r0, [r3, #0]
 8006118:	4b44      	ldr	r3, [pc, #272]	; (800622c <lcd16x2_write+0x1bc>)
 800611a:	8819      	ldrh	r1, [r3, #0]
 800611c:	7bbb      	ldrb	r3, [r7, #14]
 800611e:	f003 0304 	and.w	r3, r3, #4
 8006122:	b2db      	uxtb	r3, r3
 8006124:	461a      	mov	r2, r3
 8006126:	f7fc fb7b 	bl	8002820 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 800612a:	4b3d      	ldr	r3, [pc, #244]	; (8006220 <lcd16x2_write+0x1b0>)
 800612c:	6818      	ldr	r0, [r3, #0]
 800612e:	4b40      	ldr	r3, [pc, #256]	; (8006230 <lcd16x2_write+0x1c0>)
 8006130:	8819      	ldrh	r1, [r3, #0]
 8006132:	7bbb      	ldrb	r3, [r7, #14]
 8006134:	f003 0308 	and.w	r3, r3, #8
 8006138:	b2db      	uxtb	r3, r3
 800613a:	461a      	mov	r2, r3
 800613c:	f7fc fb70 	bl	8002820 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8006140:	f7ff ff62 	bl	8006008 <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
    lcd16x2_enablePulse();
  }
}
 8006144:	e05b      	b.n	80061fe <lcd16x2_write+0x18e>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8006146:	4b36      	ldr	r3, [pc, #216]	; (8006220 <lcd16x2_write+0x1b0>)
 8006148:	6818      	ldr	r0, [r3, #0]
 800614a:	4b36      	ldr	r3, [pc, #216]	; (8006224 <lcd16x2_write+0x1b4>)
 800614c:	8819      	ldrh	r1, [r3, #0]
 800614e:	7bbb      	ldrb	r3, [r7, #14]
 8006150:	f003 0301 	and.w	r3, r3, #1
 8006154:	b2db      	uxtb	r3, r3
 8006156:	461a      	mov	r2, r3
 8006158:	f7fc fb62 	bl	8002820 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 800615c:	4b30      	ldr	r3, [pc, #192]	; (8006220 <lcd16x2_write+0x1b0>)
 800615e:	6818      	ldr	r0, [r3, #0]
 8006160:	4b31      	ldr	r3, [pc, #196]	; (8006228 <lcd16x2_write+0x1b8>)
 8006162:	8819      	ldrh	r1, [r3, #0]
 8006164:	7bbb      	ldrb	r3, [r7, #14]
 8006166:	f003 0302 	and.w	r3, r3, #2
 800616a:	b2db      	uxtb	r3, r3
 800616c:	461a      	mov	r2, r3
 800616e:	f7fc fb57 	bl	8002820 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8006172:	4b2b      	ldr	r3, [pc, #172]	; (8006220 <lcd16x2_write+0x1b0>)
 8006174:	6818      	ldr	r0, [r3, #0]
 8006176:	4b2d      	ldr	r3, [pc, #180]	; (800622c <lcd16x2_write+0x1bc>)
 8006178:	8819      	ldrh	r1, [r3, #0]
 800617a:	7bbb      	ldrb	r3, [r7, #14]
 800617c:	f003 0304 	and.w	r3, r3, #4
 8006180:	b2db      	uxtb	r3, r3
 8006182:	461a      	mov	r2, r3
 8006184:	f7fc fb4c 	bl	8002820 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8006188:	4b25      	ldr	r3, [pc, #148]	; (8006220 <lcd16x2_write+0x1b0>)
 800618a:	6818      	ldr	r0, [r3, #0]
 800618c:	4b28      	ldr	r3, [pc, #160]	; (8006230 <lcd16x2_write+0x1c0>)
 800618e:	8819      	ldrh	r1, [r3, #0]
 8006190:	7bbb      	ldrb	r3, [r7, #14]
 8006192:	f003 0308 	and.w	r3, r3, #8
 8006196:	b2db      	uxtb	r3, r3
 8006198:	461a      	mov	r2, r3
 800619a:	f7fc fb41 	bl	8002820 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 800619e:	f7ff ff33 	bl	8006008 <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 80061a2:	4b1f      	ldr	r3, [pc, #124]	; (8006220 <lcd16x2_write+0x1b0>)
 80061a4:	6818      	ldr	r0, [r3, #0]
 80061a6:	4b1f      	ldr	r3, [pc, #124]	; (8006224 <lcd16x2_write+0x1b4>)
 80061a8:	8819      	ldrh	r1, [r3, #0]
 80061aa:	7bfb      	ldrb	r3, [r7, #15]
 80061ac:	f003 0301 	and.w	r3, r3, #1
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	461a      	mov	r2, r3
 80061b4:	f7fc fb34 	bl	8002820 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 80061b8:	4b19      	ldr	r3, [pc, #100]	; (8006220 <lcd16x2_write+0x1b0>)
 80061ba:	6818      	ldr	r0, [r3, #0]
 80061bc:	4b1a      	ldr	r3, [pc, #104]	; (8006228 <lcd16x2_write+0x1b8>)
 80061be:	8819      	ldrh	r1, [r3, #0]
 80061c0:	7bfb      	ldrb	r3, [r7, #15]
 80061c2:	f003 0302 	and.w	r3, r3, #2
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	461a      	mov	r2, r3
 80061ca:	f7fc fb29 	bl	8002820 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 80061ce:	4b14      	ldr	r3, [pc, #80]	; (8006220 <lcd16x2_write+0x1b0>)
 80061d0:	6818      	ldr	r0, [r3, #0]
 80061d2:	4b16      	ldr	r3, [pc, #88]	; (800622c <lcd16x2_write+0x1bc>)
 80061d4:	8819      	ldrh	r1, [r3, #0]
 80061d6:	7bfb      	ldrb	r3, [r7, #15]
 80061d8:	f003 0304 	and.w	r3, r3, #4
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	461a      	mov	r2, r3
 80061e0:	f7fc fb1e 	bl	8002820 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 80061e4:	4b0e      	ldr	r3, [pc, #56]	; (8006220 <lcd16x2_write+0x1b0>)
 80061e6:	6818      	ldr	r0, [r3, #0]
 80061e8:	4b11      	ldr	r3, [pc, #68]	; (8006230 <lcd16x2_write+0x1c0>)
 80061ea:	8819      	ldrh	r1, [r3, #0]
 80061ec:	7bfb      	ldrb	r3, [r7, #15]
 80061ee:	f003 0308 	and.w	r3, r3, #8
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	461a      	mov	r2, r3
 80061f6:	f7fc fb13 	bl	8002820 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 80061fa:	f7ff ff05 	bl	8006008 <lcd16x2_enablePulse>
}
 80061fe:	bf00      	nop
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	20000010 	.word	0x20000010
 800620c:	20000210 	.word	0x20000210
 8006210:	20000214 	.word	0x20000214
 8006214:	20000216 	.word	0x20000216
 8006218:	20000218 	.word	0x20000218
 800621c:	2000021a 	.word	0x2000021a
 8006220:	2000021c 	.word	0x2000021c
 8006224:	20000220 	.word	0x20000220
 8006228:	20000222 	.word	0x20000222
 800622c:	20000224 	.word	0x20000224
 8006230:	20000226 	.word	0x20000226

08006234 <lcd16x2_writeCommand>:

/**
 * @brief Write command
 */
static void lcd16x2_writeCommand(uint8_t cmd)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	4603      	mov	r3, r0
 800623c:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 800623e:	2000      	movs	r0, #0
 8006240:	f7ff ff00 	bl	8006044 <lcd16x2_rs>
  lcd16x2_write(cmd);
 8006244:	79fb      	ldrb	r3, [r7, #7]
 8006246:	4618      	mov	r0, r3
 8006248:	f7ff ff12 	bl	8006070 <lcd16x2_write>
}
 800624c:	bf00      	nop
 800624e:	3708      	adds	r7, #8
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <lcd16x2_init_8bits>:
 */
void lcd16x2_init_8bits(
    GPIO_TypeDef* port_rs_e, uint16_t rs_pin, uint16_t e_pin,
    GPIO_TypeDef* port_0_3, uint16_t d0_pin, uint16_t d1_pin, uint16_t d2_pin, uint16_t d3_pin,
    GPIO_TypeDef* port_4_7, uint16_t d4_pin, uint16_t d5_pin, uint16_t d6_pin, uint16_t d7_pin)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	607b      	str	r3, [r7, #4]
 800625e:	460b      	mov	r3, r1
 8006260:	817b      	strh	r3, [r7, #10]
 8006262:	4613      	mov	r3, r2
 8006264:	813b      	strh	r3, [r7, #8]
  DWT_Delay_Init();
 8006266:	f7ff fe7b 	bl	8005f60 <DWT_Delay_Init>
  //Set GPIO Ports and Pins data
  PORT_RS_and_E = port_rs_e;
 800626a:	4a29      	ldr	r2, [pc, #164]	; (8006310 <lcd16x2_init_8bits+0xbc>)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6013      	str	r3, [r2, #0]
  PIN_RS = rs_pin;
 8006270:	4a28      	ldr	r2, [pc, #160]	; (8006314 <lcd16x2_init_8bits+0xc0>)
 8006272:	897b      	ldrh	r3, [r7, #10]
 8006274:	8013      	strh	r3, [r2, #0]
  PIN_E = e_pin;
 8006276:	4a28      	ldr	r2, [pc, #160]	; (8006318 <lcd16x2_init_8bits+0xc4>)
 8006278:	893b      	ldrh	r3, [r7, #8]
 800627a:	8013      	strh	r3, [r2, #0]
  PORT_LSB = port_0_3;
 800627c:	4a27      	ldr	r2, [pc, #156]	; (800631c <lcd16x2_init_8bits+0xc8>)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6013      	str	r3, [r2, #0]
  D0_PIN = d0_pin;
 8006282:	4a27      	ldr	r2, [pc, #156]	; (8006320 <lcd16x2_init_8bits+0xcc>)
 8006284:	8b3b      	ldrh	r3, [r7, #24]
 8006286:	8013      	strh	r3, [r2, #0]
  D1_PIN = d1_pin;
 8006288:	4a26      	ldr	r2, [pc, #152]	; (8006324 <lcd16x2_init_8bits+0xd0>)
 800628a:	8bbb      	ldrh	r3, [r7, #28]
 800628c:	8013      	strh	r3, [r2, #0]
  D2_PIN = d2_pin;
 800628e:	4a26      	ldr	r2, [pc, #152]	; (8006328 <lcd16x2_init_8bits+0xd4>)
 8006290:	8c3b      	ldrh	r3, [r7, #32]
 8006292:	8013      	strh	r3, [r2, #0]
  D3_PIN = d3_pin;
 8006294:	4a25      	ldr	r2, [pc, #148]	; (800632c <lcd16x2_init_8bits+0xd8>)
 8006296:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006298:	8013      	strh	r3, [r2, #0]
  PORT_MSB = port_4_7;
 800629a:	4a25      	ldr	r2, [pc, #148]	; (8006330 <lcd16x2_init_8bits+0xdc>)
 800629c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629e:	6013      	str	r3, [r2, #0]
  D4_PIN = d4_pin;
 80062a0:	4a24      	ldr	r2, [pc, #144]	; (8006334 <lcd16x2_init_8bits+0xe0>)
 80062a2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80062a4:	8013      	strh	r3, [r2, #0]
  D5_PIN = d5_pin;
 80062a6:	4a24      	ldr	r2, [pc, #144]	; (8006338 <lcd16x2_init_8bits+0xe4>)
 80062a8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80062aa:	8013      	strh	r3, [r2, #0]
  D6_PIN = d6_pin;
 80062ac:	4a23      	ldr	r2, [pc, #140]	; (800633c <lcd16x2_init_8bits+0xe8>)
 80062ae:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80062b0:	8013      	strh	r3, [r2, #0]
  D7_PIN = d7_pin;
 80062b2:	4a23      	ldr	r2, [pc, #140]	; (8006340 <lcd16x2_init_8bits+0xec>)
 80062b4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80062b6:	8013      	strh	r3, [r2, #0]
  is8BitsMode = true;
 80062b8:	4b22      	ldr	r3, [pc, #136]	; (8006344 <lcd16x2_init_8bits+0xf0>)
 80062ba:	2201      	movs	r2, #1
 80062bc:	701a      	strb	r2, [r3, #0]
  FunctionSet = 0x38;
 80062be:	4b22      	ldr	r3, [pc, #136]	; (8006348 <lcd16x2_init_8bits+0xf4>)
 80062c0:	2238      	movs	r2, #56	; 0x38
 80062c2:	701a      	strb	r2, [r3, #0]

  //Initialise LCD
  //1. Wait at least 15ms
  LCD_MS_DELAY(20);
 80062c4:	2014      	movs	r0, #20
 80062c6:	f7fa fead 	bl	8001024 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_writeCommand(0x30);
 80062ca:	2030      	movs	r0, #48	; 0x30
 80062cc:	f7ff ffb2 	bl	8006234 <lcd16x2_writeCommand>
  LCD_MS_DELAY(5);
 80062d0:	2005      	movs	r0, #5
 80062d2:	f7fa fea7 	bl	8001024 <HAL_Delay>
  lcd16x2_writeCommand(0x30);
 80062d6:	2030      	movs	r0, #48	; 0x30
 80062d8:	f7ff ffac 	bl	8006234 <lcd16x2_writeCommand>
  LCD_MS_DELAY(1);
 80062dc:	2001      	movs	r0, #1
 80062de:	f7fa fea1 	bl	8001024 <HAL_Delay>
  lcd16x2_writeCommand(0x30);
 80062e2:	2030      	movs	r0, #48	; 0x30
 80062e4:	f7ff ffa6 	bl	8006234 <lcd16x2_writeCommand>
  LCD_MS_DELAY(1);
 80062e8:	2001      	movs	r0, #1
 80062ea:	f7fa fe9b 	bl	8001024 <HAL_Delay>
  //3. Function set; Enable 2 lines, Data length to 8 bits
  lcd16x2_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N | LCD_FUNCTION_DL);
 80062ee:	2038      	movs	r0, #56	; 0x38
 80062f0:	f7ff ffa0 	bl	8006234 <lcd16x2_writeCommand>
  //4. Display control (Display ON, Cursor ON, blink cursor)
  lcd16x2_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 80062f4:	200f      	movs	r0, #15
 80062f6:	f7ff ff9d 	bl	8006234 <lcd16x2_writeCommand>
  //5. Clear LCD and return home
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 80062fa:	2001      	movs	r0, #1
 80062fc:	f7ff ff9a 	bl	8006234 <lcd16x2_writeCommand>
  LCD_MS_DELAY(2);
 8006300:	2002      	movs	r0, #2
 8006302:	f7fa fe8f 	bl	8001024 <HAL_Delay>
}
 8006306:	bf00      	nop
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	20000208 	.word	0x20000208
 8006314:	2000020c 	.word	0x2000020c
 8006318:	2000020e 	.word	0x2000020e
 800631c:	20000210 	.word	0x20000210
 8006320:	20000214 	.word	0x20000214
 8006324:	20000216 	.word	0x20000216
 8006328:	20000218 	.word	0x20000218
 800632c:	2000021a 	.word	0x2000021a
 8006330:	2000021c 	.word	0x2000021c
 8006334:	20000220 	.word	0x20000220
 8006338:	20000222 	.word	0x20000222
 800633c:	20000224 	.word	0x20000224
 8006340:	20000226 	.word	0x20000226
 8006344:	20000010 	.word	0x20000010
 8006348:	20000012 	.word	0x20000012

0800634c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800634c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006384 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006350:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006352:	e003      	b.n	800635c <LoopCopyDataInit>

08006354 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006354:	4b0c      	ldr	r3, [pc, #48]	; (8006388 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006356:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006358:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800635a:	3104      	adds	r1, #4

0800635c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800635c:	480b      	ldr	r0, [pc, #44]	; (800638c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800635e:	4b0c      	ldr	r3, [pc, #48]	; (8006390 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006360:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006362:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006364:	d3f6      	bcc.n	8006354 <CopyDataInit>
  ldr  r2, =_sbss
 8006366:	4a0b      	ldr	r2, [pc, #44]	; (8006394 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006368:	e002      	b.n	8006370 <LoopFillZerobss>

0800636a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800636a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800636c:	f842 3b04 	str.w	r3, [r2], #4

08006370 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006370:	4b09      	ldr	r3, [pc, #36]	; (8006398 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006372:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006374:	d3f9      	bcc.n	800636a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006376:	f7ff fbff 	bl	8005b78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800637a:	f000 f817 	bl	80063ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800637e:	f7fe fcfb 	bl	8004d78 <main>
  bx  lr    
 8006382:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006384:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006388:	080091cc 	.word	0x080091cc
  ldr  r0, =_sdata
 800638c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006390:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8006394:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8006398:	200003fc 	.word	0x200003fc

0800639c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800639c:	e7fe      	b.n	800639c <ADC_IRQHandler>
	...

080063a0 <__errno>:
 80063a0:	4b01      	ldr	r3, [pc, #4]	; (80063a8 <__errno+0x8>)
 80063a2:	6818      	ldr	r0, [r3, #0]
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	20000014 	.word	0x20000014

080063ac <__libc_init_array>:
 80063ac:	b570      	push	{r4, r5, r6, lr}
 80063ae:	4d0d      	ldr	r5, [pc, #52]	; (80063e4 <__libc_init_array+0x38>)
 80063b0:	4c0d      	ldr	r4, [pc, #52]	; (80063e8 <__libc_init_array+0x3c>)
 80063b2:	1b64      	subs	r4, r4, r5
 80063b4:	10a4      	asrs	r4, r4, #2
 80063b6:	2600      	movs	r6, #0
 80063b8:	42a6      	cmp	r6, r4
 80063ba:	d109      	bne.n	80063d0 <__libc_init_array+0x24>
 80063bc:	4d0b      	ldr	r5, [pc, #44]	; (80063ec <__libc_init_array+0x40>)
 80063be:	4c0c      	ldr	r4, [pc, #48]	; (80063f0 <__libc_init_array+0x44>)
 80063c0:	f002 fcf0 	bl	8008da4 <_init>
 80063c4:	1b64      	subs	r4, r4, r5
 80063c6:	10a4      	asrs	r4, r4, #2
 80063c8:	2600      	movs	r6, #0
 80063ca:	42a6      	cmp	r6, r4
 80063cc:	d105      	bne.n	80063da <__libc_init_array+0x2e>
 80063ce:	bd70      	pop	{r4, r5, r6, pc}
 80063d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80063d4:	4798      	blx	r3
 80063d6:	3601      	adds	r6, #1
 80063d8:	e7ee      	b.n	80063b8 <__libc_init_array+0xc>
 80063da:	f855 3b04 	ldr.w	r3, [r5], #4
 80063de:	4798      	blx	r3
 80063e0:	3601      	adds	r6, #1
 80063e2:	e7f2      	b.n	80063ca <__libc_init_array+0x1e>
 80063e4:	080091c4 	.word	0x080091c4
 80063e8:	080091c4 	.word	0x080091c4
 80063ec:	080091c4 	.word	0x080091c4
 80063f0:	080091c8 	.word	0x080091c8

080063f4 <memset>:
 80063f4:	4402      	add	r2, r0
 80063f6:	4603      	mov	r3, r0
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d100      	bne.n	80063fe <memset+0xa>
 80063fc:	4770      	bx	lr
 80063fe:	f803 1b01 	strb.w	r1, [r3], #1
 8006402:	e7f9      	b.n	80063f8 <memset+0x4>

08006404 <__cvt>:
 8006404:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006408:	ec55 4b10 	vmov	r4, r5, d0
 800640c:	2d00      	cmp	r5, #0
 800640e:	460e      	mov	r6, r1
 8006410:	4619      	mov	r1, r3
 8006412:	462b      	mov	r3, r5
 8006414:	bfbb      	ittet	lt
 8006416:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800641a:	461d      	movlt	r5, r3
 800641c:	2300      	movge	r3, #0
 800641e:	232d      	movlt	r3, #45	; 0x2d
 8006420:	700b      	strb	r3, [r1, #0]
 8006422:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006424:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006428:	4691      	mov	r9, r2
 800642a:	f023 0820 	bic.w	r8, r3, #32
 800642e:	bfbc      	itt	lt
 8006430:	4622      	movlt	r2, r4
 8006432:	4614      	movlt	r4, r2
 8006434:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006438:	d005      	beq.n	8006446 <__cvt+0x42>
 800643a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800643e:	d100      	bne.n	8006442 <__cvt+0x3e>
 8006440:	3601      	adds	r6, #1
 8006442:	2102      	movs	r1, #2
 8006444:	e000      	b.n	8006448 <__cvt+0x44>
 8006446:	2103      	movs	r1, #3
 8006448:	ab03      	add	r3, sp, #12
 800644a:	9301      	str	r3, [sp, #4]
 800644c:	ab02      	add	r3, sp, #8
 800644e:	9300      	str	r3, [sp, #0]
 8006450:	ec45 4b10 	vmov	d0, r4, r5
 8006454:	4653      	mov	r3, sl
 8006456:	4632      	mov	r2, r6
 8006458:	f000 fcca 	bl	8006df0 <_dtoa_r>
 800645c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006460:	4607      	mov	r7, r0
 8006462:	d102      	bne.n	800646a <__cvt+0x66>
 8006464:	f019 0f01 	tst.w	r9, #1
 8006468:	d022      	beq.n	80064b0 <__cvt+0xac>
 800646a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800646e:	eb07 0906 	add.w	r9, r7, r6
 8006472:	d110      	bne.n	8006496 <__cvt+0x92>
 8006474:	783b      	ldrb	r3, [r7, #0]
 8006476:	2b30      	cmp	r3, #48	; 0x30
 8006478:	d10a      	bne.n	8006490 <__cvt+0x8c>
 800647a:	2200      	movs	r2, #0
 800647c:	2300      	movs	r3, #0
 800647e:	4620      	mov	r0, r4
 8006480:	4629      	mov	r1, r5
 8006482:	f7fa fb21 	bl	8000ac8 <__aeabi_dcmpeq>
 8006486:	b918      	cbnz	r0, 8006490 <__cvt+0x8c>
 8006488:	f1c6 0601 	rsb	r6, r6, #1
 800648c:	f8ca 6000 	str.w	r6, [sl]
 8006490:	f8da 3000 	ldr.w	r3, [sl]
 8006494:	4499      	add	r9, r3
 8006496:	2200      	movs	r2, #0
 8006498:	2300      	movs	r3, #0
 800649a:	4620      	mov	r0, r4
 800649c:	4629      	mov	r1, r5
 800649e:	f7fa fb13 	bl	8000ac8 <__aeabi_dcmpeq>
 80064a2:	b108      	cbz	r0, 80064a8 <__cvt+0xa4>
 80064a4:	f8cd 900c 	str.w	r9, [sp, #12]
 80064a8:	2230      	movs	r2, #48	; 0x30
 80064aa:	9b03      	ldr	r3, [sp, #12]
 80064ac:	454b      	cmp	r3, r9
 80064ae:	d307      	bcc.n	80064c0 <__cvt+0xbc>
 80064b0:	9b03      	ldr	r3, [sp, #12]
 80064b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064b4:	1bdb      	subs	r3, r3, r7
 80064b6:	4638      	mov	r0, r7
 80064b8:	6013      	str	r3, [r2, #0]
 80064ba:	b004      	add	sp, #16
 80064bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064c0:	1c59      	adds	r1, r3, #1
 80064c2:	9103      	str	r1, [sp, #12]
 80064c4:	701a      	strb	r2, [r3, #0]
 80064c6:	e7f0      	b.n	80064aa <__cvt+0xa6>

080064c8 <__exponent>:
 80064c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064ca:	4603      	mov	r3, r0
 80064cc:	2900      	cmp	r1, #0
 80064ce:	bfb8      	it	lt
 80064d0:	4249      	neglt	r1, r1
 80064d2:	f803 2b02 	strb.w	r2, [r3], #2
 80064d6:	bfb4      	ite	lt
 80064d8:	222d      	movlt	r2, #45	; 0x2d
 80064da:	222b      	movge	r2, #43	; 0x2b
 80064dc:	2909      	cmp	r1, #9
 80064de:	7042      	strb	r2, [r0, #1]
 80064e0:	dd2a      	ble.n	8006538 <__exponent+0x70>
 80064e2:	f10d 0407 	add.w	r4, sp, #7
 80064e6:	46a4      	mov	ip, r4
 80064e8:	270a      	movs	r7, #10
 80064ea:	46a6      	mov	lr, r4
 80064ec:	460a      	mov	r2, r1
 80064ee:	fb91 f6f7 	sdiv	r6, r1, r7
 80064f2:	fb07 1516 	mls	r5, r7, r6, r1
 80064f6:	3530      	adds	r5, #48	; 0x30
 80064f8:	2a63      	cmp	r2, #99	; 0x63
 80064fa:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80064fe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006502:	4631      	mov	r1, r6
 8006504:	dcf1      	bgt.n	80064ea <__exponent+0x22>
 8006506:	3130      	adds	r1, #48	; 0x30
 8006508:	f1ae 0502 	sub.w	r5, lr, #2
 800650c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006510:	1c44      	adds	r4, r0, #1
 8006512:	4629      	mov	r1, r5
 8006514:	4561      	cmp	r1, ip
 8006516:	d30a      	bcc.n	800652e <__exponent+0x66>
 8006518:	f10d 0209 	add.w	r2, sp, #9
 800651c:	eba2 020e 	sub.w	r2, r2, lr
 8006520:	4565      	cmp	r5, ip
 8006522:	bf88      	it	hi
 8006524:	2200      	movhi	r2, #0
 8006526:	4413      	add	r3, r2
 8006528:	1a18      	subs	r0, r3, r0
 800652a:	b003      	add	sp, #12
 800652c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800652e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006532:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006536:	e7ed      	b.n	8006514 <__exponent+0x4c>
 8006538:	2330      	movs	r3, #48	; 0x30
 800653a:	3130      	adds	r1, #48	; 0x30
 800653c:	7083      	strb	r3, [r0, #2]
 800653e:	70c1      	strb	r1, [r0, #3]
 8006540:	1d03      	adds	r3, r0, #4
 8006542:	e7f1      	b.n	8006528 <__exponent+0x60>

08006544 <_printf_float>:
 8006544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006548:	ed2d 8b02 	vpush	{d8}
 800654c:	b08d      	sub	sp, #52	; 0x34
 800654e:	460c      	mov	r4, r1
 8006550:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006554:	4616      	mov	r6, r2
 8006556:	461f      	mov	r7, r3
 8006558:	4605      	mov	r5, r0
 800655a:	f001 fa35 	bl	80079c8 <_localeconv_r>
 800655e:	f8d0 a000 	ldr.w	sl, [r0]
 8006562:	4650      	mov	r0, sl
 8006564:	f7f9 fe34 	bl	80001d0 <strlen>
 8006568:	2300      	movs	r3, #0
 800656a:	930a      	str	r3, [sp, #40]	; 0x28
 800656c:	6823      	ldr	r3, [r4, #0]
 800656e:	9305      	str	r3, [sp, #20]
 8006570:	f8d8 3000 	ldr.w	r3, [r8]
 8006574:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006578:	3307      	adds	r3, #7
 800657a:	f023 0307 	bic.w	r3, r3, #7
 800657e:	f103 0208 	add.w	r2, r3, #8
 8006582:	f8c8 2000 	str.w	r2, [r8]
 8006586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800658e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006592:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006596:	9307      	str	r3, [sp, #28]
 8006598:	f8cd 8018 	str.w	r8, [sp, #24]
 800659c:	ee08 0a10 	vmov	s16, r0
 80065a0:	4b9f      	ldr	r3, [pc, #636]	; (8006820 <_printf_float+0x2dc>)
 80065a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065aa:	f7fa fabf 	bl	8000b2c <__aeabi_dcmpun>
 80065ae:	bb88      	cbnz	r0, 8006614 <_printf_float+0xd0>
 80065b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065b4:	4b9a      	ldr	r3, [pc, #616]	; (8006820 <_printf_float+0x2dc>)
 80065b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065ba:	f7fa fa99 	bl	8000af0 <__aeabi_dcmple>
 80065be:	bb48      	cbnz	r0, 8006614 <_printf_float+0xd0>
 80065c0:	2200      	movs	r2, #0
 80065c2:	2300      	movs	r3, #0
 80065c4:	4640      	mov	r0, r8
 80065c6:	4649      	mov	r1, r9
 80065c8:	f7fa fa88 	bl	8000adc <__aeabi_dcmplt>
 80065cc:	b110      	cbz	r0, 80065d4 <_printf_float+0x90>
 80065ce:	232d      	movs	r3, #45	; 0x2d
 80065d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065d4:	4b93      	ldr	r3, [pc, #588]	; (8006824 <_printf_float+0x2e0>)
 80065d6:	4894      	ldr	r0, [pc, #592]	; (8006828 <_printf_float+0x2e4>)
 80065d8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80065dc:	bf94      	ite	ls
 80065de:	4698      	movls	r8, r3
 80065e0:	4680      	movhi	r8, r0
 80065e2:	2303      	movs	r3, #3
 80065e4:	6123      	str	r3, [r4, #16]
 80065e6:	9b05      	ldr	r3, [sp, #20]
 80065e8:	f023 0204 	bic.w	r2, r3, #4
 80065ec:	6022      	str	r2, [r4, #0]
 80065ee:	f04f 0900 	mov.w	r9, #0
 80065f2:	9700      	str	r7, [sp, #0]
 80065f4:	4633      	mov	r3, r6
 80065f6:	aa0b      	add	r2, sp, #44	; 0x2c
 80065f8:	4621      	mov	r1, r4
 80065fa:	4628      	mov	r0, r5
 80065fc:	f000 f9d8 	bl	80069b0 <_printf_common>
 8006600:	3001      	adds	r0, #1
 8006602:	f040 8090 	bne.w	8006726 <_printf_float+0x1e2>
 8006606:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800660a:	b00d      	add	sp, #52	; 0x34
 800660c:	ecbd 8b02 	vpop	{d8}
 8006610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006614:	4642      	mov	r2, r8
 8006616:	464b      	mov	r3, r9
 8006618:	4640      	mov	r0, r8
 800661a:	4649      	mov	r1, r9
 800661c:	f7fa fa86 	bl	8000b2c <__aeabi_dcmpun>
 8006620:	b140      	cbz	r0, 8006634 <_printf_float+0xf0>
 8006622:	464b      	mov	r3, r9
 8006624:	2b00      	cmp	r3, #0
 8006626:	bfbc      	itt	lt
 8006628:	232d      	movlt	r3, #45	; 0x2d
 800662a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800662e:	487f      	ldr	r0, [pc, #508]	; (800682c <_printf_float+0x2e8>)
 8006630:	4b7f      	ldr	r3, [pc, #508]	; (8006830 <_printf_float+0x2ec>)
 8006632:	e7d1      	b.n	80065d8 <_printf_float+0x94>
 8006634:	6863      	ldr	r3, [r4, #4]
 8006636:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800663a:	9206      	str	r2, [sp, #24]
 800663c:	1c5a      	adds	r2, r3, #1
 800663e:	d13f      	bne.n	80066c0 <_printf_float+0x17c>
 8006640:	2306      	movs	r3, #6
 8006642:	6063      	str	r3, [r4, #4]
 8006644:	9b05      	ldr	r3, [sp, #20]
 8006646:	6861      	ldr	r1, [r4, #4]
 8006648:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800664c:	2300      	movs	r3, #0
 800664e:	9303      	str	r3, [sp, #12]
 8006650:	ab0a      	add	r3, sp, #40	; 0x28
 8006652:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006656:	ab09      	add	r3, sp, #36	; 0x24
 8006658:	ec49 8b10 	vmov	d0, r8, r9
 800665c:	9300      	str	r3, [sp, #0]
 800665e:	6022      	str	r2, [r4, #0]
 8006660:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006664:	4628      	mov	r0, r5
 8006666:	f7ff fecd 	bl	8006404 <__cvt>
 800666a:	9b06      	ldr	r3, [sp, #24]
 800666c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800666e:	2b47      	cmp	r3, #71	; 0x47
 8006670:	4680      	mov	r8, r0
 8006672:	d108      	bne.n	8006686 <_printf_float+0x142>
 8006674:	1cc8      	adds	r0, r1, #3
 8006676:	db02      	blt.n	800667e <_printf_float+0x13a>
 8006678:	6863      	ldr	r3, [r4, #4]
 800667a:	4299      	cmp	r1, r3
 800667c:	dd41      	ble.n	8006702 <_printf_float+0x1be>
 800667e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006682:	fa5f fb8b 	uxtb.w	fp, fp
 8006686:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800668a:	d820      	bhi.n	80066ce <_printf_float+0x18a>
 800668c:	3901      	subs	r1, #1
 800668e:	465a      	mov	r2, fp
 8006690:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006694:	9109      	str	r1, [sp, #36]	; 0x24
 8006696:	f7ff ff17 	bl	80064c8 <__exponent>
 800669a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800669c:	1813      	adds	r3, r2, r0
 800669e:	2a01      	cmp	r2, #1
 80066a0:	4681      	mov	r9, r0
 80066a2:	6123      	str	r3, [r4, #16]
 80066a4:	dc02      	bgt.n	80066ac <_printf_float+0x168>
 80066a6:	6822      	ldr	r2, [r4, #0]
 80066a8:	07d2      	lsls	r2, r2, #31
 80066aa:	d501      	bpl.n	80066b0 <_printf_float+0x16c>
 80066ac:	3301      	adds	r3, #1
 80066ae:	6123      	str	r3, [r4, #16]
 80066b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d09c      	beq.n	80065f2 <_printf_float+0xae>
 80066b8:	232d      	movs	r3, #45	; 0x2d
 80066ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066be:	e798      	b.n	80065f2 <_printf_float+0xae>
 80066c0:	9a06      	ldr	r2, [sp, #24]
 80066c2:	2a47      	cmp	r2, #71	; 0x47
 80066c4:	d1be      	bne.n	8006644 <_printf_float+0x100>
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1bc      	bne.n	8006644 <_printf_float+0x100>
 80066ca:	2301      	movs	r3, #1
 80066cc:	e7b9      	b.n	8006642 <_printf_float+0xfe>
 80066ce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80066d2:	d118      	bne.n	8006706 <_printf_float+0x1c2>
 80066d4:	2900      	cmp	r1, #0
 80066d6:	6863      	ldr	r3, [r4, #4]
 80066d8:	dd0b      	ble.n	80066f2 <_printf_float+0x1ae>
 80066da:	6121      	str	r1, [r4, #16]
 80066dc:	b913      	cbnz	r3, 80066e4 <_printf_float+0x1a0>
 80066de:	6822      	ldr	r2, [r4, #0]
 80066e0:	07d0      	lsls	r0, r2, #31
 80066e2:	d502      	bpl.n	80066ea <_printf_float+0x1a6>
 80066e4:	3301      	adds	r3, #1
 80066e6:	440b      	add	r3, r1
 80066e8:	6123      	str	r3, [r4, #16]
 80066ea:	65a1      	str	r1, [r4, #88]	; 0x58
 80066ec:	f04f 0900 	mov.w	r9, #0
 80066f0:	e7de      	b.n	80066b0 <_printf_float+0x16c>
 80066f2:	b913      	cbnz	r3, 80066fa <_printf_float+0x1b6>
 80066f4:	6822      	ldr	r2, [r4, #0]
 80066f6:	07d2      	lsls	r2, r2, #31
 80066f8:	d501      	bpl.n	80066fe <_printf_float+0x1ba>
 80066fa:	3302      	adds	r3, #2
 80066fc:	e7f4      	b.n	80066e8 <_printf_float+0x1a4>
 80066fe:	2301      	movs	r3, #1
 8006700:	e7f2      	b.n	80066e8 <_printf_float+0x1a4>
 8006702:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006708:	4299      	cmp	r1, r3
 800670a:	db05      	blt.n	8006718 <_printf_float+0x1d4>
 800670c:	6823      	ldr	r3, [r4, #0]
 800670e:	6121      	str	r1, [r4, #16]
 8006710:	07d8      	lsls	r0, r3, #31
 8006712:	d5ea      	bpl.n	80066ea <_printf_float+0x1a6>
 8006714:	1c4b      	adds	r3, r1, #1
 8006716:	e7e7      	b.n	80066e8 <_printf_float+0x1a4>
 8006718:	2900      	cmp	r1, #0
 800671a:	bfd4      	ite	le
 800671c:	f1c1 0202 	rsble	r2, r1, #2
 8006720:	2201      	movgt	r2, #1
 8006722:	4413      	add	r3, r2
 8006724:	e7e0      	b.n	80066e8 <_printf_float+0x1a4>
 8006726:	6823      	ldr	r3, [r4, #0]
 8006728:	055a      	lsls	r2, r3, #21
 800672a:	d407      	bmi.n	800673c <_printf_float+0x1f8>
 800672c:	6923      	ldr	r3, [r4, #16]
 800672e:	4642      	mov	r2, r8
 8006730:	4631      	mov	r1, r6
 8006732:	4628      	mov	r0, r5
 8006734:	47b8      	blx	r7
 8006736:	3001      	adds	r0, #1
 8006738:	d12c      	bne.n	8006794 <_printf_float+0x250>
 800673a:	e764      	b.n	8006606 <_printf_float+0xc2>
 800673c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006740:	f240 80e0 	bls.w	8006904 <_printf_float+0x3c0>
 8006744:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006748:	2200      	movs	r2, #0
 800674a:	2300      	movs	r3, #0
 800674c:	f7fa f9bc 	bl	8000ac8 <__aeabi_dcmpeq>
 8006750:	2800      	cmp	r0, #0
 8006752:	d034      	beq.n	80067be <_printf_float+0x27a>
 8006754:	4a37      	ldr	r2, [pc, #220]	; (8006834 <_printf_float+0x2f0>)
 8006756:	2301      	movs	r3, #1
 8006758:	4631      	mov	r1, r6
 800675a:	4628      	mov	r0, r5
 800675c:	47b8      	blx	r7
 800675e:	3001      	adds	r0, #1
 8006760:	f43f af51 	beq.w	8006606 <_printf_float+0xc2>
 8006764:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006768:	429a      	cmp	r2, r3
 800676a:	db02      	blt.n	8006772 <_printf_float+0x22e>
 800676c:	6823      	ldr	r3, [r4, #0]
 800676e:	07d8      	lsls	r0, r3, #31
 8006770:	d510      	bpl.n	8006794 <_printf_float+0x250>
 8006772:	ee18 3a10 	vmov	r3, s16
 8006776:	4652      	mov	r2, sl
 8006778:	4631      	mov	r1, r6
 800677a:	4628      	mov	r0, r5
 800677c:	47b8      	blx	r7
 800677e:	3001      	adds	r0, #1
 8006780:	f43f af41 	beq.w	8006606 <_printf_float+0xc2>
 8006784:	f04f 0800 	mov.w	r8, #0
 8006788:	f104 091a 	add.w	r9, r4, #26
 800678c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800678e:	3b01      	subs	r3, #1
 8006790:	4543      	cmp	r3, r8
 8006792:	dc09      	bgt.n	80067a8 <_printf_float+0x264>
 8006794:	6823      	ldr	r3, [r4, #0]
 8006796:	079b      	lsls	r3, r3, #30
 8006798:	f100 8105 	bmi.w	80069a6 <_printf_float+0x462>
 800679c:	68e0      	ldr	r0, [r4, #12]
 800679e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067a0:	4298      	cmp	r0, r3
 80067a2:	bfb8      	it	lt
 80067a4:	4618      	movlt	r0, r3
 80067a6:	e730      	b.n	800660a <_printf_float+0xc6>
 80067a8:	2301      	movs	r3, #1
 80067aa:	464a      	mov	r2, r9
 80067ac:	4631      	mov	r1, r6
 80067ae:	4628      	mov	r0, r5
 80067b0:	47b8      	blx	r7
 80067b2:	3001      	adds	r0, #1
 80067b4:	f43f af27 	beq.w	8006606 <_printf_float+0xc2>
 80067b8:	f108 0801 	add.w	r8, r8, #1
 80067bc:	e7e6      	b.n	800678c <_printf_float+0x248>
 80067be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	dc39      	bgt.n	8006838 <_printf_float+0x2f4>
 80067c4:	4a1b      	ldr	r2, [pc, #108]	; (8006834 <_printf_float+0x2f0>)
 80067c6:	2301      	movs	r3, #1
 80067c8:	4631      	mov	r1, r6
 80067ca:	4628      	mov	r0, r5
 80067cc:	47b8      	blx	r7
 80067ce:	3001      	adds	r0, #1
 80067d0:	f43f af19 	beq.w	8006606 <_printf_float+0xc2>
 80067d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067d8:	4313      	orrs	r3, r2
 80067da:	d102      	bne.n	80067e2 <_printf_float+0x29e>
 80067dc:	6823      	ldr	r3, [r4, #0]
 80067de:	07d9      	lsls	r1, r3, #31
 80067e0:	d5d8      	bpl.n	8006794 <_printf_float+0x250>
 80067e2:	ee18 3a10 	vmov	r3, s16
 80067e6:	4652      	mov	r2, sl
 80067e8:	4631      	mov	r1, r6
 80067ea:	4628      	mov	r0, r5
 80067ec:	47b8      	blx	r7
 80067ee:	3001      	adds	r0, #1
 80067f0:	f43f af09 	beq.w	8006606 <_printf_float+0xc2>
 80067f4:	f04f 0900 	mov.w	r9, #0
 80067f8:	f104 0a1a 	add.w	sl, r4, #26
 80067fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067fe:	425b      	negs	r3, r3
 8006800:	454b      	cmp	r3, r9
 8006802:	dc01      	bgt.n	8006808 <_printf_float+0x2c4>
 8006804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006806:	e792      	b.n	800672e <_printf_float+0x1ea>
 8006808:	2301      	movs	r3, #1
 800680a:	4652      	mov	r2, sl
 800680c:	4631      	mov	r1, r6
 800680e:	4628      	mov	r0, r5
 8006810:	47b8      	blx	r7
 8006812:	3001      	adds	r0, #1
 8006814:	f43f aef7 	beq.w	8006606 <_printf_float+0xc2>
 8006818:	f109 0901 	add.w	r9, r9, #1
 800681c:	e7ee      	b.n	80067fc <_printf_float+0x2b8>
 800681e:	bf00      	nop
 8006820:	7fefffff 	.word	0x7fefffff
 8006824:	08008ddc 	.word	0x08008ddc
 8006828:	08008de0 	.word	0x08008de0
 800682c:	08008de8 	.word	0x08008de8
 8006830:	08008de4 	.word	0x08008de4
 8006834:	08008dec 	.word	0x08008dec
 8006838:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800683a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800683c:	429a      	cmp	r2, r3
 800683e:	bfa8      	it	ge
 8006840:	461a      	movge	r2, r3
 8006842:	2a00      	cmp	r2, #0
 8006844:	4691      	mov	r9, r2
 8006846:	dc37      	bgt.n	80068b8 <_printf_float+0x374>
 8006848:	f04f 0b00 	mov.w	fp, #0
 800684c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006850:	f104 021a 	add.w	r2, r4, #26
 8006854:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006856:	9305      	str	r3, [sp, #20]
 8006858:	eba3 0309 	sub.w	r3, r3, r9
 800685c:	455b      	cmp	r3, fp
 800685e:	dc33      	bgt.n	80068c8 <_printf_float+0x384>
 8006860:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006864:	429a      	cmp	r2, r3
 8006866:	db3b      	blt.n	80068e0 <_printf_float+0x39c>
 8006868:	6823      	ldr	r3, [r4, #0]
 800686a:	07da      	lsls	r2, r3, #31
 800686c:	d438      	bmi.n	80068e0 <_printf_float+0x39c>
 800686e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006870:	9b05      	ldr	r3, [sp, #20]
 8006872:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	eba2 0901 	sub.w	r9, r2, r1
 800687a:	4599      	cmp	r9, r3
 800687c:	bfa8      	it	ge
 800687e:	4699      	movge	r9, r3
 8006880:	f1b9 0f00 	cmp.w	r9, #0
 8006884:	dc35      	bgt.n	80068f2 <_printf_float+0x3ae>
 8006886:	f04f 0800 	mov.w	r8, #0
 800688a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800688e:	f104 0a1a 	add.w	sl, r4, #26
 8006892:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006896:	1a9b      	subs	r3, r3, r2
 8006898:	eba3 0309 	sub.w	r3, r3, r9
 800689c:	4543      	cmp	r3, r8
 800689e:	f77f af79 	ble.w	8006794 <_printf_float+0x250>
 80068a2:	2301      	movs	r3, #1
 80068a4:	4652      	mov	r2, sl
 80068a6:	4631      	mov	r1, r6
 80068a8:	4628      	mov	r0, r5
 80068aa:	47b8      	blx	r7
 80068ac:	3001      	adds	r0, #1
 80068ae:	f43f aeaa 	beq.w	8006606 <_printf_float+0xc2>
 80068b2:	f108 0801 	add.w	r8, r8, #1
 80068b6:	e7ec      	b.n	8006892 <_printf_float+0x34e>
 80068b8:	4613      	mov	r3, r2
 80068ba:	4631      	mov	r1, r6
 80068bc:	4642      	mov	r2, r8
 80068be:	4628      	mov	r0, r5
 80068c0:	47b8      	blx	r7
 80068c2:	3001      	adds	r0, #1
 80068c4:	d1c0      	bne.n	8006848 <_printf_float+0x304>
 80068c6:	e69e      	b.n	8006606 <_printf_float+0xc2>
 80068c8:	2301      	movs	r3, #1
 80068ca:	4631      	mov	r1, r6
 80068cc:	4628      	mov	r0, r5
 80068ce:	9205      	str	r2, [sp, #20]
 80068d0:	47b8      	blx	r7
 80068d2:	3001      	adds	r0, #1
 80068d4:	f43f ae97 	beq.w	8006606 <_printf_float+0xc2>
 80068d8:	9a05      	ldr	r2, [sp, #20]
 80068da:	f10b 0b01 	add.w	fp, fp, #1
 80068de:	e7b9      	b.n	8006854 <_printf_float+0x310>
 80068e0:	ee18 3a10 	vmov	r3, s16
 80068e4:	4652      	mov	r2, sl
 80068e6:	4631      	mov	r1, r6
 80068e8:	4628      	mov	r0, r5
 80068ea:	47b8      	blx	r7
 80068ec:	3001      	adds	r0, #1
 80068ee:	d1be      	bne.n	800686e <_printf_float+0x32a>
 80068f0:	e689      	b.n	8006606 <_printf_float+0xc2>
 80068f2:	9a05      	ldr	r2, [sp, #20]
 80068f4:	464b      	mov	r3, r9
 80068f6:	4442      	add	r2, r8
 80068f8:	4631      	mov	r1, r6
 80068fa:	4628      	mov	r0, r5
 80068fc:	47b8      	blx	r7
 80068fe:	3001      	adds	r0, #1
 8006900:	d1c1      	bne.n	8006886 <_printf_float+0x342>
 8006902:	e680      	b.n	8006606 <_printf_float+0xc2>
 8006904:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006906:	2a01      	cmp	r2, #1
 8006908:	dc01      	bgt.n	800690e <_printf_float+0x3ca>
 800690a:	07db      	lsls	r3, r3, #31
 800690c:	d538      	bpl.n	8006980 <_printf_float+0x43c>
 800690e:	2301      	movs	r3, #1
 8006910:	4642      	mov	r2, r8
 8006912:	4631      	mov	r1, r6
 8006914:	4628      	mov	r0, r5
 8006916:	47b8      	blx	r7
 8006918:	3001      	adds	r0, #1
 800691a:	f43f ae74 	beq.w	8006606 <_printf_float+0xc2>
 800691e:	ee18 3a10 	vmov	r3, s16
 8006922:	4652      	mov	r2, sl
 8006924:	4631      	mov	r1, r6
 8006926:	4628      	mov	r0, r5
 8006928:	47b8      	blx	r7
 800692a:	3001      	adds	r0, #1
 800692c:	f43f ae6b 	beq.w	8006606 <_printf_float+0xc2>
 8006930:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006934:	2200      	movs	r2, #0
 8006936:	2300      	movs	r3, #0
 8006938:	f7fa f8c6 	bl	8000ac8 <__aeabi_dcmpeq>
 800693c:	b9d8      	cbnz	r0, 8006976 <_printf_float+0x432>
 800693e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006940:	f108 0201 	add.w	r2, r8, #1
 8006944:	3b01      	subs	r3, #1
 8006946:	4631      	mov	r1, r6
 8006948:	4628      	mov	r0, r5
 800694a:	47b8      	blx	r7
 800694c:	3001      	adds	r0, #1
 800694e:	d10e      	bne.n	800696e <_printf_float+0x42a>
 8006950:	e659      	b.n	8006606 <_printf_float+0xc2>
 8006952:	2301      	movs	r3, #1
 8006954:	4652      	mov	r2, sl
 8006956:	4631      	mov	r1, r6
 8006958:	4628      	mov	r0, r5
 800695a:	47b8      	blx	r7
 800695c:	3001      	adds	r0, #1
 800695e:	f43f ae52 	beq.w	8006606 <_printf_float+0xc2>
 8006962:	f108 0801 	add.w	r8, r8, #1
 8006966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006968:	3b01      	subs	r3, #1
 800696a:	4543      	cmp	r3, r8
 800696c:	dcf1      	bgt.n	8006952 <_printf_float+0x40e>
 800696e:	464b      	mov	r3, r9
 8006970:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006974:	e6dc      	b.n	8006730 <_printf_float+0x1ec>
 8006976:	f04f 0800 	mov.w	r8, #0
 800697a:	f104 0a1a 	add.w	sl, r4, #26
 800697e:	e7f2      	b.n	8006966 <_printf_float+0x422>
 8006980:	2301      	movs	r3, #1
 8006982:	4642      	mov	r2, r8
 8006984:	e7df      	b.n	8006946 <_printf_float+0x402>
 8006986:	2301      	movs	r3, #1
 8006988:	464a      	mov	r2, r9
 800698a:	4631      	mov	r1, r6
 800698c:	4628      	mov	r0, r5
 800698e:	47b8      	blx	r7
 8006990:	3001      	adds	r0, #1
 8006992:	f43f ae38 	beq.w	8006606 <_printf_float+0xc2>
 8006996:	f108 0801 	add.w	r8, r8, #1
 800699a:	68e3      	ldr	r3, [r4, #12]
 800699c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800699e:	1a5b      	subs	r3, r3, r1
 80069a0:	4543      	cmp	r3, r8
 80069a2:	dcf0      	bgt.n	8006986 <_printf_float+0x442>
 80069a4:	e6fa      	b.n	800679c <_printf_float+0x258>
 80069a6:	f04f 0800 	mov.w	r8, #0
 80069aa:	f104 0919 	add.w	r9, r4, #25
 80069ae:	e7f4      	b.n	800699a <_printf_float+0x456>

080069b0 <_printf_common>:
 80069b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069b4:	4616      	mov	r6, r2
 80069b6:	4699      	mov	r9, r3
 80069b8:	688a      	ldr	r2, [r1, #8]
 80069ba:	690b      	ldr	r3, [r1, #16]
 80069bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069c0:	4293      	cmp	r3, r2
 80069c2:	bfb8      	it	lt
 80069c4:	4613      	movlt	r3, r2
 80069c6:	6033      	str	r3, [r6, #0]
 80069c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069cc:	4607      	mov	r7, r0
 80069ce:	460c      	mov	r4, r1
 80069d0:	b10a      	cbz	r2, 80069d6 <_printf_common+0x26>
 80069d2:	3301      	adds	r3, #1
 80069d4:	6033      	str	r3, [r6, #0]
 80069d6:	6823      	ldr	r3, [r4, #0]
 80069d8:	0699      	lsls	r1, r3, #26
 80069da:	bf42      	ittt	mi
 80069dc:	6833      	ldrmi	r3, [r6, #0]
 80069de:	3302      	addmi	r3, #2
 80069e0:	6033      	strmi	r3, [r6, #0]
 80069e2:	6825      	ldr	r5, [r4, #0]
 80069e4:	f015 0506 	ands.w	r5, r5, #6
 80069e8:	d106      	bne.n	80069f8 <_printf_common+0x48>
 80069ea:	f104 0a19 	add.w	sl, r4, #25
 80069ee:	68e3      	ldr	r3, [r4, #12]
 80069f0:	6832      	ldr	r2, [r6, #0]
 80069f2:	1a9b      	subs	r3, r3, r2
 80069f4:	42ab      	cmp	r3, r5
 80069f6:	dc26      	bgt.n	8006a46 <_printf_common+0x96>
 80069f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80069fc:	1e13      	subs	r3, r2, #0
 80069fe:	6822      	ldr	r2, [r4, #0]
 8006a00:	bf18      	it	ne
 8006a02:	2301      	movne	r3, #1
 8006a04:	0692      	lsls	r2, r2, #26
 8006a06:	d42b      	bmi.n	8006a60 <_printf_common+0xb0>
 8006a08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a0c:	4649      	mov	r1, r9
 8006a0e:	4638      	mov	r0, r7
 8006a10:	47c0      	blx	r8
 8006a12:	3001      	adds	r0, #1
 8006a14:	d01e      	beq.n	8006a54 <_printf_common+0xa4>
 8006a16:	6823      	ldr	r3, [r4, #0]
 8006a18:	68e5      	ldr	r5, [r4, #12]
 8006a1a:	6832      	ldr	r2, [r6, #0]
 8006a1c:	f003 0306 	and.w	r3, r3, #6
 8006a20:	2b04      	cmp	r3, #4
 8006a22:	bf08      	it	eq
 8006a24:	1aad      	subeq	r5, r5, r2
 8006a26:	68a3      	ldr	r3, [r4, #8]
 8006a28:	6922      	ldr	r2, [r4, #16]
 8006a2a:	bf0c      	ite	eq
 8006a2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a30:	2500      	movne	r5, #0
 8006a32:	4293      	cmp	r3, r2
 8006a34:	bfc4      	itt	gt
 8006a36:	1a9b      	subgt	r3, r3, r2
 8006a38:	18ed      	addgt	r5, r5, r3
 8006a3a:	2600      	movs	r6, #0
 8006a3c:	341a      	adds	r4, #26
 8006a3e:	42b5      	cmp	r5, r6
 8006a40:	d11a      	bne.n	8006a78 <_printf_common+0xc8>
 8006a42:	2000      	movs	r0, #0
 8006a44:	e008      	b.n	8006a58 <_printf_common+0xa8>
 8006a46:	2301      	movs	r3, #1
 8006a48:	4652      	mov	r2, sl
 8006a4a:	4649      	mov	r1, r9
 8006a4c:	4638      	mov	r0, r7
 8006a4e:	47c0      	blx	r8
 8006a50:	3001      	adds	r0, #1
 8006a52:	d103      	bne.n	8006a5c <_printf_common+0xac>
 8006a54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a5c:	3501      	adds	r5, #1
 8006a5e:	e7c6      	b.n	80069ee <_printf_common+0x3e>
 8006a60:	18e1      	adds	r1, r4, r3
 8006a62:	1c5a      	adds	r2, r3, #1
 8006a64:	2030      	movs	r0, #48	; 0x30
 8006a66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a6a:	4422      	add	r2, r4
 8006a6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a74:	3302      	adds	r3, #2
 8006a76:	e7c7      	b.n	8006a08 <_printf_common+0x58>
 8006a78:	2301      	movs	r3, #1
 8006a7a:	4622      	mov	r2, r4
 8006a7c:	4649      	mov	r1, r9
 8006a7e:	4638      	mov	r0, r7
 8006a80:	47c0      	blx	r8
 8006a82:	3001      	adds	r0, #1
 8006a84:	d0e6      	beq.n	8006a54 <_printf_common+0xa4>
 8006a86:	3601      	adds	r6, #1
 8006a88:	e7d9      	b.n	8006a3e <_printf_common+0x8e>
	...

08006a8c <_printf_i>:
 8006a8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a90:	460c      	mov	r4, r1
 8006a92:	4691      	mov	r9, r2
 8006a94:	7e27      	ldrb	r7, [r4, #24]
 8006a96:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006a98:	2f78      	cmp	r7, #120	; 0x78
 8006a9a:	4680      	mov	r8, r0
 8006a9c:	469a      	mov	sl, r3
 8006a9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006aa2:	d807      	bhi.n	8006ab4 <_printf_i+0x28>
 8006aa4:	2f62      	cmp	r7, #98	; 0x62
 8006aa6:	d80a      	bhi.n	8006abe <_printf_i+0x32>
 8006aa8:	2f00      	cmp	r7, #0
 8006aaa:	f000 80d8 	beq.w	8006c5e <_printf_i+0x1d2>
 8006aae:	2f58      	cmp	r7, #88	; 0x58
 8006ab0:	f000 80a3 	beq.w	8006bfa <_printf_i+0x16e>
 8006ab4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006ab8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006abc:	e03a      	b.n	8006b34 <_printf_i+0xa8>
 8006abe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006ac2:	2b15      	cmp	r3, #21
 8006ac4:	d8f6      	bhi.n	8006ab4 <_printf_i+0x28>
 8006ac6:	a001      	add	r0, pc, #4	; (adr r0, 8006acc <_printf_i+0x40>)
 8006ac8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006acc:	08006b25 	.word	0x08006b25
 8006ad0:	08006b39 	.word	0x08006b39
 8006ad4:	08006ab5 	.word	0x08006ab5
 8006ad8:	08006ab5 	.word	0x08006ab5
 8006adc:	08006ab5 	.word	0x08006ab5
 8006ae0:	08006ab5 	.word	0x08006ab5
 8006ae4:	08006b39 	.word	0x08006b39
 8006ae8:	08006ab5 	.word	0x08006ab5
 8006aec:	08006ab5 	.word	0x08006ab5
 8006af0:	08006ab5 	.word	0x08006ab5
 8006af4:	08006ab5 	.word	0x08006ab5
 8006af8:	08006c45 	.word	0x08006c45
 8006afc:	08006b69 	.word	0x08006b69
 8006b00:	08006c27 	.word	0x08006c27
 8006b04:	08006ab5 	.word	0x08006ab5
 8006b08:	08006ab5 	.word	0x08006ab5
 8006b0c:	08006c67 	.word	0x08006c67
 8006b10:	08006ab5 	.word	0x08006ab5
 8006b14:	08006b69 	.word	0x08006b69
 8006b18:	08006ab5 	.word	0x08006ab5
 8006b1c:	08006ab5 	.word	0x08006ab5
 8006b20:	08006c2f 	.word	0x08006c2f
 8006b24:	680b      	ldr	r3, [r1, #0]
 8006b26:	1d1a      	adds	r2, r3, #4
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	600a      	str	r2, [r1, #0]
 8006b2c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006b30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b34:	2301      	movs	r3, #1
 8006b36:	e0a3      	b.n	8006c80 <_printf_i+0x1f4>
 8006b38:	6825      	ldr	r5, [r4, #0]
 8006b3a:	6808      	ldr	r0, [r1, #0]
 8006b3c:	062e      	lsls	r6, r5, #24
 8006b3e:	f100 0304 	add.w	r3, r0, #4
 8006b42:	d50a      	bpl.n	8006b5a <_printf_i+0xce>
 8006b44:	6805      	ldr	r5, [r0, #0]
 8006b46:	600b      	str	r3, [r1, #0]
 8006b48:	2d00      	cmp	r5, #0
 8006b4a:	da03      	bge.n	8006b54 <_printf_i+0xc8>
 8006b4c:	232d      	movs	r3, #45	; 0x2d
 8006b4e:	426d      	negs	r5, r5
 8006b50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b54:	485e      	ldr	r0, [pc, #376]	; (8006cd0 <_printf_i+0x244>)
 8006b56:	230a      	movs	r3, #10
 8006b58:	e019      	b.n	8006b8e <_printf_i+0x102>
 8006b5a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006b5e:	6805      	ldr	r5, [r0, #0]
 8006b60:	600b      	str	r3, [r1, #0]
 8006b62:	bf18      	it	ne
 8006b64:	b22d      	sxthne	r5, r5
 8006b66:	e7ef      	b.n	8006b48 <_printf_i+0xbc>
 8006b68:	680b      	ldr	r3, [r1, #0]
 8006b6a:	6825      	ldr	r5, [r4, #0]
 8006b6c:	1d18      	adds	r0, r3, #4
 8006b6e:	6008      	str	r0, [r1, #0]
 8006b70:	0628      	lsls	r0, r5, #24
 8006b72:	d501      	bpl.n	8006b78 <_printf_i+0xec>
 8006b74:	681d      	ldr	r5, [r3, #0]
 8006b76:	e002      	b.n	8006b7e <_printf_i+0xf2>
 8006b78:	0669      	lsls	r1, r5, #25
 8006b7a:	d5fb      	bpl.n	8006b74 <_printf_i+0xe8>
 8006b7c:	881d      	ldrh	r5, [r3, #0]
 8006b7e:	4854      	ldr	r0, [pc, #336]	; (8006cd0 <_printf_i+0x244>)
 8006b80:	2f6f      	cmp	r7, #111	; 0x6f
 8006b82:	bf0c      	ite	eq
 8006b84:	2308      	moveq	r3, #8
 8006b86:	230a      	movne	r3, #10
 8006b88:	2100      	movs	r1, #0
 8006b8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b8e:	6866      	ldr	r6, [r4, #4]
 8006b90:	60a6      	str	r6, [r4, #8]
 8006b92:	2e00      	cmp	r6, #0
 8006b94:	bfa2      	ittt	ge
 8006b96:	6821      	ldrge	r1, [r4, #0]
 8006b98:	f021 0104 	bicge.w	r1, r1, #4
 8006b9c:	6021      	strge	r1, [r4, #0]
 8006b9e:	b90d      	cbnz	r5, 8006ba4 <_printf_i+0x118>
 8006ba0:	2e00      	cmp	r6, #0
 8006ba2:	d04d      	beq.n	8006c40 <_printf_i+0x1b4>
 8006ba4:	4616      	mov	r6, r2
 8006ba6:	fbb5 f1f3 	udiv	r1, r5, r3
 8006baa:	fb03 5711 	mls	r7, r3, r1, r5
 8006bae:	5dc7      	ldrb	r7, [r0, r7]
 8006bb0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006bb4:	462f      	mov	r7, r5
 8006bb6:	42bb      	cmp	r3, r7
 8006bb8:	460d      	mov	r5, r1
 8006bba:	d9f4      	bls.n	8006ba6 <_printf_i+0x11a>
 8006bbc:	2b08      	cmp	r3, #8
 8006bbe:	d10b      	bne.n	8006bd8 <_printf_i+0x14c>
 8006bc0:	6823      	ldr	r3, [r4, #0]
 8006bc2:	07df      	lsls	r7, r3, #31
 8006bc4:	d508      	bpl.n	8006bd8 <_printf_i+0x14c>
 8006bc6:	6923      	ldr	r3, [r4, #16]
 8006bc8:	6861      	ldr	r1, [r4, #4]
 8006bca:	4299      	cmp	r1, r3
 8006bcc:	bfde      	ittt	le
 8006bce:	2330      	movle	r3, #48	; 0x30
 8006bd0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006bd4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006bd8:	1b92      	subs	r2, r2, r6
 8006bda:	6122      	str	r2, [r4, #16]
 8006bdc:	f8cd a000 	str.w	sl, [sp]
 8006be0:	464b      	mov	r3, r9
 8006be2:	aa03      	add	r2, sp, #12
 8006be4:	4621      	mov	r1, r4
 8006be6:	4640      	mov	r0, r8
 8006be8:	f7ff fee2 	bl	80069b0 <_printf_common>
 8006bec:	3001      	adds	r0, #1
 8006bee:	d14c      	bne.n	8006c8a <_printf_i+0x1fe>
 8006bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bf4:	b004      	add	sp, #16
 8006bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bfa:	4835      	ldr	r0, [pc, #212]	; (8006cd0 <_printf_i+0x244>)
 8006bfc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006c00:	6823      	ldr	r3, [r4, #0]
 8006c02:	680e      	ldr	r6, [r1, #0]
 8006c04:	061f      	lsls	r7, r3, #24
 8006c06:	f856 5b04 	ldr.w	r5, [r6], #4
 8006c0a:	600e      	str	r6, [r1, #0]
 8006c0c:	d514      	bpl.n	8006c38 <_printf_i+0x1ac>
 8006c0e:	07d9      	lsls	r1, r3, #31
 8006c10:	bf44      	itt	mi
 8006c12:	f043 0320 	orrmi.w	r3, r3, #32
 8006c16:	6023      	strmi	r3, [r4, #0]
 8006c18:	b91d      	cbnz	r5, 8006c22 <_printf_i+0x196>
 8006c1a:	6823      	ldr	r3, [r4, #0]
 8006c1c:	f023 0320 	bic.w	r3, r3, #32
 8006c20:	6023      	str	r3, [r4, #0]
 8006c22:	2310      	movs	r3, #16
 8006c24:	e7b0      	b.n	8006b88 <_printf_i+0xfc>
 8006c26:	6823      	ldr	r3, [r4, #0]
 8006c28:	f043 0320 	orr.w	r3, r3, #32
 8006c2c:	6023      	str	r3, [r4, #0]
 8006c2e:	2378      	movs	r3, #120	; 0x78
 8006c30:	4828      	ldr	r0, [pc, #160]	; (8006cd4 <_printf_i+0x248>)
 8006c32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c36:	e7e3      	b.n	8006c00 <_printf_i+0x174>
 8006c38:	065e      	lsls	r6, r3, #25
 8006c3a:	bf48      	it	mi
 8006c3c:	b2ad      	uxthmi	r5, r5
 8006c3e:	e7e6      	b.n	8006c0e <_printf_i+0x182>
 8006c40:	4616      	mov	r6, r2
 8006c42:	e7bb      	b.n	8006bbc <_printf_i+0x130>
 8006c44:	680b      	ldr	r3, [r1, #0]
 8006c46:	6826      	ldr	r6, [r4, #0]
 8006c48:	6960      	ldr	r0, [r4, #20]
 8006c4a:	1d1d      	adds	r5, r3, #4
 8006c4c:	600d      	str	r5, [r1, #0]
 8006c4e:	0635      	lsls	r5, r6, #24
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	d501      	bpl.n	8006c58 <_printf_i+0x1cc>
 8006c54:	6018      	str	r0, [r3, #0]
 8006c56:	e002      	b.n	8006c5e <_printf_i+0x1d2>
 8006c58:	0671      	lsls	r1, r6, #25
 8006c5a:	d5fb      	bpl.n	8006c54 <_printf_i+0x1c8>
 8006c5c:	8018      	strh	r0, [r3, #0]
 8006c5e:	2300      	movs	r3, #0
 8006c60:	6123      	str	r3, [r4, #16]
 8006c62:	4616      	mov	r6, r2
 8006c64:	e7ba      	b.n	8006bdc <_printf_i+0x150>
 8006c66:	680b      	ldr	r3, [r1, #0]
 8006c68:	1d1a      	adds	r2, r3, #4
 8006c6a:	600a      	str	r2, [r1, #0]
 8006c6c:	681e      	ldr	r6, [r3, #0]
 8006c6e:	6862      	ldr	r2, [r4, #4]
 8006c70:	2100      	movs	r1, #0
 8006c72:	4630      	mov	r0, r6
 8006c74:	f7f9 fab4 	bl	80001e0 <memchr>
 8006c78:	b108      	cbz	r0, 8006c7e <_printf_i+0x1f2>
 8006c7a:	1b80      	subs	r0, r0, r6
 8006c7c:	6060      	str	r0, [r4, #4]
 8006c7e:	6863      	ldr	r3, [r4, #4]
 8006c80:	6123      	str	r3, [r4, #16]
 8006c82:	2300      	movs	r3, #0
 8006c84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c88:	e7a8      	b.n	8006bdc <_printf_i+0x150>
 8006c8a:	6923      	ldr	r3, [r4, #16]
 8006c8c:	4632      	mov	r2, r6
 8006c8e:	4649      	mov	r1, r9
 8006c90:	4640      	mov	r0, r8
 8006c92:	47d0      	blx	sl
 8006c94:	3001      	adds	r0, #1
 8006c96:	d0ab      	beq.n	8006bf0 <_printf_i+0x164>
 8006c98:	6823      	ldr	r3, [r4, #0]
 8006c9a:	079b      	lsls	r3, r3, #30
 8006c9c:	d413      	bmi.n	8006cc6 <_printf_i+0x23a>
 8006c9e:	68e0      	ldr	r0, [r4, #12]
 8006ca0:	9b03      	ldr	r3, [sp, #12]
 8006ca2:	4298      	cmp	r0, r3
 8006ca4:	bfb8      	it	lt
 8006ca6:	4618      	movlt	r0, r3
 8006ca8:	e7a4      	b.n	8006bf4 <_printf_i+0x168>
 8006caa:	2301      	movs	r3, #1
 8006cac:	4632      	mov	r2, r6
 8006cae:	4649      	mov	r1, r9
 8006cb0:	4640      	mov	r0, r8
 8006cb2:	47d0      	blx	sl
 8006cb4:	3001      	adds	r0, #1
 8006cb6:	d09b      	beq.n	8006bf0 <_printf_i+0x164>
 8006cb8:	3501      	adds	r5, #1
 8006cba:	68e3      	ldr	r3, [r4, #12]
 8006cbc:	9903      	ldr	r1, [sp, #12]
 8006cbe:	1a5b      	subs	r3, r3, r1
 8006cc0:	42ab      	cmp	r3, r5
 8006cc2:	dcf2      	bgt.n	8006caa <_printf_i+0x21e>
 8006cc4:	e7eb      	b.n	8006c9e <_printf_i+0x212>
 8006cc6:	2500      	movs	r5, #0
 8006cc8:	f104 0619 	add.w	r6, r4, #25
 8006ccc:	e7f5      	b.n	8006cba <_printf_i+0x22e>
 8006cce:	bf00      	nop
 8006cd0:	08008dee 	.word	0x08008dee
 8006cd4:	08008dff 	.word	0x08008dff

08006cd8 <quorem>:
 8006cd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cdc:	6903      	ldr	r3, [r0, #16]
 8006cde:	690c      	ldr	r4, [r1, #16]
 8006ce0:	42a3      	cmp	r3, r4
 8006ce2:	4607      	mov	r7, r0
 8006ce4:	f2c0 8081 	blt.w	8006dea <quorem+0x112>
 8006ce8:	3c01      	subs	r4, #1
 8006cea:	f101 0814 	add.w	r8, r1, #20
 8006cee:	f100 0514 	add.w	r5, r0, #20
 8006cf2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006cf6:	9301      	str	r3, [sp, #4]
 8006cf8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006cfc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d00:	3301      	adds	r3, #1
 8006d02:	429a      	cmp	r2, r3
 8006d04:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006d08:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006d0c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d10:	d331      	bcc.n	8006d76 <quorem+0x9e>
 8006d12:	f04f 0e00 	mov.w	lr, #0
 8006d16:	4640      	mov	r0, r8
 8006d18:	46ac      	mov	ip, r5
 8006d1a:	46f2      	mov	sl, lr
 8006d1c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006d20:	b293      	uxth	r3, r2
 8006d22:	fb06 e303 	mla	r3, r6, r3, lr
 8006d26:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	ebaa 0303 	sub.w	r3, sl, r3
 8006d30:	0c12      	lsrs	r2, r2, #16
 8006d32:	f8dc a000 	ldr.w	sl, [ip]
 8006d36:	fb06 e202 	mla	r2, r6, r2, lr
 8006d3a:	fa13 f38a 	uxtah	r3, r3, sl
 8006d3e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006d42:	fa1f fa82 	uxth.w	sl, r2
 8006d46:	f8dc 2000 	ldr.w	r2, [ip]
 8006d4a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006d4e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d58:	4581      	cmp	r9, r0
 8006d5a:	f84c 3b04 	str.w	r3, [ip], #4
 8006d5e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006d62:	d2db      	bcs.n	8006d1c <quorem+0x44>
 8006d64:	f855 300b 	ldr.w	r3, [r5, fp]
 8006d68:	b92b      	cbnz	r3, 8006d76 <quorem+0x9e>
 8006d6a:	9b01      	ldr	r3, [sp, #4]
 8006d6c:	3b04      	subs	r3, #4
 8006d6e:	429d      	cmp	r5, r3
 8006d70:	461a      	mov	r2, r3
 8006d72:	d32e      	bcc.n	8006dd2 <quorem+0xfa>
 8006d74:	613c      	str	r4, [r7, #16]
 8006d76:	4638      	mov	r0, r7
 8006d78:	f001 f8be 	bl	8007ef8 <__mcmp>
 8006d7c:	2800      	cmp	r0, #0
 8006d7e:	db24      	blt.n	8006dca <quorem+0xf2>
 8006d80:	3601      	adds	r6, #1
 8006d82:	4628      	mov	r0, r5
 8006d84:	f04f 0c00 	mov.w	ip, #0
 8006d88:	f858 2b04 	ldr.w	r2, [r8], #4
 8006d8c:	f8d0 e000 	ldr.w	lr, [r0]
 8006d90:	b293      	uxth	r3, r2
 8006d92:	ebac 0303 	sub.w	r3, ip, r3
 8006d96:	0c12      	lsrs	r2, r2, #16
 8006d98:	fa13 f38e 	uxtah	r3, r3, lr
 8006d9c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006da0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006daa:	45c1      	cmp	r9, r8
 8006dac:	f840 3b04 	str.w	r3, [r0], #4
 8006db0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006db4:	d2e8      	bcs.n	8006d88 <quorem+0xb0>
 8006db6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006dba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006dbe:	b922      	cbnz	r2, 8006dca <quorem+0xf2>
 8006dc0:	3b04      	subs	r3, #4
 8006dc2:	429d      	cmp	r5, r3
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	d30a      	bcc.n	8006dde <quorem+0x106>
 8006dc8:	613c      	str	r4, [r7, #16]
 8006dca:	4630      	mov	r0, r6
 8006dcc:	b003      	add	sp, #12
 8006dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dd2:	6812      	ldr	r2, [r2, #0]
 8006dd4:	3b04      	subs	r3, #4
 8006dd6:	2a00      	cmp	r2, #0
 8006dd8:	d1cc      	bne.n	8006d74 <quorem+0x9c>
 8006dda:	3c01      	subs	r4, #1
 8006ddc:	e7c7      	b.n	8006d6e <quorem+0x96>
 8006dde:	6812      	ldr	r2, [r2, #0]
 8006de0:	3b04      	subs	r3, #4
 8006de2:	2a00      	cmp	r2, #0
 8006de4:	d1f0      	bne.n	8006dc8 <quorem+0xf0>
 8006de6:	3c01      	subs	r4, #1
 8006de8:	e7eb      	b.n	8006dc2 <quorem+0xea>
 8006dea:	2000      	movs	r0, #0
 8006dec:	e7ee      	b.n	8006dcc <quorem+0xf4>
	...

08006df0 <_dtoa_r>:
 8006df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006df4:	ed2d 8b02 	vpush	{d8}
 8006df8:	ec57 6b10 	vmov	r6, r7, d0
 8006dfc:	b095      	sub	sp, #84	; 0x54
 8006dfe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006e00:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006e04:	9105      	str	r1, [sp, #20]
 8006e06:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006e0a:	4604      	mov	r4, r0
 8006e0c:	9209      	str	r2, [sp, #36]	; 0x24
 8006e0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e10:	b975      	cbnz	r5, 8006e30 <_dtoa_r+0x40>
 8006e12:	2010      	movs	r0, #16
 8006e14:	f000 fddc 	bl	80079d0 <malloc>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	6260      	str	r0, [r4, #36]	; 0x24
 8006e1c:	b920      	cbnz	r0, 8006e28 <_dtoa_r+0x38>
 8006e1e:	4bb2      	ldr	r3, [pc, #712]	; (80070e8 <_dtoa_r+0x2f8>)
 8006e20:	21ea      	movs	r1, #234	; 0xea
 8006e22:	48b2      	ldr	r0, [pc, #712]	; (80070ec <_dtoa_r+0x2fc>)
 8006e24:	f001 fa32 	bl	800828c <__assert_func>
 8006e28:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006e2c:	6005      	str	r5, [r0, #0]
 8006e2e:	60c5      	str	r5, [r0, #12]
 8006e30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e32:	6819      	ldr	r1, [r3, #0]
 8006e34:	b151      	cbz	r1, 8006e4c <_dtoa_r+0x5c>
 8006e36:	685a      	ldr	r2, [r3, #4]
 8006e38:	604a      	str	r2, [r1, #4]
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	4093      	lsls	r3, r2
 8006e3e:	608b      	str	r3, [r1, #8]
 8006e40:	4620      	mov	r0, r4
 8006e42:	f000 fe1b 	bl	8007a7c <_Bfree>
 8006e46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e48:	2200      	movs	r2, #0
 8006e4a:	601a      	str	r2, [r3, #0]
 8006e4c:	1e3b      	subs	r3, r7, #0
 8006e4e:	bfb9      	ittee	lt
 8006e50:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006e54:	9303      	strlt	r3, [sp, #12]
 8006e56:	2300      	movge	r3, #0
 8006e58:	f8c8 3000 	strge.w	r3, [r8]
 8006e5c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006e60:	4ba3      	ldr	r3, [pc, #652]	; (80070f0 <_dtoa_r+0x300>)
 8006e62:	bfbc      	itt	lt
 8006e64:	2201      	movlt	r2, #1
 8006e66:	f8c8 2000 	strlt.w	r2, [r8]
 8006e6a:	ea33 0309 	bics.w	r3, r3, r9
 8006e6e:	d11b      	bne.n	8006ea8 <_dtoa_r+0xb8>
 8006e70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006e72:	f242 730f 	movw	r3, #9999	; 0x270f
 8006e76:	6013      	str	r3, [r2, #0]
 8006e78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e7c:	4333      	orrs	r3, r6
 8006e7e:	f000 857a 	beq.w	8007976 <_dtoa_r+0xb86>
 8006e82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e84:	b963      	cbnz	r3, 8006ea0 <_dtoa_r+0xb0>
 8006e86:	4b9b      	ldr	r3, [pc, #620]	; (80070f4 <_dtoa_r+0x304>)
 8006e88:	e024      	b.n	8006ed4 <_dtoa_r+0xe4>
 8006e8a:	4b9b      	ldr	r3, [pc, #620]	; (80070f8 <_dtoa_r+0x308>)
 8006e8c:	9300      	str	r3, [sp, #0]
 8006e8e:	3308      	adds	r3, #8
 8006e90:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006e92:	6013      	str	r3, [r2, #0]
 8006e94:	9800      	ldr	r0, [sp, #0]
 8006e96:	b015      	add	sp, #84	; 0x54
 8006e98:	ecbd 8b02 	vpop	{d8}
 8006e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ea0:	4b94      	ldr	r3, [pc, #592]	; (80070f4 <_dtoa_r+0x304>)
 8006ea2:	9300      	str	r3, [sp, #0]
 8006ea4:	3303      	adds	r3, #3
 8006ea6:	e7f3      	b.n	8006e90 <_dtoa_r+0xa0>
 8006ea8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006eac:	2200      	movs	r2, #0
 8006eae:	ec51 0b17 	vmov	r0, r1, d7
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006eb8:	f7f9 fe06 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ebc:	4680      	mov	r8, r0
 8006ebe:	b158      	cbz	r0, 8006ed8 <_dtoa_r+0xe8>
 8006ec0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	6013      	str	r3, [r2, #0]
 8006ec6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f000 8551 	beq.w	8007970 <_dtoa_r+0xb80>
 8006ece:	488b      	ldr	r0, [pc, #556]	; (80070fc <_dtoa_r+0x30c>)
 8006ed0:	6018      	str	r0, [r3, #0]
 8006ed2:	1e43      	subs	r3, r0, #1
 8006ed4:	9300      	str	r3, [sp, #0]
 8006ed6:	e7dd      	b.n	8006e94 <_dtoa_r+0xa4>
 8006ed8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006edc:	aa12      	add	r2, sp, #72	; 0x48
 8006ede:	a913      	add	r1, sp, #76	; 0x4c
 8006ee0:	4620      	mov	r0, r4
 8006ee2:	f001 f8ad 	bl	8008040 <__d2b>
 8006ee6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006eea:	4683      	mov	fp, r0
 8006eec:	2d00      	cmp	r5, #0
 8006eee:	d07c      	beq.n	8006fea <_dtoa_r+0x1fa>
 8006ef0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ef2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006ef6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006efa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006efe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006f02:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006f06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006f0a:	4b7d      	ldr	r3, [pc, #500]	; (8007100 <_dtoa_r+0x310>)
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	4630      	mov	r0, r6
 8006f10:	4639      	mov	r1, r7
 8006f12:	f7f9 f9b9 	bl	8000288 <__aeabi_dsub>
 8006f16:	a36e      	add	r3, pc, #440	; (adr r3, 80070d0 <_dtoa_r+0x2e0>)
 8006f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1c:	f7f9 fb6c 	bl	80005f8 <__aeabi_dmul>
 8006f20:	a36d      	add	r3, pc, #436	; (adr r3, 80070d8 <_dtoa_r+0x2e8>)
 8006f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f26:	f7f9 f9b1 	bl	800028c <__adddf3>
 8006f2a:	4606      	mov	r6, r0
 8006f2c:	4628      	mov	r0, r5
 8006f2e:	460f      	mov	r7, r1
 8006f30:	f7f9 faf8 	bl	8000524 <__aeabi_i2d>
 8006f34:	a36a      	add	r3, pc, #424	; (adr r3, 80070e0 <_dtoa_r+0x2f0>)
 8006f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3a:	f7f9 fb5d 	bl	80005f8 <__aeabi_dmul>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	460b      	mov	r3, r1
 8006f42:	4630      	mov	r0, r6
 8006f44:	4639      	mov	r1, r7
 8006f46:	f7f9 f9a1 	bl	800028c <__adddf3>
 8006f4a:	4606      	mov	r6, r0
 8006f4c:	460f      	mov	r7, r1
 8006f4e:	f7f9 fe03 	bl	8000b58 <__aeabi_d2iz>
 8006f52:	2200      	movs	r2, #0
 8006f54:	4682      	mov	sl, r0
 8006f56:	2300      	movs	r3, #0
 8006f58:	4630      	mov	r0, r6
 8006f5a:	4639      	mov	r1, r7
 8006f5c:	f7f9 fdbe 	bl	8000adc <__aeabi_dcmplt>
 8006f60:	b148      	cbz	r0, 8006f76 <_dtoa_r+0x186>
 8006f62:	4650      	mov	r0, sl
 8006f64:	f7f9 fade 	bl	8000524 <__aeabi_i2d>
 8006f68:	4632      	mov	r2, r6
 8006f6a:	463b      	mov	r3, r7
 8006f6c:	f7f9 fdac 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f70:	b908      	cbnz	r0, 8006f76 <_dtoa_r+0x186>
 8006f72:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006f76:	f1ba 0f16 	cmp.w	sl, #22
 8006f7a:	d854      	bhi.n	8007026 <_dtoa_r+0x236>
 8006f7c:	4b61      	ldr	r3, [pc, #388]	; (8007104 <_dtoa_r+0x314>)
 8006f7e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006f8a:	f7f9 fda7 	bl	8000adc <__aeabi_dcmplt>
 8006f8e:	2800      	cmp	r0, #0
 8006f90:	d04b      	beq.n	800702a <_dtoa_r+0x23a>
 8006f92:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006f96:	2300      	movs	r3, #0
 8006f98:	930e      	str	r3, [sp, #56]	; 0x38
 8006f9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f9c:	1b5d      	subs	r5, r3, r5
 8006f9e:	1e6b      	subs	r3, r5, #1
 8006fa0:	9304      	str	r3, [sp, #16]
 8006fa2:	bf43      	ittte	mi
 8006fa4:	2300      	movmi	r3, #0
 8006fa6:	f1c5 0801 	rsbmi	r8, r5, #1
 8006faa:	9304      	strmi	r3, [sp, #16]
 8006fac:	f04f 0800 	movpl.w	r8, #0
 8006fb0:	f1ba 0f00 	cmp.w	sl, #0
 8006fb4:	db3b      	blt.n	800702e <_dtoa_r+0x23e>
 8006fb6:	9b04      	ldr	r3, [sp, #16]
 8006fb8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006fbc:	4453      	add	r3, sl
 8006fbe:	9304      	str	r3, [sp, #16]
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	9306      	str	r3, [sp, #24]
 8006fc4:	9b05      	ldr	r3, [sp, #20]
 8006fc6:	2b09      	cmp	r3, #9
 8006fc8:	d869      	bhi.n	800709e <_dtoa_r+0x2ae>
 8006fca:	2b05      	cmp	r3, #5
 8006fcc:	bfc4      	itt	gt
 8006fce:	3b04      	subgt	r3, #4
 8006fd0:	9305      	strgt	r3, [sp, #20]
 8006fd2:	9b05      	ldr	r3, [sp, #20]
 8006fd4:	f1a3 0302 	sub.w	r3, r3, #2
 8006fd8:	bfcc      	ite	gt
 8006fda:	2500      	movgt	r5, #0
 8006fdc:	2501      	movle	r5, #1
 8006fde:	2b03      	cmp	r3, #3
 8006fe0:	d869      	bhi.n	80070b6 <_dtoa_r+0x2c6>
 8006fe2:	e8df f003 	tbb	[pc, r3]
 8006fe6:	4e2c      	.short	0x4e2c
 8006fe8:	5a4c      	.short	0x5a4c
 8006fea:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006fee:	441d      	add	r5, r3
 8006ff0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006ff4:	2b20      	cmp	r3, #32
 8006ff6:	bfc1      	itttt	gt
 8006ff8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006ffc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007000:	fa09 f303 	lslgt.w	r3, r9, r3
 8007004:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007008:	bfda      	itte	le
 800700a:	f1c3 0320 	rsble	r3, r3, #32
 800700e:	fa06 f003 	lslle.w	r0, r6, r3
 8007012:	4318      	orrgt	r0, r3
 8007014:	f7f9 fa76 	bl	8000504 <__aeabi_ui2d>
 8007018:	2301      	movs	r3, #1
 800701a:	4606      	mov	r6, r0
 800701c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007020:	3d01      	subs	r5, #1
 8007022:	9310      	str	r3, [sp, #64]	; 0x40
 8007024:	e771      	b.n	8006f0a <_dtoa_r+0x11a>
 8007026:	2301      	movs	r3, #1
 8007028:	e7b6      	b.n	8006f98 <_dtoa_r+0x1a8>
 800702a:	900e      	str	r0, [sp, #56]	; 0x38
 800702c:	e7b5      	b.n	8006f9a <_dtoa_r+0x1aa>
 800702e:	f1ca 0300 	rsb	r3, sl, #0
 8007032:	9306      	str	r3, [sp, #24]
 8007034:	2300      	movs	r3, #0
 8007036:	eba8 080a 	sub.w	r8, r8, sl
 800703a:	930d      	str	r3, [sp, #52]	; 0x34
 800703c:	e7c2      	b.n	8006fc4 <_dtoa_r+0x1d4>
 800703e:	2300      	movs	r3, #0
 8007040:	9308      	str	r3, [sp, #32]
 8007042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007044:	2b00      	cmp	r3, #0
 8007046:	dc39      	bgt.n	80070bc <_dtoa_r+0x2cc>
 8007048:	f04f 0901 	mov.w	r9, #1
 800704c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007050:	464b      	mov	r3, r9
 8007052:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007056:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007058:	2200      	movs	r2, #0
 800705a:	6042      	str	r2, [r0, #4]
 800705c:	2204      	movs	r2, #4
 800705e:	f102 0614 	add.w	r6, r2, #20
 8007062:	429e      	cmp	r6, r3
 8007064:	6841      	ldr	r1, [r0, #4]
 8007066:	d92f      	bls.n	80070c8 <_dtoa_r+0x2d8>
 8007068:	4620      	mov	r0, r4
 800706a:	f000 fcc7 	bl	80079fc <_Balloc>
 800706e:	9000      	str	r0, [sp, #0]
 8007070:	2800      	cmp	r0, #0
 8007072:	d14b      	bne.n	800710c <_dtoa_r+0x31c>
 8007074:	4b24      	ldr	r3, [pc, #144]	; (8007108 <_dtoa_r+0x318>)
 8007076:	4602      	mov	r2, r0
 8007078:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800707c:	e6d1      	b.n	8006e22 <_dtoa_r+0x32>
 800707e:	2301      	movs	r3, #1
 8007080:	e7de      	b.n	8007040 <_dtoa_r+0x250>
 8007082:	2300      	movs	r3, #0
 8007084:	9308      	str	r3, [sp, #32]
 8007086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007088:	eb0a 0903 	add.w	r9, sl, r3
 800708c:	f109 0301 	add.w	r3, r9, #1
 8007090:	2b01      	cmp	r3, #1
 8007092:	9301      	str	r3, [sp, #4]
 8007094:	bfb8      	it	lt
 8007096:	2301      	movlt	r3, #1
 8007098:	e7dd      	b.n	8007056 <_dtoa_r+0x266>
 800709a:	2301      	movs	r3, #1
 800709c:	e7f2      	b.n	8007084 <_dtoa_r+0x294>
 800709e:	2501      	movs	r5, #1
 80070a0:	2300      	movs	r3, #0
 80070a2:	9305      	str	r3, [sp, #20]
 80070a4:	9508      	str	r5, [sp, #32]
 80070a6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80070aa:	2200      	movs	r2, #0
 80070ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80070b0:	2312      	movs	r3, #18
 80070b2:	9209      	str	r2, [sp, #36]	; 0x24
 80070b4:	e7cf      	b.n	8007056 <_dtoa_r+0x266>
 80070b6:	2301      	movs	r3, #1
 80070b8:	9308      	str	r3, [sp, #32]
 80070ba:	e7f4      	b.n	80070a6 <_dtoa_r+0x2b6>
 80070bc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80070c0:	f8cd 9004 	str.w	r9, [sp, #4]
 80070c4:	464b      	mov	r3, r9
 80070c6:	e7c6      	b.n	8007056 <_dtoa_r+0x266>
 80070c8:	3101      	adds	r1, #1
 80070ca:	6041      	str	r1, [r0, #4]
 80070cc:	0052      	lsls	r2, r2, #1
 80070ce:	e7c6      	b.n	800705e <_dtoa_r+0x26e>
 80070d0:	636f4361 	.word	0x636f4361
 80070d4:	3fd287a7 	.word	0x3fd287a7
 80070d8:	8b60c8b3 	.word	0x8b60c8b3
 80070dc:	3fc68a28 	.word	0x3fc68a28
 80070e0:	509f79fb 	.word	0x509f79fb
 80070e4:	3fd34413 	.word	0x3fd34413
 80070e8:	08008e1d 	.word	0x08008e1d
 80070ec:	08008e34 	.word	0x08008e34
 80070f0:	7ff00000 	.word	0x7ff00000
 80070f4:	08008e19 	.word	0x08008e19
 80070f8:	08008e10 	.word	0x08008e10
 80070fc:	08008ded 	.word	0x08008ded
 8007100:	3ff80000 	.word	0x3ff80000
 8007104:	08008f30 	.word	0x08008f30
 8007108:	08008e93 	.word	0x08008e93
 800710c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800710e:	9a00      	ldr	r2, [sp, #0]
 8007110:	601a      	str	r2, [r3, #0]
 8007112:	9b01      	ldr	r3, [sp, #4]
 8007114:	2b0e      	cmp	r3, #14
 8007116:	f200 80ad 	bhi.w	8007274 <_dtoa_r+0x484>
 800711a:	2d00      	cmp	r5, #0
 800711c:	f000 80aa 	beq.w	8007274 <_dtoa_r+0x484>
 8007120:	f1ba 0f00 	cmp.w	sl, #0
 8007124:	dd36      	ble.n	8007194 <_dtoa_r+0x3a4>
 8007126:	4ac3      	ldr	r2, [pc, #780]	; (8007434 <_dtoa_r+0x644>)
 8007128:	f00a 030f 	and.w	r3, sl, #15
 800712c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007130:	ed93 7b00 	vldr	d7, [r3]
 8007134:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007138:	ea4f 172a 	mov.w	r7, sl, asr #4
 800713c:	eeb0 8a47 	vmov.f32	s16, s14
 8007140:	eef0 8a67 	vmov.f32	s17, s15
 8007144:	d016      	beq.n	8007174 <_dtoa_r+0x384>
 8007146:	4bbc      	ldr	r3, [pc, #752]	; (8007438 <_dtoa_r+0x648>)
 8007148:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800714c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007150:	f7f9 fb7c 	bl	800084c <__aeabi_ddiv>
 8007154:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007158:	f007 070f 	and.w	r7, r7, #15
 800715c:	2503      	movs	r5, #3
 800715e:	4eb6      	ldr	r6, [pc, #728]	; (8007438 <_dtoa_r+0x648>)
 8007160:	b957      	cbnz	r7, 8007178 <_dtoa_r+0x388>
 8007162:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007166:	ec53 2b18 	vmov	r2, r3, d8
 800716a:	f7f9 fb6f 	bl	800084c <__aeabi_ddiv>
 800716e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007172:	e029      	b.n	80071c8 <_dtoa_r+0x3d8>
 8007174:	2502      	movs	r5, #2
 8007176:	e7f2      	b.n	800715e <_dtoa_r+0x36e>
 8007178:	07f9      	lsls	r1, r7, #31
 800717a:	d508      	bpl.n	800718e <_dtoa_r+0x39e>
 800717c:	ec51 0b18 	vmov	r0, r1, d8
 8007180:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007184:	f7f9 fa38 	bl	80005f8 <__aeabi_dmul>
 8007188:	ec41 0b18 	vmov	d8, r0, r1
 800718c:	3501      	adds	r5, #1
 800718e:	107f      	asrs	r7, r7, #1
 8007190:	3608      	adds	r6, #8
 8007192:	e7e5      	b.n	8007160 <_dtoa_r+0x370>
 8007194:	f000 80a6 	beq.w	80072e4 <_dtoa_r+0x4f4>
 8007198:	f1ca 0600 	rsb	r6, sl, #0
 800719c:	4ba5      	ldr	r3, [pc, #660]	; (8007434 <_dtoa_r+0x644>)
 800719e:	4fa6      	ldr	r7, [pc, #664]	; (8007438 <_dtoa_r+0x648>)
 80071a0:	f006 020f 	and.w	r2, r6, #15
 80071a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80071b0:	f7f9 fa22 	bl	80005f8 <__aeabi_dmul>
 80071b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071b8:	1136      	asrs	r6, r6, #4
 80071ba:	2300      	movs	r3, #0
 80071bc:	2502      	movs	r5, #2
 80071be:	2e00      	cmp	r6, #0
 80071c0:	f040 8085 	bne.w	80072ce <_dtoa_r+0x4de>
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d1d2      	bne.n	800716e <_dtoa_r+0x37e>
 80071c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f000 808c 	beq.w	80072e8 <_dtoa_r+0x4f8>
 80071d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80071d4:	4b99      	ldr	r3, [pc, #612]	; (800743c <_dtoa_r+0x64c>)
 80071d6:	2200      	movs	r2, #0
 80071d8:	4630      	mov	r0, r6
 80071da:	4639      	mov	r1, r7
 80071dc:	f7f9 fc7e 	bl	8000adc <__aeabi_dcmplt>
 80071e0:	2800      	cmp	r0, #0
 80071e2:	f000 8081 	beq.w	80072e8 <_dtoa_r+0x4f8>
 80071e6:	9b01      	ldr	r3, [sp, #4]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d07d      	beq.n	80072e8 <_dtoa_r+0x4f8>
 80071ec:	f1b9 0f00 	cmp.w	r9, #0
 80071f0:	dd3c      	ble.n	800726c <_dtoa_r+0x47c>
 80071f2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80071f6:	9307      	str	r3, [sp, #28]
 80071f8:	2200      	movs	r2, #0
 80071fa:	4b91      	ldr	r3, [pc, #580]	; (8007440 <_dtoa_r+0x650>)
 80071fc:	4630      	mov	r0, r6
 80071fe:	4639      	mov	r1, r7
 8007200:	f7f9 f9fa 	bl	80005f8 <__aeabi_dmul>
 8007204:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007208:	3501      	adds	r5, #1
 800720a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800720e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007212:	4628      	mov	r0, r5
 8007214:	f7f9 f986 	bl	8000524 <__aeabi_i2d>
 8007218:	4632      	mov	r2, r6
 800721a:	463b      	mov	r3, r7
 800721c:	f7f9 f9ec 	bl	80005f8 <__aeabi_dmul>
 8007220:	4b88      	ldr	r3, [pc, #544]	; (8007444 <_dtoa_r+0x654>)
 8007222:	2200      	movs	r2, #0
 8007224:	f7f9 f832 	bl	800028c <__adddf3>
 8007228:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800722c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007230:	9303      	str	r3, [sp, #12]
 8007232:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007234:	2b00      	cmp	r3, #0
 8007236:	d15c      	bne.n	80072f2 <_dtoa_r+0x502>
 8007238:	4b83      	ldr	r3, [pc, #524]	; (8007448 <_dtoa_r+0x658>)
 800723a:	2200      	movs	r2, #0
 800723c:	4630      	mov	r0, r6
 800723e:	4639      	mov	r1, r7
 8007240:	f7f9 f822 	bl	8000288 <__aeabi_dsub>
 8007244:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007248:	4606      	mov	r6, r0
 800724a:	460f      	mov	r7, r1
 800724c:	f7f9 fc64 	bl	8000b18 <__aeabi_dcmpgt>
 8007250:	2800      	cmp	r0, #0
 8007252:	f040 8296 	bne.w	8007782 <_dtoa_r+0x992>
 8007256:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800725a:	4630      	mov	r0, r6
 800725c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007260:	4639      	mov	r1, r7
 8007262:	f7f9 fc3b 	bl	8000adc <__aeabi_dcmplt>
 8007266:	2800      	cmp	r0, #0
 8007268:	f040 8288 	bne.w	800777c <_dtoa_r+0x98c>
 800726c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007270:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007274:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007276:	2b00      	cmp	r3, #0
 8007278:	f2c0 8158 	blt.w	800752c <_dtoa_r+0x73c>
 800727c:	f1ba 0f0e 	cmp.w	sl, #14
 8007280:	f300 8154 	bgt.w	800752c <_dtoa_r+0x73c>
 8007284:	4b6b      	ldr	r3, [pc, #428]	; (8007434 <_dtoa_r+0x644>)
 8007286:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800728a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800728e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007290:	2b00      	cmp	r3, #0
 8007292:	f280 80e3 	bge.w	800745c <_dtoa_r+0x66c>
 8007296:	9b01      	ldr	r3, [sp, #4]
 8007298:	2b00      	cmp	r3, #0
 800729a:	f300 80df 	bgt.w	800745c <_dtoa_r+0x66c>
 800729e:	f040 826d 	bne.w	800777c <_dtoa_r+0x98c>
 80072a2:	4b69      	ldr	r3, [pc, #420]	; (8007448 <_dtoa_r+0x658>)
 80072a4:	2200      	movs	r2, #0
 80072a6:	4640      	mov	r0, r8
 80072a8:	4649      	mov	r1, r9
 80072aa:	f7f9 f9a5 	bl	80005f8 <__aeabi_dmul>
 80072ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072b2:	f7f9 fc27 	bl	8000b04 <__aeabi_dcmpge>
 80072b6:	9e01      	ldr	r6, [sp, #4]
 80072b8:	4637      	mov	r7, r6
 80072ba:	2800      	cmp	r0, #0
 80072bc:	f040 8243 	bne.w	8007746 <_dtoa_r+0x956>
 80072c0:	9d00      	ldr	r5, [sp, #0]
 80072c2:	2331      	movs	r3, #49	; 0x31
 80072c4:	f805 3b01 	strb.w	r3, [r5], #1
 80072c8:	f10a 0a01 	add.w	sl, sl, #1
 80072cc:	e23f      	b.n	800774e <_dtoa_r+0x95e>
 80072ce:	07f2      	lsls	r2, r6, #31
 80072d0:	d505      	bpl.n	80072de <_dtoa_r+0x4ee>
 80072d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072d6:	f7f9 f98f 	bl	80005f8 <__aeabi_dmul>
 80072da:	3501      	adds	r5, #1
 80072dc:	2301      	movs	r3, #1
 80072de:	1076      	asrs	r6, r6, #1
 80072e0:	3708      	adds	r7, #8
 80072e2:	e76c      	b.n	80071be <_dtoa_r+0x3ce>
 80072e4:	2502      	movs	r5, #2
 80072e6:	e76f      	b.n	80071c8 <_dtoa_r+0x3d8>
 80072e8:	9b01      	ldr	r3, [sp, #4]
 80072ea:	f8cd a01c 	str.w	sl, [sp, #28]
 80072ee:	930c      	str	r3, [sp, #48]	; 0x30
 80072f0:	e78d      	b.n	800720e <_dtoa_r+0x41e>
 80072f2:	9900      	ldr	r1, [sp, #0]
 80072f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80072f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072f8:	4b4e      	ldr	r3, [pc, #312]	; (8007434 <_dtoa_r+0x644>)
 80072fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80072fe:	4401      	add	r1, r0
 8007300:	9102      	str	r1, [sp, #8]
 8007302:	9908      	ldr	r1, [sp, #32]
 8007304:	eeb0 8a47 	vmov.f32	s16, s14
 8007308:	eef0 8a67 	vmov.f32	s17, s15
 800730c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007310:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007314:	2900      	cmp	r1, #0
 8007316:	d045      	beq.n	80073a4 <_dtoa_r+0x5b4>
 8007318:	494c      	ldr	r1, [pc, #304]	; (800744c <_dtoa_r+0x65c>)
 800731a:	2000      	movs	r0, #0
 800731c:	f7f9 fa96 	bl	800084c <__aeabi_ddiv>
 8007320:	ec53 2b18 	vmov	r2, r3, d8
 8007324:	f7f8 ffb0 	bl	8000288 <__aeabi_dsub>
 8007328:	9d00      	ldr	r5, [sp, #0]
 800732a:	ec41 0b18 	vmov	d8, r0, r1
 800732e:	4639      	mov	r1, r7
 8007330:	4630      	mov	r0, r6
 8007332:	f7f9 fc11 	bl	8000b58 <__aeabi_d2iz>
 8007336:	900c      	str	r0, [sp, #48]	; 0x30
 8007338:	f7f9 f8f4 	bl	8000524 <__aeabi_i2d>
 800733c:	4602      	mov	r2, r0
 800733e:	460b      	mov	r3, r1
 8007340:	4630      	mov	r0, r6
 8007342:	4639      	mov	r1, r7
 8007344:	f7f8 ffa0 	bl	8000288 <__aeabi_dsub>
 8007348:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800734a:	3330      	adds	r3, #48	; 0x30
 800734c:	f805 3b01 	strb.w	r3, [r5], #1
 8007350:	ec53 2b18 	vmov	r2, r3, d8
 8007354:	4606      	mov	r6, r0
 8007356:	460f      	mov	r7, r1
 8007358:	f7f9 fbc0 	bl	8000adc <__aeabi_dcmplt>
 800735c:	2800      	cmp	r0, #0
 800735e:	d165      	bne.n	800742c <_dtoa_r+0x63c>
 8007360:	4632      	mov	r2, r6
 8007362:	463b      	mov	r3, r7
 8007364:	4935      	ldr	r1, [pc, #212]	; (800743c <_dtoa_r+0x64c>)
 8007366:	2000      	movs	r0, #0
 8007368:	f7f8 ff8e 	bl	8000288 <__aeabi_dsub>
 800736c:	ec53 2b18 	vmov	r2, r3, d8
 8007370:	f7f9 fbb4 	bl	8000adc <__aeabi_dcmplt>
 8007374:	2800      	cmp	r0, #0
 8007376:	f040 80b9 	bne.w	80074ec <_dtoa_r+0x6fc>
 800737a:	9b02      	ldr	r3, [sp, #8]
 800737c:	429d      	cmp	r5, r3
 800737e:	f43f af75 	beq.w	800726c <_dtoa_r+0x47c>
 8007382:	4b2f      	ldr	r3, [pc, #188]	; (8007440 <_dtoa_r+0x650>)
 8007384:	ec51 0b18 	vmov	r0, r1, d8
 8007388:	2200      	movs	r2, #0
 800738a:	f7f9 f935 	bl	80005f8 <__aeabi_dmul>
 800738e:	4b2c      	ldr	r3, [pc, #176]	; (8007440 <_dtoa_r+0x650>)
 8007390:	ec41 0b18 	vmov	d8, r0, r1
 8007394:	2200      	movs	r2, #0
 8007396:	4630      	mov	r0, r6
 8007398:	4639      	mov	r1, r7
 800739a:	f7f9 f92d 	bl	80005f8 <__aeabi_dmul>
 800739e:	4606      	mov	r6, r0
 80073a0:	460f      	mov	r7, r1
 80073a2:	e7c4      	b.n	800732e <_dtoa_r+0x53e>
 80073a4:	ec51 0b17 	vmov	r0, r1, d7
 80073a8:	f7f9 f926 	bl	80005f8 <__aeabi_dmul>
 80073ac:	9b02      	ldr	r3, [sp, #8]
 80073ae:	9d00      	ldr	r5, [sp, #0]
 80073b0:	930c      	str	r3, [sp, #48]	; 0x30
 80073b2:	ec41 0b18 	vmov	d8, r0, r1
 80073b6:	4639      	mov	r1, r7
 80073b8:	4630      	mov	r0, r6
 80073ba:	f7f9 fbcd 	bl	8000b58 <__aeabi_d2iz>
 80073be:	9011      	str	r0, [sp, #68]	; 0x44
 80073c0:	f7f9 f8b0 	bl	8000524 <__aeabi_i2d>
 80073c4:	4602      	mov	r2, r0
 80073c6:	460b      	mov	r3, r1
 80073c8:	4630      	mov	r0, r6
 80073ca:	4639      	mov	r1, r7
 80073cc:	f7f8 ff5c 	bl	8000288 <__aeabi_dsub>
 80073d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80073d2:	3330      	adds	r3, #48	; 0x30
 80073d4:	f805 3b01 	strb.w	r3, [r5], #1
 80073d8:	9b02      	ldr	r3, [sp, #8]
 80073da:	429d      	cmp	r5, r3
 80073dc:	4606      	mov	r6, r0
 80073de:	460f      	mov	r7, r1
 80073e0:	f04f 0200 	mov.w	r2, #0
 80073e4:	d134      	bne.n	8007450 <_dtoa_r+0x660>
 80073e6:	4b19      	ldr	r3, [pc, #100]	; (800744c <_dtoa_r+0x65c>)
 80073e8:	ec51 0b18 	vmov	r0, r1, d8
 80073ec:	f7f8 ff4e 	bl	800028c <__adddf3>
 80073f0:	4602      	mov	r2, r0
 80073f2:	460b      	mov	r3, r1
 80073f4:	4630      	mov	r0, r6
 80073f6:	4639      	mov	r1, r7
 80073f8:	f7f9 fb8e 	bl	8000b18 <__aeabi_dcmpgt>
 80073fc:	2800      	cmp	r0, #0
 80073fe:	d175      	bne.n	80074ec <_dtoa_r+0x6fc>
 8007400:	ec53 2b18 	vmov	r2, r3, d8
 8007404:	4911      	ldr	r1, [pc, #68]	; (800744c <_dtoa_r+0x65c>)
 8007406:	2000      	movs	r0, #0
 8007408:	f7f8 ff3e 	bl	8000288 <__aeabi_dsub>
 800740c:	4602      	mov	r2, r0
 800740e:	460b      	mov	r3, r1
 8007410:	4630      	mov	r0, r6
 8007412:	4639      	mov	r1, r7
 8007414:	f7f9 fb62 	bl	8000adc <__aeabi_dcmplt>
 8007418:	2800      	cmp	r0, #0
 800741a:	f43f af27 	beq.w	800726c <_dtoa_r+0x47c>
 800741e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007420:	1e6b      	subs	r3, r5, #1
 8007422:	930c      	str	r3, [sp, #48]	; 0x30
 8007424:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007428:	2b30      	cmp	r3, #48	; 0x30
 800742a:	d0f8      	beq.n	800741e <_dtoa_r+0x62e>
 800742c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007430:	e04a      	b.n	80074c8 <_dtoa_r+0x6d8>
 8007432:	bf00      	nop
 8007434:	08008f30 	.word	0x08008f30
 8007438:	08008f08 	.word	0x08008f08
 800743c:	3ff00000 	.word	0x3ff00000
 8007440:	40240000 	.word	0x40240000
 8007444:	401c0000 	.word	0x401c0000
 8007448:	40140000 	.word	0x40140000
 800744c:	3fe00000 	.word	0x3fe00000
 8007450:	4baf      	ldr	r3, [pc, #700]	; (8007710 <_dtoa_r+0x920>)
 8007452:	f7f9 f8d1 	bl	80005f8 <__aeabi_dmul>
 8007456:	4606      	mov	r6, r0
 8007458:	460f      	mov	r7, r1
 800745a:	e7ac      	b.n	80073b6 <_dtoa_r+0x5c6>
 800745c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007460:	9d00      	ldr	r5, [sp, #0]
 8007462:	4642      	mov	r2, r8
 8007464:	464b      	mov	r3, r9
 8007466:	4630      	mov	r0, r6
 8007468:	4639      	mov	r1, r7
 800746a:	f7f9 f9ef 	bl	800084c <__aeabi_ddiv>
 800746e:	f7f9 fb73 	bl	8000b58 <__aeabi_d2iz>
 8007472:	9002      	str	r0, [sp, #8]
 8007474:	f7f9 f856 	bl	8000524 <__aeabi_i2d>
 8007478:	4642      	mov	r2, r8
 800747a:	464b      	mov	r3, r9
 800747c:	f7f9 f8bc 	bl	80005f8 <__aeabi_dmul>
 8007480:	4602      	mov	r2, r0
 8007482:	460b      	mov	r3, r1
 8007484:	4630      	mov	r0, r6
 8007486:	4639      	mov	r1, r7
 8007488:	f7f8 fefe 	bl	8000288 <__aeabi_dsub>
 800748c:	9e02      	ldr	r6, [sp, #8]
 800748e:	9f01      	ldr	r7, [sp, #4]
 8007490:	3630      	adds	r6, #48	; 0x30
 8007492:	f805 6b01 	strb.w	r6, [r5], #1
 8007496:	9e00      	ldr	r6, [sp, #0]
 8007498:	1bae      	subs	r6, r5, r6
 800749a:	42b7      	cmp	r7, r6
 800749c:	4602      	mov	r2, r0
 800749e:	460b      	mov	r3, r1
 80074a0:	d137      	bne.n	8007512 <_dtoa_r+0x722>
 80074a2:	f7f8 fef3 	bl	800028c <__adddf3>
 80074a6:	4642      	mov	r2, r8
 80074a8:	464b      	mov	r3, r9
 80074aa:	4606      	mov	r6, r0
 80074ac:	460f      	mov	r7, r1
 80074ae:	f7f9 fb33 	bl	8000b18 <__aeabi_dcmpgt>
 80074b2:	b9c8      	cbnz	r0, 80074e8 <_dtoa_r+0x6f8>
 80074b4:	4642      	mov	r2, r8
 80074b6:	464b      	mov	r3, r9
 80074b8:	4630      	mov	r0, r6
 80074ba:	4639      	mov	r1, r7
 80074bc:	f7f9 fb04 	bl	8000ac8 <__aeabi_dcmpeq>
 80074c0:	b110      	cbz	r0, 80074c8 <_dtoa_r+0x6d8>
 80074c2:	9b02      	ldr	r3, [sp, #8]
 80074c4:	07d9      	lsls	r1, r3, #31
 80074c6:	d40f      	bmi.n	80074e8 <_dtoa_r+0x6f8>
 80074c8:	4620      	mov	r0, r4
 80074ca:	4659      	mov	r1, fp
 80074cc:	f000 fad6 	bl	8007a7c <_Bfree>
 80074d0:	2300      	movs	r3, #0
 80074d2:	702b      	strb	r3, [r5, #0]
 80074d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074d6:	f10a 0001 	add.w	r0, sl, #1
 80074da:	6018      	str	r0, [r3, #0]
 80074dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074de:	2b00      	cmp	r3, #0
 80074e0:	f43f acd8 	beq.w	8006e94 <_dtoa_r+0xa4>
 80074e4:	601d      	str	r5, [r3, #0]
 80074e6:	e4d5      	b.n	8006e94 <_dtoa_r+0xa4>
 80074e8:	f8cd a01c 	str.w	sl, [sp, #28]
 80074ec:	462b      	mov	r3, r5
 80074ee:	461d      	mov	r5, r3
 80074f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80074f4:	2a39      	cmp	r2, #57	; 0x39
 80074f6:	d108      	bne.n	800750a <_dtoa_r+0x71a>
 80074f8:	9a00      	ldr	r2, [sp, #0]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d1f7      	bne.n	80074ee <_dtoa_r+0x6fe>
 80074fe:	9a07      	ldr	r2, [sp, #28]
 8007500:	9900      	ldr	r1, [sp, #0]
 8007502:	3201      	adds	r2, #1
 8007504:	9207      	str	r2, [sp, #28]
 8007506:	2230      	movs	r2, #48	; 0x30
 8007508:	700a      	strb	r2, [r1, #0]
 800750a:	781a      	ldrb	r2, [r3, #0]
 800750c:	3201      	adds	r2, #1
 800750e:	701a      	strb	r2, [r3, #0]
 8007510:	e78c      	b.n	800742c <_dtoa_r+0x63c>
 8007512:	4b7f      	ldr	r3, [pc, #508]	; (8007710 <_dtoa_r+0x920>)
 8007514:	2200      	movs	r2, #0
 8007516:	f7f9 f86f 	bl	80005f8 <__aeabi_dmul>
 800751a:	2200      	movs	r2, #0
 800751c:	2300      	movs	r3, #0
 800751e:	4606      	mov	r6, r0
 8007520:	460f      	mov	r7, r1
 8007522:	f7f9 fad1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007526:	2800      	cmp	r0, #0
 8007528:	d09b      	beq.n	8007462 <_dtoa_r+0x672>
 800752a:	e7cd      	b.n	80074c8 <_dtoa_r+0x6d8>
 800752c:	9a08      	ldr	r2, [sp, #32]
 800752e:	2a00      	cmp	r2, #0
 8007530:	f000 80c4 	beq.w	80076bc <_dtoa_r+0x8cc>
 8007534:	9a05      	ldr	r2, [sp, #20]
 8007536:	2a01      	cmp	r2, #1
 8007538:	f300 80a8 	bgt.w	800768c <_dtoa_r+0x89c>
 800753c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800753e:	2a00      	cmp	r2, #0
 8007540:	f000 80a0 	beq.w	8007684 <_dtoa_r+0x894>
 8007544:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007548:	9e06      	ldr	r6, [sp, #24]
 800754a:	4645      	mov	r5, r8
 800754c:	9a04      	ldr	r2, [sp, #16]
 800754e:	2101      	movs	r1, #1
 8007550:	441a      	add	r2, r3
 8007552:	4620      	mov	r0, r4
 8007554:	4498      	add	r8, r3
 8007556:	9204      	str	r2, [sp, #16]
 8007558:	f000 fb4c 	bl	8007bf4 <__i2b>
 800755c:	4607      	mov	r7, r0
 800755e:	2d00      	cmp	r5, #0
 8007560:	dd0b      	ble.n	800757a <_dtoa_r+0x78a>
 8007562:	9b04      	ldr	r3, [sp, #16]
 8007564:	2b00      	cmp	r3, #0
 8007566:	dd08      	ble.n	800757a <_dtoa_r+0x78a>
 8007568:	42ab      	cmp	r3, r5
 800756a:	9a04      	ldr	r2, [sp, #16]
 800756c:	bfa8      	it	ge
 800756e:	462b      	movge	r3, r5
 8007570:	eba8 0803 	sub.w	r8, r8, r3
 8007574:	1aed      	subs	r5, r5, r3
 8007576:	1ad3      	subs	r3, r2, r3
 8007578:	9304      	str	r3, [sp, #16]
 800757a:	9b06      	ldr	r3, [sp, #24]
 800757c:	b1fb      	cbz	r3, 80075be <_dtoa_r+0x7ce>
 800757e:	9b08      	ldr	r3, [sp, #32]
 8007580:	2b00      	cmp	r3, #0
 8007582:	f000 809f 	beq.w	80076c4 <_dtoa_r+0x8d4>
 8007586:	2e00      	cmp	r6, #0
 8007588:	dd11      	ble.n	80075ae <_dtoa_r+0x7be>
 800758a:	4639      	mov	r1, r7
 800758c:	4632      	mov	r2, r6
 800758e:	4620      	mov	r0, r4
 8007590:	f000 fbec 	bl	8007d6c <__pow5mult>
 8007594:	465a      	mov	r2, fp
 8007596:	4601      	mov	r1, r0
 8007598:	4607      	mov	r7, r0
 800759a:	4620      	mov	r0, r4
 800759c:	f000 fb40 	bl	8007c20 <__multiply>
 80075a0:	4659      	mov	r1, fp
 80075a2:	9007      	str	r0, [sp, #28]
 80075a4:	4620      	mov	r0, r4
 80075a6:	f000 fa69 	bl	8007a7c <_Bfree>
 80075aa:	9b07      	ldr	r3, [sp, #28]
 80075ac:	469b      	mov	fp, r3
 80075ae:	9b06      	ldr	r3, [sp, #24]
 80075b0:	1b9a      	subs	r2, r3, r6
 80075b2:	d004      	beq.n	80075be <_dtoa_r+0x7ce>
 80075b4:	4659      	mov	r1, fp
 80075b6:	4620      	mov	r0, r4
 80075b8:	f000 fbd8 	bl	8007d6c <__pow5mult>
 80075bc:	4683      	mov	fp, r0
 80075be:	2101      	movs	r1, #1
 80075c0:	4620      	mov	r0, r4
 80075c2:	f000 fb17 	bl	8007bf4 <__i2b>
 80075c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	4606      	mov	r6, r0
 80075cc:	dd7c      	ble.n	80076c8 <_dtoa_r+0x8d8>
 80075ce:	461a      	mov	r2, r3
 80075d0:	4601      	mov	r1, r0
 80075d2:	4620      	mov	r0, r4
 80075d4:	f000 fbca 	bl	8007d6c <__pow5mult>
 80075d8:	9b05      	ldr	r3, [sp, #20]
 80075da:	2b01      	cmp	r3, #1
 80075dc:	4606      	mov	r6, r0
 80075de:	dd76      	ble.n	80076ce <_dtoa_r+0x8de>
 80075e0:	2300      	movs	r3, #0
 80075e2:	9306      	str	r3, [sp, #24]
 80075e4:	6933      	ldr	r3, [r6, #16]
 80075e6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80075ea:	6918      	ldr	r0, [r3, #16]
 80075ec:	f000 fab2 	bl	8007b54 <__hi0bits>
 80075f0:	f1c0 0020 	rsb	r0, r0, #32
 80075f4:	9b04      	ldr	r3, [sp, #16]
 80075f6:	4418      	add	r0, r3
 80075f8:	f010 001f 	ands.w	r0, r0, #31
 80075fc:	f000 8086 	beq.w	800770c <_dtoa_r+0x91c>
 8007600:	f1c0 0320 	rsb	r3, r0, #32
 8007604:	2b04      	cmp	r3, #4
 8007606:	dd7f      	ble.n	8007708 <_dtoa_r+0x918>
 8007608:	f1c0 001c 	rsb	r0, r0, #28
 800760c:	9b04      	ldr	r3, [sp, #16]
 800760e:	4403      	add	r3, r0
 8007610:	4480      	add	r8, r0
 8007612:	4405      	add	r5, r0
 8007614:	9304      	str	r3, [sp, #16]
 8007616:	f1b8 0f00 	cmp.w	r8, #0
 800761a:	dd05      	ble.n	8007628 <_dtoa_r+0x838>
 800761c:	4659      	mov	r1, fp
 800761e:	4642      	mov	r2, r8
 8007620:	4620      	mov	r0, r4
 8007622:	f000 fbfd 	bl	8007e20 <__lshift>
 8007626:	4683      	mov	fp, r0
 8007628:	9b04      	ldr	r3, [sp, #16]
 800762a:	2b00      	cmp	r3, #0
 800762c:	dd05      	ble.n	800763a <_dtoa_r+0x84a>
 800762e:	4631      	mov	r1, r6
 8007630:	461a      	mov	r2, r3
 8007632:	4620      	mov	r0, r4
 8007634:	f000 fbf4 	bl	8007e20 <__lshift>
 8007638:	4606      	mov	r6, r0
 800763a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800763c:	2b00      	cmp	r3, #0
 800763e:	d069      	beq.n	8007714 <_dtoa_r+0x924>
 8007640:	4631      	mov	r1, r6
 8007642:	4658      	mov	r0, fp
 8007644:	f000 fc58 	bl	8007ef8 <__mcmp>
 8007648:	2800      	cmp	r0, #0
 800764a:	da63      	bge.n	8007714 <_dtoa_r+0x924>
 800764c:	2300      	movs	r3, #0
 800764e:	4659      	mov	r1, fp
 8007650:	220a      	movs	r2, #10
 8007652:	4620      	mov	r0, r4
 8007654:	f000 fa34 	bl	8007ac0 <__multadd>
 8007658:	9b08      	ldr	r3, [sp, #32]
 800765a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800765e:	4683      	mov	fp, r0
 8007660:	2b00      	cmp	r3, #0
 8007662:	f000 818f 	beq.w	8007984 <_dtoa_r+0xb94>
 8007666:	4639      	mov	r1, r7
 8007668:	2300      	movs	r3, #0
 800766a:	220a      	movs	r2, #10
 800766c:	4620      	mov	r0, r4
 800766e:	f000 fa27 	bl	8007ac0 <__multadd>
 8007672:	f1b9 0f00 	cmp.w	r9, #0
 8007676:	4607      	mov	r7, r0
 8007678:	f300 808e 	bgt.w	8007798 <_dtoa_r+0x9a8>
 800767c:	9b05      	ldr	r3, [sp, #20]
 800767e:	2b02      	cmp	r3, #2
 8007680:	dc50      	bgt.n	8007724 <_dtoa_r+0x934>
 8007682:	e089      	b.n	8007798 <_dtoa_r+0x9a8>
 8007684:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007686:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800768a:	e75d      	b.n	8007548 <_dtoa_r+0x758>
 800768c:	9b01      	ldr	r3, [sp, #4]
 800768e:	1e5e      	subs	r6, r3, #1
 8007690:	9b06      	ldr	r3, [sp, #24]
 8007692:	42b3      	cmp	r3, r6
 8007694:	bfbf      	itttt	lt
 8007696:	9b06      	ldrlt	r3, [sp, #24]
 8007698:	9606      	strlt	r6, [sp, #24]
 800769a:	1af2      	sublt	r2, r6, r3
 800769c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800769e:	bfb6      	itet	lt
 80076a0:	189b      	addlt	r3, r3, r2
 80076a2:	1b9e      	subge	r6, r3, r6
 80076a4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80076a6:	9b01      	ldr	r3, [sp, #4]
 80076a8:	bfb8      	it	lt
 80076aa:	2600      	movlt	r6, #0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	bfb5      	itete	lt
 80076b0:	eba8 0503 	sublt.w	r5, r8, r3
 80076b4:	9b01      	ldrge	r3, [sp, #4]
 80076b6:	2300      	movlt	r3, #0
 80076b8:	4645      	movge	r5, r8
 80076ba:	e747      	b.n	800754c <_dtoa_r+0x75c>
 80076bc:	9e06      	ldr	r6, [sp, #24]
 80076be:	9f08      	ldr	r7, [sp, #32]
 80076c0:	4645      	mov	r5, r8
 80076c2:	e74c      	b.n	800755e <_dtoa_r+0x76e>
 80076c4:	9a06      	ldr	r2, [sp, #24]
 80076c6:	e775      	b.n	80075b4 <_dtoa_r+0x7c4>
 80076c8:	9b05      	ldr	r3, [sp, #20]
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	dc18      	bgt.n	8007700 <_dtoa_r+0x910>
 80076ce:	9b02      	ldr	r3, [sp, #8]
 80076d0:	b9b3      	cbnz	r3, 8007700 <_dtoa_r+0x910>
 80076d2:	9b03      	ldr	r3, [sp, #12]
 80076d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076d8:	b9a3      	cbnz	r3, 8007704 <_dtoa_r+0x914>
 80076da:	9b03      	ldr	r3, [sp, #12]
 80076dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80076e0:	0d1b      	lsrs	r3, r3, #20
 80076e2:	051b      	lsls	r3, r3, #20
 80076e4:	b12b      	cbz	r3, 80076f2 <_dtoa_r+0x902>
 80076e6:	9b04      	ldr	r3, [sp, #16]
 80076e8:	3301      	adds	r3, #1
 80076ea:	9304      	str	r3, [sp, #16]
 80076ec:	f108 0801 	add.w	r8, r8, #1
 80076f0:	2301      	movs	r3, #1
 80076f2:	9306      	str	r3, [sp, #24]
 80076f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	f47f af74 	bne.w	80075e4 <_dtoa_r+0x7f4>
 80076fc:	2001      	movs	r0, #1
 80076fe:	e779      	b.n	80075f4 <_dtoa_r+0x804>
 8007700:	2300      	movs	r3, #0
 8007702:	e7f6      	b.n	80076f2 <_dtoa_r+0x902>
 8007704:	9b02      	ldr	r3, [sp, #8]
 8007706:	e7f4      	b.n	80076f2 <_dtoa_r+0x902>
 8007708:	d085      	beq.n	8007616 <_dtoa_r+0x826>
 800770a:	4618      	mov	r0, r3
 800770c:	301c      	adds	r0, #28
 800770e:	e77d      	b.n	800760c <_dtoa_r+0x81c>
 8007710:	40240000 	.word	0x40240000
 8007714:	9b01      	ldr	r3, [sp, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	dc38      	bgt.n	800778c <_dtoa_r+0x99c>
 800771a:	9b05      	ldr	r3, [sp, #20]
 800771c:	2b02      	cmp	r3, #2
 800771e:	dd35      	ble.n	800778c <_dtoa_r+0x99c>
 8007720:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007724:	f1b9 0f00 	cmp.w	r9, #0
 8007728:	d10d      	bne.n	8007746 <_dtoa_r+0x956>
 800772a:	4631      	mov	r1, r6
 800772c:	464b      	mov	r3, r9
 800772e:	2205      	movs	r2, #5
 8007730:	4620      	mov	r0, r4
 8007732:	f000 f9c5 	bl	8007ac0 <__multadd>
 8007736:	4601      	mov	r1, r0
 8007738:	4606      	mov	r6, r0
 800773a:	4658      	mov	r0, fp
 800773c:	f000 fbdc 	bl	8007ef8 <__mcmp>
 8007740:	2800      	cmp	r0, #0
 8007742:	f73f adbd 	bgt.w	80072c0 <_dtoa_r+0x4d0>
 8007746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007748:	9d00      	ldr	r5, [sp, #0]
 800774a:	ea6f 0a03 	mvn.w	sl, r3
 800774e:	f04f 0800 	mov.w	r8, #0
 8007752:	4631      	mov	r1, r6
 8007754:	4620      	mov	r0, r4
 8007756:	f000 f991 	bl	8007a7c <_Bfree>
 800775a:	2f00      	cmp	r7, #0
 800775c:	f43f aeb4 	beq.w	80074c8 <_dtoa_r+0x6d8>
 8007760:	f1b8 0f00 	cmp.w	r8, #0
 8007764:	d005      	beq.n	8007772 <_dtoa_r+0x982>
 8007766:	45b8      	cmp	r8, r7
 8007768:	d003      	beq.n	8007772 <_dtoa_r+0x982>
 800776a:	4641      	mov	r1, r8
 800776c:	4620      	mov	r0, r4
 800776e:	f000 f985 	bl	8007a7c <_Bfree>
 8007772:	4639      	mov	r1, r7
 8007774:	4620      	mov	r0, r4
 8007776:	f000 f981 	bl	8007a7c <_Bfree>
 800777a:	e6a5      	b.n	80074c8 <_dtoa_r+0x6d8>
 800777c:	2600      	movs	r6, #0
 800777e:	4637      	mov	r7, r6
 8007780:	e7e1      	b.n	8007746 <_dtoa_r+0x956>
 8007782:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007784:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007788:	4637      	mov	r7, r6
 800778a:	e599      	b.n	80072c0 <_dtoa_r+0x4d0>
 800778c:	9b08      	ldr	r3, [sp, #32]
 800778e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007792:	2b00      	cmp	r3, #0
 8007794:	f000 80fd 	beq.w	8007992 <_dtoa_r+0xba2>
 8007798:	2d00      	cmp	r5, #0
 800779a:	dd05      	ble.n	80077a8 <_dtoa_r+0x9b8>
 800779c:	4639      	mov	r1, r7
 800779e:	462a      	mov	r2, r5
 80077a0:	4620      	mov	r0, r4
 80077a2:	f000 fb3d 	bl	8007e20 <__lshift>
 80077a6:	4607      	mov	r7, r0
 80077a8:	9b06      	ldr	r3, [sp, #24]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d05c      	beq.n	8007868 <_dtoa_r+0xa78>
 80077ae:	6879      	ldr	r1, [r7, #4]
 80077b0:	4620      	mov	r0, r4
 80077b2:	f000 f923 	bl	80079fc <_Balloc>
 80077b6:	4605      	mov	r5, r0
 80077b8:	b928      	cbnz	r0, 80077c6 <_dtoa_r+0x9d6>
 80077ba:	4b80      	ldr	r3, [pc, #512]	; (80079bc <_dtoa_r+0xbcc>)
 80077bc:	4602      	mov	r2, r0
 80077be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80077c2:	f7ff bb2e 	b.w	8006e22 <_dtoa_r+0x32>
 80077c6:	693a      	ldr	r2, [r7, #16]
 80077c8:	3202      	adds	r2, #2
 80077ca:	0092      	lsls	r2, r2, #2
 80077cc:	f107 010c 	add.w	r1, r7, #12
 80077d0:	300c      	adds	r0, #12
 80077d2:	f000 f905 	bl	80079e0 <memcpy>
 80077d6:	2201      	movs	r2, #1
 80077d8:	4629      	mov	r1, r5
 80077da:	4620      	mov	r0, r4
 80077dc:	f000 fb20 	bl	8007e20 <__lshift>
 80077e0:	9b00      	ldr	r3, [sp, #0]
 80077e2:	3301      	adds	r3, #1
 80077e4:	9301      	str	r3, [sp, #4]
 80077e6:	9b00      	ldr	r3, [sp, #0]
 80077e8:	444b      	add	r3, r9
 80077ea:	9307      	str	r3, [sp, #28]
 80077ec:	9b02      	ldr	r3, [sp, #8]
 80077ee:	f003 0301 	and.w	r3, r3, #1
 80077f2:	46b8      	mov	r8, r7
 80077f4:	9306      	str	r3, [sp, #24]
 80077f6:	4607      	mov	r7, r0
 80077f8:	9b01      	ldr	r3, [sp, #4]
 80077fa:	4631      	mov	r1, r6
 80077fc:	3b01      	subs	r3, #1
 80077fe:	4658      	mov	r0, fp
 8007800:	9302      	str	r3, [sp, #8]
 8007802:	f7ff fa69 	bl	8006cd8 <quorem>
 8007806:	4603      	mov	r3, r0
 8007808:	3330      	adds	r3, #48	; 0x30
 800780a:	9004      	str	r0, [sp, #16]
 800780c:	4641      	mov	r1, r8
 800780e:	4658      	mov	r0, fp
 8007810:	9308      	str	r3, [sp, #32]
 8007812:	f000 fb71 	bl	8007ef8 <__mcmp>
 8007816:	463a      	mov	r2, r7
 8007818:	4681      	mov	r9, r0
 800781a:	4631      	mov	r1, r6
 800781c:	4620      	mov	r0, r4
 800781e:	f000 fb87 	bl	8007f30 <__mdiff>
 8007822:	68c2      	ldr	r2, [r0, #12]
 8007824:	9b08      	ldr	r3, [sp, #32]
 8007826:	4605      	mov	r5, r0
 8007828:	bb02      	cbnz	r2, 800786c <_dtoa_r+0xa7c>
 800782a:	4601      	mov	r1, r0
 800782c:	4658      	mov	r0, fp
 800782e:	f000 fb63 	bl	8007ef8 <__mcmp>
 8007832:	9b08      	ldr	r3, [sp, #32]
 8007834:	4602      	mov	r2, r0
 8007836:	4629      	mov	r1, r5
 8007838:	4620      	mov	r0, r4
 800783a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800783e:	f000 f91d 	bl	8007a7c <_Bfree>
 8007842:	9b05      	ldr	r3, [sp, #20]
 8007844:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007846:	9d01      	ldr	r5, [sp, #4]
 8007848:	ea43 0102 	orr.w	r1, r3, r2
 800784c:	9b06      	ldr	r3, [sp, #24]
 800784e:	430b      	orrs	r3, r1
 8007850:	9b08      	ldr	r3, [sp, #32]
 8007852:	d10d      	bne.n	8007870 <_dtoa_r+0xa80>
 8007854:	2b39      	cmp	r3, #57	; 0x39
 8007856:	d029      	beq.n	80078ac <_dtoa_r+0xabc>
 8007858:	f1b9 0f00 	cmp.w	r9, #0
 800785c:	dd01      	ble.n	8007862 <_dtoa_r+0xa72>
 800785e:	9b04      	ldr	r3, [sp, #16]
 8007860:	3331      	adds	r3, #49	; 0x31
 8007862:	9a02      	ldr	r2, [sp, #8]
 8007864:	7013      	strb	r3, [r2, #0]
 8007866:	e774      	b.n	8007752 <_dtoa_r+0x962>
 8007868:	4638      	mov	r0, r7
 800786a:	e7b9      	b.n	80077e0 <_dtoa_r+0x9f0>
 800786c:	2201      	movs	r2, #1
 800786e:	e7e2      	b.n	8007836 <_dtoa_r+0xa46>
 8007870:	f1b9 0f00 	cmp.w	r9, #0
 8007874:	db06      	blt.n	8007884 <_dtoa_r+0xa94>
 8007876:	9905      	ldr	r1, [sp, #20]
 8007878:	ea41 0909 	orr.w	r9, r1, r9
 800787c:	9906      	ldr	r1, [sp, #24]
 800787e:	ea59 0101 	orrs.w	r1, r9, r1
 8007882:	d120      	bne.n	80078c6 <_dtoa_r+0xad6>
 8007884:	2a00      	cmp	r2, #0
 8007886:	ddec      	ble.n	8007862 <_dtoa_r+0xa72>
 8007888:	4659      	mov	r1, fp
 800788a:	2201      	movs	r2, #1
 800788c:	4620      	mov	r0, r4
 800788e:	9301      	str	r3, [sp, #4]
 8007890:	f000 fac6 	bl	8007e20 <__lshift>
 8007894:	4631      	mov	r1, r6
 8007896:	4683      	mov	fp, r0
 8007898:	f000 fb2e 	bl	8007ef8 <__mcmp>
 800789c:	2800      	cmp	r0, #0
 800789e:	9b01      	ldr	r3, [sp, #4]
 80078a0:	dc02      	bgt.n	80078a8 <_dtoa_r+0xab8>
 80078a2:	d1de      	bne.n	8007862 <_dtoa_r+0xa72>
 80078a4:	07da      	lsls	r2, r3, #31
 80078a6:	d5dc      	bpl.n	8007862 <_dtoa_r+0xa72>
 80078a8:	2b39      	cmp	r3, #57	; 0x39
 80078aa:	d1d8      	bne.n	800785e <_dtoa_r+0xa6e>
 80078ac:	9a02      	ldr	r2, [sp, #8]
 80078ae:	2339      	movs	r3, #57	; 0x39
 80078b0:	7013      	strb	r3, [r2, #0]
 80078b2:	462b      	mov	r3, r5
 80078b4:	461d      	mov	r5, r3
 80078b6:	3b01      	subs	r3, #1
 80078b8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80078bc:	2a39      	cmp	r2, #57	; 0x39
 80078be:	d050      	beq.n	8007962 <_dtoa_r+0xb72>
 80078c0:	3201      	adds	r2, #1
 80078c2:	701a      	strb	r2, [r3, #0]
 80078c4:	e745      	b.n	8007752 <_dtoa_r+0x962>
 80078c6:	2a00      	cmp	r2, #0
 80078c8:	dd03      	ble.n	80078d2 <_dtoa_r+0xae2>
 80078ca:	2b39      	cmp	r3, #57	; 0x39
 80078cc:	d0ee      	beq.n	80078ac <_dtoa_r+0xabc>
 80078ce:	3301      	adds	r3, #1
 80078d0:	e7c7      	b.n	8007862 <_dtoa_r+0xa72>
 80078d2:	9a01      	ldr	r2, [sp, #4]
 80078d4:	9907      	ldr	r1, [sp, #28]
 80078d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80078da:	428a      	cmp	r2, r1
 80078dc:	d02a      	beq.n	8007934 <_dtoa_r+0xb44>
 80078de:	4659      	mov	r1, fp
 80078e0:	2300      	movs	r3, #0
 80078e2:	220a      	movs	r2, #10
 80078e4:	4620      	mov	r0, r4
 80078e6:	f000 f8eb 	bl	8007ac0 <__multadd>
 80078ea:	45b8      	cmp	r8, r7
 80078ec:	4683      	mov	fp, r0
 80078ee:	f04f 0300 	mov.w	r3, #0
 80078f2:	f04f 020a 	mov.w	r2, #10
 80078f6:	4641      	mov	r1, r8
 80078f8:	4620      	mov	r0, r4
 80078fa:	d107      	bne.n	800790c <_dtoa_r+0xb1c>
 80078fc:	f000 f8e0 	bl	8007ac0 <__multadd>
 8007900:	4680      	mov	r8, r0
 8007902:	4607      	mov	r7, r0
 8007904:	9b01      	ldr	r3, [sp, #4]
 8007906:	3301      	adds	r3, #1
 8007908:	9301      	str	r3, [sp, #4]
 800790a:	e775      	b.n	80077f8 <_dtoa_r+0xa08>
 800790c:	f000 f8d8 	bl	8007ac0 <__multadd>
 8007910:	4639      	mov	r1, r7
 8007912:	4680      	mov	r8, r0
 8007914:	2300      	movs	r3, #0
 8007916:	220a      	movs	r2, #10
 8007918:	4620      	mov	r0, r4
 800791a:	f000 f8d1 	bl	8007ac0 <__multadd>
 800791e:	4607      	mov	r7, r0
 8007920:	e7f0      	b.n	8007904 <_dtoa_r+0xb14>
 8007922:	f1b9 0f00 	cmp.w	r9, #0
 8007926:	9a00      	ldr	r2, [sp, #0]
 8007928:	bfcc      	ite	gt
 800792a:	464d      	movgt	r5, r9
 800792c:	2501      	movle	r5, #1
 800792e:	4415      	add	r5, r2
 8007930:	f04f 0800 	mov.w	r8, #0
 8007934:	4659      	mov	r1, fp
 8007936:	2201      	movs	r2, #1
 8007938:	4620      	mov	r0, r4
 800793a:	9301      	str	r3, [sp, #4]
 800793c:	f000 fa70 	bl	8007e20 <__lshift>
 8007940:	4631      	mov	r1, r6
 8007942:	4683      	mov	fp, r0
 8007944:	f000 fad8 	bl	8007ef8 <__mcmp>
 8007948:	2800      	cmp	r0, #0
 800794a:	dcb2      	bgt.n	80078b2 <_dtoa_r+0xac2>
 800794c:	d102      	bne.n	8007954 <_dtoa_r+0xb64>
 800794e:	9b01      	ldr	r3, [sp, #4]
 8007950:	07db      	lsls	r3, r3, #31
 8007952:	d4ae      	bmi.n	80078b2 <_dtoa_r+0xac2>
 8007954:	462b      	mov	r3, r5
 8007956:	461d      	mov	r5, r3
 8007958:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800795c:	2a30      	cmp	r2, #48	; 0x30
 800795e:	d0fa      	beq.n	8007956 <_dtoa_r+0xb66>
 8007960:	e6f7      	b.n	8007752 <_dtoa_r+0x962>
 8007962:	9a00      	ldr	r2, [sp, #0]
 8007964:	429a      	cmp	r2, r3
 8007966:	d1a5      	bne.n	80078b4 <_dtoa_r+0xac4>
 8007968:	f10a 0a01 	add.w	sl, sl, #1
 800796c:	2331      	movs	r3, #49	; 0x31
 800796e:	e779      	b.n	8007864 <_dtoa_r+0xa74>
 8007970:	4b13      	ldr	r3, [pc, #76]	; (80079c0 <_dtoa_r+0xbd0>)
 8007972:	f7ff baaf 	b.w	8006ed4 <_dtoa_r+0xe4>
 8007976:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007978:	2b00      	cmp	r3, #0
 800797a:	f47f aa86 	bne.w	8006e8a <_dtoa_r+0x9a>
 800797e:	4b11      	ldr	r3, [pc, #68]	; (80079c4 <_dtoa_r+0xbd4>)
 8007980:	f7ff baa8 	b.w	8006ed4 <_dtoa_r+0xe4>
 8007984:	f1b9 0f00 	cmp.w	r9, #0
 8007988:	dc03      	bgt.n	8007992 <_dtoa_r+0xba2>
 800798a:	9b05      	ldr	r3, [sp, #20]
 800798c:	2b02      	cmp	r3, #2
 800798e:	f73f aec9 	bgt.w	8007724 <_dtoa_r+0x934>
 8007992:	9d00      	ldr	r5, [sp, #0]
 8007994:	4631      	mov	r1, r6
 8007996:	4658      	mov	r0, fp
 8007998:	f7ff f99e 	bl	8006cd8 <quorem>
 800799c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80079a0:	f805 3b01 	strb.w	r3, [r5], #1
 80079a4:	9a00      	ldr	r2, [sp, #0]
 80079a6:	1aaa      	subs	r2, r5, r2
 80079a8:	4591      	cmp	r9, r2
 80079aa:	ddba      	ble.n	8007922 <_dtoa_r+0xb32>
 80079ac:	4659      	mov	r1, fp
 80079ae:	2300      	movs	r3, #0
 80079b0:	220a      	movs	r2, #10
 80079b2:	4620      	mov	r0, r4
 80079b4:	f000 f884 	bl	8007ac0 <__multadd>
 80079b8:	4683      	mov	fp, r0
 80079ba:	e7eb      	b.n	8007994 <_dtoa_r+0xba4>
 80079bc:	08008e93 	.word	0x08008e93
 80079c0:	08008dec 	.word	0x08008dec
 80079c4:	08008e10 	.word	0x08008e10

080079c8 <_localeconv_r>:
 80079c8:	4800      	ldr	r0, [pc, #0]	; (80079cc <_localeconv_r+0x4>)
 80079ca:	4770      	bx	lr
 80079cc:	20000168 	.word	0x20000168

080079d0 <malloc>:
 80079d0:	4b02      	ldr	r3, [pc, #8]	; (80079dc <malloc+0xc>)
 80079d2:	4601      	mov	r1, r0
 80079d4:	6818      	ldr	r0, [r3, #0]
 80079d6:	f000 bbef 	b.w	80081b8 <_malloc_r>
 80079da:	bf00      	nop
 80079dc:	20000014 	.word	0x20000014

080079e0 <memcpy>:
 80079e0:	440a      	add	r2, r1
 80079e2:	4291      	cmp	r1, r2
 80079e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80079e8:	d100      	bne.n	80079ec <memcpy+0xc>
 80079ea:	4770      	bx	lr
 80079ec:	b510      	push	{r4, lr}
 80079ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079f6:	4291      	cmp	r1, r2
 80079f8:	d1f9      	bne.n	80079ee <memcpy+0xe>
 80079fa:	bd10      	pop	{r4, pc}

080079fc <_Balloc>:
 80079fc:	b570      	push	{r4, r5, r6, lr}
 80079fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007a00:	4604      	mov	r4, r0
 8007a02:	460d      	mov	r5, r1
 8007a04:	b976      	cbnz	r6, 8007a24 <_Balloc+0x28>
 8007a06:	2010      	movs	r0, #16
 8007a08:	f7ff ffe2 	bl	80079d0 <malloc>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	6260      	str	r0, [r4, #36]	; 0x24
 8007a10:	b920      	cbnz	r0, 8007a1c <_Balloc+0x20>
 8007a12:	4b18      	ldr	r3, [pc, #96]	; (8007a74 <_Balloc+0x78>)
 8007a14:	4818      	ldr	r0, [pc, #96]	; (8007a78 <_Balloc+0x7c>)
 8007a16:	2166      	movs	r1, #102	; 0x66
 8007a18:	f000 fc38 	bl	800828c <__assert_func>
 8007a1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a20:	6006      	str	r6, [r0, #0]
 8007a22:	60c6      	str	r6, [r0, #12]
 8007a24:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007a26:	68f3      	ldr	r3, [r6, #12]
 8007a28:	b183      	cbz	r3, 8007a4c <_Balloc+0x50>
 8007a2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a32:	b9b8      	cbnz	r0, 8007a64 <_Balloc+0x68>
 8007a34:	2101      	movs	r1, #1
 8007a36:	fa01 f605 	lsl.w	r6, r1, r5
 8007a3a:	1d72      	adds	r2, r6, #5
 8007a3c:	0092      	lsls	r2, r2, #2
 8007a3e:	4620      	mov	r0, r4
 8007a40:	f000 fb5a 	bl	80080f8 <_calloc_r>
 8007a44:	b160      	cbz	r0, 8007a60 <_Balloc+0x64>
 8007a46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007a4a:	e00e      	b.n	8007a6a <_Balloc+0x6e>
 8007a4c:	2221      	movs	r2, #33	; 0x21
 8007a4e:	2104      	movs	r1, #4
 8007a50:	4620      	mov	r0, r4
 8007a52:	f000 fb51 	bl	80080f8 <_calloc_r>
 8007a56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a58:	60f0      	str	r0, [r6, #12]
 8007a5a:	68db      	ldr	r3, [r3, #12]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1e4      	bne.n	8007a2a <_Balloc+0x2e>
 8007a60:	2000      	movs	r0, #0
 8007a62:	bd70      	pop	{r4, r5, r6, pc}
 8007a64:	6802      	ldr	r2, [r0, #0]
 8007a66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007a70:	e7f7      	b.n	8007a62 <_Balloc+0x66>
 8007a72:	bf00      	nop
 8007a74:	08008e1d 	.word	0x08008e1d
 8007a78:	08008ea4 	.word	0x08008ea4

08007a7c <_Bfree>:
 8007a7c:	b570      	push	{r4, r5, r6, lr}
 8007a7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007a80:	4605      	mov	r5, r0
 8007a82:	460c      	mov	r4, r1
 8007a84:	b976      	cbnz	r6, 8007aa4 <_Bfree+0x28>
 8007a86:	2010      	movs	r0, #16
 8007a88:	f7ff ffa2 	bl	80079d0 <malloc>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	6268      	str	r0, [r5, #36]	; 0x24
 8007a90:	b920      	cbnz	r0, 8007a9c <_Bfree+0x20>
 8007a92:	4b09      	ldr	r3, [pc, #36]	; (8007ab8 <_Bfree+0x3c>)
 8007a94:	4809      	ldr	r0, [pc, #36]	; (8007abc <_Bfree+0x40>)
 8007a96:	218a      	movs	r1, #138	; 0x8a
 8007a98:	f000 fbf8 	bl	800828c <__assert_func>
 8007a9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007aa0:	6006      	str	r6, [r0, #0]
 8007aa2:	60c6      	str	r6, [r0, #12]
 8007aa4:	b13c      	cbz	r4, 8007ab6 <_Bfree+0x3a>
 8007aa6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007aa8:	6862      	ldr	r2, [r4, #4]
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ab0:	6021      	str	r1, [r4, #0]
 8007ab2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007ab6:	bd70      	pop	{r4, r5, r6, pc}
 8007ab8:	08008e1d 	.word	0x08008e1d
 8007abc:	08008ea4 	.word	0x08008ea4

08007ac0 <__multadd>:
 8007ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ac4:	690e      	ldr	r6, [r1, #16]
 8007ac6:	4607      	mov	r7, r0
 8007ac8:	4698      	mov	r8, r3
 8007aca:	460c      	mov	r4, r1
 8007acc:	f101 0014 	add.w	r0, r1, #20
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	6805      	ldr	r5, [r0, #0]
 8007ad4:	b2a9      	uxth	r1, r5
 8007ad6:	fb02 8101 	mla	r1, r2, r1, r8
 8007ada:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007ade:	0c2d      	lsrs	r5, r5, #16
 8007ae0:	fb02 c505 	mla	r5, r2, r5, ip
 8007ae4:	b289      	uxth	r1, r1
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007aec:	429e      	cmp	r6, r3
 8007aee:	f840 1b04 	str.w	r1, [r0], #4
 8007af2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007af6:	dcec      	bgt.n	8007ad2 <__multadd+0x12>
 8007af8:	f1b8 0f00 	cmp.w	r8, #0
 8007afc:	d022      	beq.n	8007b44 <__multadd+0x84>
 8007afe:	68a3      	ldr	r3, [r4, #8]
 8007b00:	42b3      	cmp	r3, r6
 8007b02:	dc19      	bgt.n	8007b38 <__multadd+0x78>
 8007b04:	6861      	ldr	r1, [r4, #4]
 8007b06:	4638      	mov	r0, r7
 8007b08:	3101      	adds	r1, #1
 8007b0a:	f7ff ff77 	bl	80079fc <_Balloc>
 8007b0e:	4605      	mov	r5, r0
 8007b10:	b928      	cbnz	r0, 8007b1e <__multadd+0x5e>
 8007b12:	4602      	mov	r2, r0
 8007b14:	4b0d      	ldr	r3, [pc, #52]	; (8007b4c <__multadd+0x8c>)
 8007b16:	480e      	ldr	r0, [pc, #56]	; (8007b50 <__multadd+0x90>)
 8007b18:	21b5      	movs	r1, #181	; 0xb5
 8007b1a:	f000 fbb7 	bl	800828c <__assert_func>
 8007b1e:	6922      	ldr	r2, [r4, #16]
 8007b20:	3202      	adds	r2, #2
 8007b22:	f104 010c 	add.w	r1, r4, #12
 8007b26:	0092      	lsls	r2, r2, #2
 8007b28:	300c      	adds	r0, #12
 8007b2a:	f7ff ff59 	bl	80079e0 <memcpy>
 8007b2e:	4621      	mov	r1, r4
 8007b30:	4638      	mov	r0, r7
 8007b32:	f7ff ffa3 	bl	8007a7c <_Bfree>
 8007b36:	462c      	mov	r4, r5
 8007b38:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007b3c:	3601      	adds	r6, #1
 8007b3e:	f8c3 8014 	str.w	r8, [r3, #20]
 8007b42:	6126      	str	r6, [r4, #16]
 8007b44:	4620      	mov	r0, r4
 8007b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b4a:	bf00      	nop
 8007b4c:	08008e93 	.word	0x08008e93
 8007b50:	08008ea4 	.word	0x08008ea4

08007b54 <__hi0bits>:
 8007b54:	0c03      	lsrs	r3, r0, #16
 8007b56:	041b      	lsls	r3, r3, #16
 8007b58:	b9d3      	cbnz	r3, 8007b90 <__hi0bits+0x3c>
 8007b5a:	0400      	lsls	r0, r0, #16
 8007b5c:	2310      	movs	r3, #16
 8007b5e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007b62:	bf04      	itt	eq
 8007b64:	0200      	lsleq	r0, r0, #8
 8007b66:	3308      	addeq	r3, #8
 8007b68:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007b6c:	bf04      	itt	eq
 8007b6e:	0100      	lsleq	r0, r0, #4
 8007b70:	3304      	addeq	r3, #4
 8007b72:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007b76:	bf04      	itt	eq
 8007b78:	0080      	lsleq	r0, r0, #2
 8007b7a:	3302      	addeq	r3, #2
 8007b7c:	2800      	cmp	r0, #0
 8007b7e:	db05      	blt.n	8007b8c <__hi0bits+0x38>
 8007b80:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007b84:	f103 0301 	add.w	r3, r3, #1
 8007b88:	bf08      	it	eq
 8007b8a:	2320      	moveq	r3, #32
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	4770      	bx	lr
 8007b90:	2300      	movs	r3, #0
 8007b92:	e7e4      	b.n	8007b5e <__hi0bits+0xa>

08007b94 <__lo0bits>:
 8007b94:	6803      	ldr	r3, [r0, #0]
 8007b96:	f013 0207 	ands.w	r2, r3, #7
 8007b9a:	4601      	mov	r1, r0
 8007b9c:	d00b      	beq.n	8007bb6 <__lo0bits+0x22>
 8007b9e:	07da      	lsls	r2, r3, #31
 8007ba0:	d424      	bmi.n	8007bec <__lo0bits+0x58>
 8007ba2:	0798      	lsls	r0, r3, #30
 8007ba4:	bf49      	itett	mi
 8007ba6:	085b      	lsrmi	r3, r3, #1
 8007ba8:	089b      	lsrpl	r3, r3, #2
 8007baa:	2001      	movmi	r0, #1
 8007bac:	600b      	strmi	r3, [r1, #0]
 8007bae:	bf5c      	itt	pl
 8007bb0:	600b      	strpl	r3, [r1, #0]
 8007bb2:	2002      	movpl	r0, #2
 8007bb4:	4770      	bx	lr
 8007bb6:	b298      	uxth	r0, r3
 8007bb8:	b9b0      	cbnz	r0, 8007be8 <__lo0bits+0x54>
 8007bba:	0c1b      	lsrs	r3, r3, #16
 8007bbc:	2010      	movs	r0, #16
 8007bbe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007bc2:	bf04      	itt	eq
 8007bc4:	0a1b      	lsreq	r3, r3, #8
 8007bc6:	3008      	addeq	r0, #8
 8007bc8:	071a      	lsls	r2, r3, #28
 8007bca:	bf04      	itt	eq
 8007bcc:	091b      	lsreq	r3, r3, #4
 8007bce:	3004      	addeq	r0, #4
 8007bd0:	079a      	lsls	r2, r3, #30
 8007bd2:	bf04      	itt	eq
 8007bd4:	089b      	lsreq	r3, r3, #2
 8007bd6:	3002      	addeq	r0, #2
 8007bd8:	07da      	lsls	r2, r3, #31
 8007bda:	d403      	bmi.n	8007be4 <__lo0bits+0x50>
 8007bdc:	085b      	lsrs	r3, r3, #1
 8007bde:	f100 0001 	add.w	r0, r0, #1
 8007be2:	d005      	beq.n	8007bf0 <__lo0bits+0x5c>
 8007be4:	600b      	str	r3, [r1, #0]
 8007be6:	4770      	bx	lr
 8007be8:	4610      	mov	r0, r2
 8007bea:	e7e8      	b.n	8007bbe <__lo0bits+0x2a>
 8007bec:	2000      	movs	r0, #0
 8007bee:	4770      	bx	lr
 8007bf0:	2020      	movs	r0, #32
 8007bf2:	4770      	bx	lr

08007bf4 <__i2b>:
 8007bf4:	b510      	push	{r4, lr}
 8007bf6:	460c      	mov	r4, r1
 8007bf8:	2101      	movs	r1, #1
 8007bfa:	f7ff feff 	bl	80079fc <_Balloc>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	b928      	cbnz	r0, 8007c0e <__i2b+0x1a>
 8007c02:	4b05      	ldr	r3, [pc, #20]	; (8007c18 <__i2b+0x24>)
 8007c04:	4805      	ldr	r0, [pc, #20]	; (8007c1c <__i2b+0x28>)
 8007c06:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007c0a:	f000 fb3f 	bl	800828c <__assert_func>
 8007c0e:	2301      	movs	r3, #1
 8007c10:	6144      	str	r4, [r0, #20]
 8007c12:	6103      	str	r3, [r0, #16]
 8007c14:	bd10      	pop	{r4, pc}
 8007c16:	bf00      	nop
 8007c18:	08008e93 	.word	0x08008e93
 8007c1c:	08008ea4 	.word	0x08008ea4

08007c20 <__multiply>:
 8007c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c24:	4614      	mov	r4, r2
 8007c26:	690a      	ldr	r2, [r1, #16]
 8007c28:	6923      	ldr	r3, [r4, #16]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	bfb8      	it	lt
 8007c2e:	460b      	movlt	r3, r1
 8007c30:	460d      	mov	r5, r1
 8007c32:	bfbc      	itt	lt
 8007c34:	4625      	movlt	r5, r4
 8007c36:	461c      	movlt	r4, r3
 8007c38:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007c3c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007c40:	68ab      	ldr	r3, [r5, #8]
 8007c42:	6869      	ldr	r1, [r5, #4]
 8007c44:	eb0a 0709 	add.w	r7, sl, r9
 8007c48:	42bb      	cmp	r3, r7
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	bfb8      	it	lt
 8007c4e:	3101      	addlt	r1, #1
 8007c50:	f7ff fed4 	bl	80079fc <_Balloc>
 8007c54:	b930      	cbnz	r0, 8007c64 <__multiply+0x44>
 8007c56:	4602      	mov	r2, r0
 8007c58:	4b42      	ldr	r3, [pc, #264]	; (8007d64 <__multiply+0x144>)
 8007c5a:	4843      	ldr	r0, [pc, #268]	; (8007d68 <__multiply+0x148>)
 8007c5c:	f240 115d 	movw	r1, #349	; 0x15d
 8007c60:	f000 fb14 	bl	800828c <__assert_func>
 8007c64:	f100 0614 	add.w	r6, r0, #20
 8007c68:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007c6c:	4633      	mov	r3, r6
 8007c6e:	2200      	movs	r2, #0
 8007c70:	4543      	cmp	r3, r8
 8007c72:	d31e      	bcc.n	8007cb2 <__multiply+0x92>
 8007c74:	f105 0c14 	add.w	ip, r5, #20
 8007c78:	f104 0314 	add.w	r3, r4, #20
 8007c7c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007c80:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007c84:	9202      	str	r2, [sp, #8]
 8007c86:	ebac 0205 	sub.w	r2, ip, r5
 8007c8a:	3a15      	subs	r2, #21
 8007c8c:	f022 0203 	bic.w	r2, r2, #3
 8007c90:	3204      	adds	r2, #4
 8007c92:	f105 0115 	add.w	r1, r5, #21
 8007c96:	458c      	cmp	ip, r1
 8007c98:	bf38      	it	cc
 8007c9a:	2204      	movcc	r2, #4
 8007c9c:	9201      	str	r2, [sp, #4]
 8007c9e:	9a02      	ldr	r2, [sp, #8]
 8007ca0:	9303      	str	r3, [sp, #12]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d808      	bhi.n	8007cb8 <__multiply+0x98>
 8007ca6:	2f00      	cmp	r7, #0
 8007ca8:	dc55      	bgt.n	8007d56 <__multiply+0x136>
 8007caa:	6107      	str	r7, [r0, #16]
 8007cac:	b005      	add	sp, #20
 8007cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cb2:	f843 2b04 	str.w	r2, [r3], #4
 8007cb6:	e7db      	b.n	8007c70 <__multiply+0x50>
 8007cb8:	f8b3 a000 	ldrh.w	sl, [r3]
 8007cbc:	f1ba 0f00 	cmp.w	sl, #0
 8007cc0:	d020      	beq.n	8007d04 <__multiply+0xe4>
 8007cc2:	f105 0e14 	add.w	lr, r5, #20
 8007cc6:	46b1      	mov	r9, r6
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007cce:	f8d9 b000 	ldr.w	fp, [r9]
 8007cd2:	b2a1      	uxth	r1, r4
 8007cd4:	fa1f fb8b 	uxth.w	fp, fp
 8007cd8:	fb0a b101 	mla	r1, sl, r1, fp
 8007cdc:	4411      	add	r1, r2
 8007cde:	f8d9 2000 	ldr.w	r2, [r9]
 8007ce2:	0c24      	lsrs	r4, r4, #16
 8007ce4:	0c12      	lsrs	r2, r2, #16
 8007ce6:	fb0a 2404 	mla	r4, sl, r4, r2
 8007cea:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007cee:	b289      	uxth	r1, r1
 8007cf0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007cf4:	45f4      	cmp	ip, lr
 8007cf6:	f849 1b04 	str.w	r1, [r9], #4
 8007cfa:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007cfe:	d8e4      	bhi.n	8007cca <__multiply+0xaa>
 8007d00:	9901      	ldr	r1, [sp, #4]
 8007d02:	5072      	str	r2, [r6, r1]
 8007d04:	9a03      	ldr	r2, [sp, #12]
 8007d06:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007d0a:	3304      	adds	r3, #4
 8007d0c:	f1b9 0f00 	cmp.w	r9, #0
 8007d10:	d01f      	beq.n	8007d52 <__multiply+0x132>
 8007d12:	6834      	ldr	r4, [r6, #0]
 8007d14:	f105 0114 	add.w	r1, r5, #20
 8007d18:	46b6      	mov	lr, r6
 8007d1a:	f04f 0a00 	mov.w	sl, #0
 8007d1e:	880a      	ldrh	r2, [r1, #0]
 8007d20:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007d24:	fb09 b202 	mla	r2, r9, r2, fp
 8007d28:	4492      	add	sl, r2
 8007d2a:	b2a4      	uxth	r4, r4
 8007d2c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007d30:	f84e 4b04 	str.w	r4, [lr], #4
 8007d34:	f851 4b04 	ldr.w	r4, [r1], #4
 8007d38:	f8be 2000 	ldrh.w	r2, [lr]
 8007d3c:	0c24      	lsrs	r4, r4, #16
 8007d3e:	fb09 2404 	mla	r4, r9, r4, r2
 8007d42:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007d46:	458c      	cmp	ip, r1
 8007d48:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007d4c:	d8e7      	bhi.n	8007d1e <__multiply+0xfe>
 8007d4e:	9a01      	ldr	r2, [sp, #4]
 8007d50:	50b4      	str	r4, [r6, r2]
 8007d52:	3604      	adds	r6, #4
 8007d54:	e7a3      	b.n	8007c9e <__multiply+0x7e>
 8007d56:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d1a5      	bne.n	8007caa <__multiply+0x8a>
 8007d5e:	3f01      	subs	r7, #1
 8007d60:	e7a1      	b.n	8007ca6 <__multiply+0x86>
 8007d62:	bf00      	nop
 8007d64:	08008e93 	.word	0x08008e93
 8007d68:	08008ea4 	.word	0x08008ea4

08007d6c <__pow5mult>:
 8007d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d70:	4615      	mov	r5, r2
 8007d72:	f012 0203 	ands.w	r2, r2, #3
 8007d76:	4606      	mov	r6, r0
 8007d78:	460f      	mov	r7, r1
 8007d7a:	d007      	beq.n	8007d8c <__pow5mult+0x20>
 8007d7c:	4c25      	ldr	r4, [pc, #148]	; (8007e14 <__pow5mult+0xa8>)
 8007d7e:	3a01      	subs	r2, #1
 8007d80:	2300      	movs	r3, #0
 8007d82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d86:	f7ff fe9b 	bl	8007ac0 <__multadd>
 8007d8a:	4607      	mov	r7, r0
 8007d8c:	10ad      	asrs	r5, r5, #2
 8007d8e:	d03d      	beq.n	8007e0c <__pow5mult+0xa0>
 8007d90:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007d92:	b97c      	cbnz	r4, 8007db4 <__pow5mult+0x48>
 8007d94:	2010      	movs	r0, #16
 8007d96:	f7ff fe1b 	bl	80079d0 <malloc>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	6270      	str	r0, [r6, #36]	; 0x24
 8007d9e:	b928      	cbnz	r0, 8007dac <__pow5mult+0x40>
 8007da0:	4b1d      	ldr	r3, [pc, #116]	; (8007e18 <__pow5mult+0xac>)
 8007da2:	481e      	ldr	r0, [pc, #120]	; (8007e1c <__pow5mult+0xb0>)
 8007da4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007da8:	f000 fa70 	bl	800828c <__assert_func>
 8007dac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007db0:	6004      	str	r4, [r0, #0]
 8007db2:	60c4      	str	r4, [r0, #12]
 8007db4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007db8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007dbc:	b94c      	cbnz	r4, 8007dd2 <__pow5mult+0x66>
 8007dbe:	f240 2171 	movw	r1, #625	; 0x271
 8007dc2:	4630      	mov	r0, r6
 8007dc4:	f7ff ff16 	bl	8007bf4 <__i2b>
 8007dc8:	2300      	movs	r3, #0
 8007dca:	f8c8 0008 	str.w	r0, [r8, #8]
 8007dce:	4604      	mov	r4, r0
 8007dd0:	6003      	str	r3, [r0, #0]
 8007dd2:	f04f 0900 	mov.w	r9, #0
 8007dd6:	07eb      	lsls	r3, r5, #31
 8007dd8:	d50a      	bpl.n	8007df0 <__pow5mult+0x84>
 8007dda:	4639      	mov	r1, r7
 8007ddc:	4622      	mov	r2, r4
 8007dde:	4630      	mov	r0, r6
 8007de0:	f7ff ff1e 	bl	8007c20 <__multiply>
 8007de4:	4639      	mov	r1, r7
 8007de6:	4680      	mov	r8, r0
 8007de8:	4630      	mov	r0, r6
 8007dea:	f7ff fe47 	bl	8007a7c <_Bfree>
 8007dee:	4647      	mov	r7, r8
 8007df0:	106d      	asrs	r5, r5, #1
 8007df2:	d00b      	beq.n	8007e0c <__pow5mult+0xa0>
 8007df4:	6820      	ldr	r0, [r4, #0]
 8007df6:	b938      	cbnz	r0, 8007e08 <__pow5mult+0x9c>
 8007df8:	4622      	mov	r2, r4
 8007dfa:	4621      	mov	r1, r4
 8007dfc:	4630      	mov	r0, r6
 8007dfe:	f7ff ff0f 	bl	8007c20 <__multiply>
 8007e02:	6020      	str	r0, [r4, #0]
 8007e04:	f8c0 9000 	str.w	r9, [r0]
 8007e08:	4604      	mov	r4, r0
 8007e0a:	e7e4      	b.n	8007dd6 <__pow5mult+0x6a>
 8007e0c:	4638      	mov	r0, r7
 8007e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e12:	bf00      	nop
 8007e14:	08008ff8 	.word	0x08008ff8
 8007e18:	08008e1d 	.word	0x08008e1d
 8007e1c:	08008ea4 	.word	0x08008ea4

08007e20 <__lshift>:
 8007e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e24:	460c      	mov	r4, r1
 8007e26:	6849      	ldr	r1, [r1, #4]
 8007e28:	6923      	ldr	r3, [r4, #16]
 8007e2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007e2e:	68a3      	ldr	r3, [r4, #8]
 8007e30:	4607      	mov	r7, r0
 8007e32:	4691      	mov	r9, r2
 8007e34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e38:	f108 0601 	add.w	r6, r8, #1
 8007e3c:	42b3      	cmp	r3, r6
 8007e3e:	db0b      	blt.n	8007e58 <__lshift+0x38>
 8007e40:	4638      	mov	r0, r7
 8007e42:	f7ff fddb 	bl	80079fc <_Balloc>
 8007e46:	4605      	mov	r5, r0
 8007e48:	b948      	cbnz	r0, 8007e5e <__lshift+0x3e>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	4b28      	ldr	r3, [pc, #160]	; (8007ef0 <__lshift+0xd0>)
 8007e4e:	4829      	ldr	r0, [pc, #164]	; (8007ef4 <__lshift+0xd4>)
 8007e50:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007e54:	f000 fa1a 	bl	800828c <__assert_func>
 8007e58:	3101      	adds	r1, #1
 8007e5a:	005b      	lsls	r3, r3, #1
 8007e5c:	e7ee      	b.n	8007e3c <__lshift+0x1c>
 8007e5e:	2300      	movs	r3, #0
 8007e60:	f100 0114 	add.w	r1, r0, #20
 8007e64:	f100 0210 	add.w	r2, r0, #16
 8007e68:	4618      	mov	r0, r3
 8007e6a:	4553      	cmp	r3, sl
 8007e6c:	db33      	blt.n	8007ed6 <__lshift+0xb6>
 8007e6e:	6920      	ldr	r0, [r4, #16]
 8007e70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e74:	f104 0314 	add.w	r3, r4, #20
 8007e78:	f019 091f 	ands.w	r9, r9, #31
 8007e7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007e84:	d02b      	beq.n	8007ede <__lshift+0xbe>
 8007e86:	f1c9 0e20 	rsb	lr, r9, #32
 8007e8a:	468a      	mov	sl, r1
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	6818      	ldr	r0, [r3, #0]
 8007e90:	fa00 f009 	lsl.w	r0, r0, r9
 8007e94:	4302      	orrs	r2, r0
 8007e96:	f84a 2b04 	str.w	r2, [sl], #4
 8007e9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e9e:	459c      	cmp	ip, r3
 8007ea0:	fa22 f20e 	lsr.w	r2, r2, lr
 8007ea4:	d8f3      	bhi.n	8007e8e <__lshift+0x6e>
 8007ea6:	ebac 0304 	sub.w	r3, ip, r4
 8007eaa:	3b15      	subs	r3, #21
 8007eac:	f023 0303 	bic.w	r3, r3, #3
 8007eb0:	3304      	adds	r3, #4
 8007eb2:	f104 0015 	add.w	r0, r4, #21
 8007eb6:	4584      	cmp	ip, r0
 8007eb8:	bf38      	it	cc
 8007eba:	2304      	movcc	r3, #4
 8007ebc:	50ca      	str	r2, [r1, r3]
 8007ebe:	b10a      	cbz	r2, 8007ec4 <__lshift+0xa4>
 8007ec0:	f108 0602 	add.w	r6, r8, #2
 8007ec4:	3e01      	subs	r6, #1
 8007ec6:	4638      	mov	r0, r7
 8007ec8:	612e      	str	r6, [r5, #16]
 8007eca:	4621      	mov	r1, r4
 8007ecc:	f7ff fdd6 	bl	8007a7c <_Bfree>
 8007ed0:	4628      	mov	r0, r5
 8007ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ed6:	f842 0f04 	str.w	r0, [r2, #4]!
 8007eda:	3301      	adds	r3, #1
 8007edc:	e7c5      	b.n	8007e6a <__lshift+0x4a>
 8007ede:	3904      	subs	r1, #4
 8007ee0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ee4:	f841 2f04 	str.w	r2, [r1, #4]!
 8007ee8:	459c      	cmp	ip, r3
 8007eea:	d8f9      	bhi.n	8007ee0 <__lshift+0xc0>
 8007eec:	e7ea      	b.n	8007ec4 <__lshift+0xa4>
 8007eee:	bf00      	nop
 8007ef0:	08008e93 	.word	0x08008e93
 8007ef4:	08008ea4 	.word	0x08008ea4

08007ef8 <__mcmp>:
 8007ef8:	b530      	push	{r4, r5, lr}
 8007efa:	6902      	ldr	r2, [r0, #16]
 8007efc:	690c      	ldr	r4, [r1, #16]
 8007efe:	1b12      	subs	r2, r2, r4
 8007f00:	d10e      	bne.n	8007f20 <__mcmp+0x28>
 8007f02:	f100 0314 	add.w	r3, r0, #20
 8007f06:	3114      	adds	r1, #20
 8007f08:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007f0c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007f10:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007f14:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007f18:	42a5      	cmp	r5, r4
 8007f1a:	d003      	beq.n	8007f24 <__mcmp+0x2c>
 8007f1c:	d305      	bcc.n	8007f2a <__mcmp+0x32>
 8007f1e:	2201      	movs	r2, #1
 8007f20:	4610      	mov	r0, r2
 8007f22:	bd30      	pop	{r4, r5, pc}
 8007f24:	4283      	cmp	r3, r0
 8007f26:	d3f3      	bcc.n	8007f10 <__mcmp+0x18>
 8007f28:	e7fa      	b.n	8007f20 <__mcmp+0x28>
 8007f2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f2e:	e7f7      	b.n	8007f20 <__mcmp+0x28>

08007f30 <__mdiff>:
 8007f30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f34:	460c      	mov	r4, r1
 8007f36:	4606      	mov	r6, r0
 8007f38:	4611      	mov	r1, r2
 8007f3a:	4620      	mov	r0, r4
 8007f3c:	4617      	mov	r7, r2
 8007f3e:	f7ff ffdb 	bl	8007ef8 <__mcmp>
 8007f42:	1e05      	subs	r5, r0, #0
 8007f44:	d110      	bne.n	8007f68 <__mdiff+0x38>
 8007f46:	4629      	mov	r1, r5
 8007f48:	4630      	mov	r0, r6
 8007f4a:	f7ff fd57 	bl	80079fc <_Balloc>
 8007f4e:	b930      	cbnz	r0, 8007f5e <__mdiff+0x2e>
 8007f50:	4b39      	ldr	r3, [pc, #228]	; (8008038 <__mdiff+0x108>)
 8007f52:	4602      	mov	r2, r0
 8007f54:	f240 2132 	movw	r1, #562	; 0x232
 8007f58:	4838      	ldr	r0, [pc, #224]	; (800803c <__mdiff+0x10c>)
 8007f5a:	f000 f997 	bl	800828c <__assert_func>
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007f64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f68:	bfa4      	itt	ge
 8007f6a:	463b      	movge	r3, r7
 8007f6c:	4627      	movge	r7, r4
 8007f6e:	4630      	mov	r0, r6
 8007f70:	6879      	ldr	r1, [r7, #4]
 8007f72:	bfa6      	itte	ge
 8007f74:	461c      	movge	r4, r3
 8007f76:	2500      	movge	r5, #0
 8007f78:	2501      	movlt	r5, #1
 8007f7a:	f7ff fd3f 	bl	80079fc <_Balloc>
 8007f7e:	b920      	cbnz	r0, 8007f8a <__mdiff+0x5a>
 8007f80:	4b2d      	ldr	r3, [pc, #180]	; (8008038 <__mdiff+0x108>)
 8007f82:	4602      	mov	r2, r0
 8007f84:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007f88:	e7e6      	b.n	8007f58 <__mdiff+0x28>
 8007f8a:	693e      	ldr	r6, [r7, #16]
 8007f8c:	60c5      	str	r5, [r0, #12]
 8007f8e:	6925      	ldr	r5, [r4, #16]
 8007f90:	f107 0114 	add.w	r1, r7, #20
 8007f94:	f104 0914 	add.w	r9, r4, #20
 8007f98:	f100 0e14 	add.w	lr, r0, #20
 8007f9c:	f107 0210 	add.w	r2, r7, #16
 8007fa0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007fa4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007fa8:	46f2      	mov	sl, lr
 8007faa:	2700      	movs	r7, #0
 8007fac:	f859 3b04 	ldr.w	r3, [r9], #4
 8007fb0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007fb4:	fa1f f883 	uxth.w	r8, r3
 8007fb8:	fa17 f78b 	uxtah	r7, r7, fp
 8007fbc:	0c1b      	lsrs	r3, r3, #16
 8007fbe:	eba7 0808 	sub.w	r8, r7, r8
 8007fc2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007fc6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007fca:	fa1f f888 	uxth.w	r8, r8
 8007fce:	141f      	asrs	r7, r3, #16
 8007fd0:	454d      	cmp	r5, r9
 8007fd2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007fd6:	f84a 3b04 	str.w	r3, [sl], #4
 8007fda:	d8e7      	bhi.n	8007fac <__mdiff+0x7c>
 8007fdc:	1b2b      	subs	r3, r5, r4
 8007fde:	3b15      	subs	r3, #21
 8007fe0:	f023 0303 	bic.w	r3, r3, #3
 8007fe4:	3304      	adds	r3, #4
 8007fe6:	3415      	adds	r4, #21
 8007fe8:	42a5      	cmp	r5, r4
 8007fea:	bf38      	it	cc
 8007fec:	2304      	movcc	r3, #4
 8007fee:	4419      	add	r1, r3
 8007ff0:	4473      	add	r3, lr
 8007ff2:	469e      	mov	lr, r3
 8007ff4:	460d      	mov	r5, r1
 8007ff6:	4565      	cmp	r5, ip
 8007ff8:	d30e      	bcc.n	8008018 <__mdiff+0xe8>
 8007ffa:	f10c 0203 	add.w	r2, ip, #3
 8007ffe:	1a52      	subs	r2, r2, r1
 8008000:	f022 0203 	bic.w	r2, r2, #3
 8008004:	3903      	subs	r1, #3
 8008006:	458c      	cmp	ip, r1
 8008008:	bf38      	it	cc
 800800a:	2200      	movcc	r2, #0
 800800c:	441a      	add	r2, r3
 800800e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008012:	b17b      	cbz	r3, 8008034 <__mdiff+0x104>
 8008014:	6106      	str	r6, [r0, #16]
 8008016:	e7a5      	b.n	8007f64 <__mdiff+0x34>
 8008018:	f855 8b04 	ldr.w	r8, [r5], #4
 800801c:	fa17 f488 	uxtah	r4, r7, r8
 8008020:	1422      	asrs	r2, r4, #16
 8008022:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008026:	b2a4      	uxth	r4, r4
 8008028:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800802c:	f84e 4b04 	str.w	r4, [lr], #4
 8008030:	1417      	asrs	r7, r2, #16
 8008032:	e7e0      	b.n	8007ff6 <__mdiff+0xc6>
 8008034:	3e01      	subs	r6, #1
 8008036:	e7ea      	b.n	800800e <__mdiff+0xde>
 8008038:	08008e93 	.word	0x08008e93
 800803c:	08008ea4 	.word	0x08008ea4

08008040 <__d2b>:
 8008040:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008044:	4689      	mov	r9, r1
 8008046:	2101      	movs	r1, #1
 8008048:	ec57 6b10 	vmov	r6, r7, d0
 800804c:	4690      	mov	r8, r2
 800804e:	f7ff fcd5 	bl	80079fc <_Balloc>
 8008052:	4604      	mov	r4, r0
 8008054:	b930      	cbnz	r0, 8008064 <__d2b+0x24>
 8008056:	4602      	mov	r2, r0
 8008058:	4b25      	ldr	r3, [pc, #148]	; (80080f0 <__d2b+0xb0>)
 800805a:	4826      	ldr	r0, [pc, #152]	; (80080f4 <__d2b+0xb4>)
 800805c:	f240 310a 	movw	r1, #778	; 0x30a
 8008060:	f000 f914 	bl	800828c <__assert_func>
 8008064:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008068:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800806c:	bb35      	cbnz	r5, 80080bc <__d2b+0x7c>
 800806e:	2e00      	cmp	r6, #0
 8008070:	9301      	str	r3, [sp, #4]
 8008072:	d028      	beq.n	80080c6 <__d2b+0x86>
 8008074:	4668      	mov	r0, sp
 8008076:	9600      	str	r6, [sp, #0]
 8008078:	f7ff fd8c 	bl	8007b94 <__lo0bits>
 800807c:	9900      	ldr	r1, [sp, #0]
 800807e:	b300      	cbz	r0, 80080c2 <__d2b+0x82>
 8008080:	9a01      	ldr	r2, [sp, #4]
 8008082:	f1c0 0320 	rsb	r3, r0, #32
 8008086:	fa02 f303 	lsl.w	r3, r2, r3
 800808a:	430b      	orrs	r3, r1
 800808c:	40c2      	lsrs	r2, r0
 800808e:	6163      	str	r3, [r4, #20]
 8008090:	9201      	str	r2, [sp, #4]
 8008092:	9b01      	ldr	r3, [sp, #4]
 8008094:	61a3      	str	r3, [r4, #24]
 8008096:	2b00      	cmp	r3, #0
 8008098:	bf14      	ite	ne
 800809a:	2202      	movne	r2, #2
 800809c:	2201      	moveq	r2, #1
 800809e:	6122      	str	r2, [r4, #16]
 80080a0:	b1d5      	cbz	r5, 80080d8 <__d2b+0x98>
 80080a2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80080a6:	4405      	add	r5, r0
 80080a8:	f8c9 5000 	str.w	r5, [r9]
 80080ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80080b0:	f8c8 0000 	str.w	r0, [r8]
 80080b4:	4620      	mov	r0, r4
 80080b6:	b003      	add	sp, #12
 80080b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080c0:	e7d5      	b.n	800806e <__d2b+0x2e>
 80080c2:	6161      	str	r1, [r4, #20]
 80080c4:	e7e5      	b.n	8008092 <__d2b+0x52>
 80080c6:	a801      	add	r0, sp, #4
 80080c8:	f7ff fd64 	bl	8007b94 <__lo0bits>
 80080cc:	9b01      	ldr	r3, [sp, #4]
 80080ce:	6163      	str	r3, [r4, #20]
 80080d0:	2201      	movs	r2, #1
 80080d2:	6122      	str	r2, [r4, #16]
 80080d4:	3020      	adds	r0, #32
 80080d6:	e7e3      	b.n	80080a0 <__d2b+0x60>
 80080d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80080dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80080e0:	f8c9 0000 	str.w	r0, [r9]
 80080e4:	6918      	ldr	r0, [r3, #16]
 80080e6:	f7ff fd35 	bl	8007b54 <__hi0bits>
 80080ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80080ee:	e7df      	b.n	80080b0 <__d2b+0x70>
 80080f0:	08008e93 	.word	0x08008e93
 80080f4:	08008ea4 	.word	0x08008ea4

080080f8 <_calloc_r>:
 80080f8:	b513      	push	{r0, r1, r4, lr}
 80080fa:	434a      	muls	r2, r1
 80080fc:	4611      	mov	r1, r2
 80080fe:	9201      	str	r2, [sp, #4]
 8008100:	f000 f85a 	bl	80081b8 <_malloc_r>
 8008104:	4604      	mov	r4, r0
 8008106:	b118      	cbz	r0, 8008110 <_calloc_r+0x18>
 8008108:	9a01      	ldr	r2, [sp, #4]
 800810a:	2100      	movs	r1, #0
 800810c:	f7fe f972 	bl	80063f4 <memset>
 8008110:	4620      	mov	r0, r4
 8008112:	b002      	add	sp, #8
 8008114:	bd10      	pop	{r4, pc}
	...

08008118 <_free_r>:
 8008118:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800811a:	2900      	cmp	r1, #0
 800811c:	d048      	beq.n	80081b0 <_free_r+0x98>
 800811e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008122:	9001      	str	r0, [sp, #4]
 8008124:	2b00      	cmp	r3, #0
 8008126:	f1a1 0404 	sub.w	r4, r1, #4
 800812a:	bfb8      	it	lt
 800812c:	18e4      	addlt	r4, r4, r3
 800812e:	f000 f8ef 	bl	8008310 <__malloc_lock>
 8008132:	4a20      	ldr	r2, [pc, #128]	; (80081b4 <_free_r+0x9c>)
 8008134:	9801      	ldr	r0, [sp, #4]
 8008136:	6813      	ldr	r3, [r2, #0]
 8008138:	4615      	mov	r5, r2
 800813a:	b933      	cbnz	r3, 800814a <_free_r+0x32>
 800813c:	6063      	str	r3, [r4, #4]
 800813e:	6014      	str	r4, [r2, #0]
 8008140:	b003      	add	sp, #12
 8008142:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008146:	f000 b8e9 	b.w	800831c <__malloc_unlock>
 800814a:	42a3      	cmp	r3, r4
 800814c:	d90b      	bls.n	8008166 <_free_r+0x4e>
 800814e:	6821      	ldr	r1, [r4, #0]
 8008150:	1862      	adds	r2, r4, r1
 8008152:	4293      	cmp	r3, r2
 8008154:	bf04      	itt	eq
 8008156:	681a      	ldreq	r2, [r3, #0]
 8008158:	685b      	ldreq	r3, [r3, #4]
 800815a:	6063      	str	r3, [r4, #4]
 800815c:	bf04      	itt	eq
 800815e:	1852      	addeq	r2, r2, r1
 8008160:	6022      	streq	r2, [r4, #0]
 8008162:	602c      	str	r4, [r5, #0]
 8008164:	e7ec      	b.n	8008140 <_free_r+0x28>
 8008166:	461a      	mov	r2, r3
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	b10b      	cbz	r3, 8008170 <_free_r+0x58>
 800816c:	42a3      	cmp	r3, r4
 800816e:	d9fa      	bls.n	8008166 <_free_r+0x4e>
 8008170:	6811      	ldr	r1, [r2, #0]
 8008172:	1855      	adds	r5, r2, r1
 8008174:	42a5      	cmp	r5, r4
 8008176:	d10b      	bne.n	8008190 <_free_r+0x78>
 8008178:	6824      	ldr	r4, [r4, #0]
 800817a:	4421      	add	r1, r4
 800817c:	1854      	adds	r4, r2, r1
 800817e:	42a3      	cmp	r3, r4
 8008180:	6011      	str	r1, [r2, #0]
 8008182:	d1dd      	bne.n	8008140 <_free_r+0x28>
 8008184:	681c      	ldr	r4, [r3, #0]
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	6053      	str	r3, [r2, #4]
 800818a:	4421      	add	r1, r4
 800818c:	6011      	str	r1, [r2, #0]
 800818e:	e7d7      	b.n	8008140 <_free_r+0x28>
 8008190:	d902      	bls.n	8008198 <_free_r+0x80>
 8008192:	230c      	movs	r3, #12
 8008194:	6003      	str	r3, [r0, #0]
 8008196:	e7d3      	b.n	8008140 <_free_r+0x28>
 8008198:	6825      	ldr	r5, [r4, #0]
 800819a:	1961      	adds	r1, r4, r5
 800819c:	428b      	cmp	r3, r1
 800819e:	bf04      	itt	eq
 80081a0:	6819      	ldreq	r1, [r3, #0]
 80081a2:	685b      	ldreq	r3, [r3, #4]
 80081a4:	6063      	str	r3, [r4, #4]
 80081a6:	bf04      	itt	eq
 80081a8:	1949      	addeq	r1, r1, r5
 80081aa:	6021      	streq	r1, [r4, #0]
 80081ac:	6054      	str	r4, [r2, #4]
 80081ae:	e7c7      	b.n	8008140 <_free_r+0x28>
 80081b0:	b003      	add	sp, #12
 80081b2:	bd30      	pop	{r4, r5, pc}
 80081b4:	20000228 	.word	0x20000228

080081b8 <_malloc_r>:
 80081b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ba:	1ccd      	adds	r5, r1, #3
 80081bc:	f025 0503 	bic.w	r5, r5, #3
 80081c0:	3508      	adds	r5, #8
 80081c2:	2d0c      	cmp	r5, #12
 80081c4:	bf38      	it	cc
 80081c6:	250c      	movcc	r5, #12
 80081c8:	2d00      	cmp	r5, #0
 80081ca:	4606      	mov	r6, r0
 80081cc:	db01      	blt.n	80081d2 <_malloc_r+0x1a>
 80081ce:	42a9      	cmp	r1, r5
 80081d0:	d903      	bls.n	80081da <_malloc_r+0x22>
 80081d2:	230c      	movs	r3, #12
 80081d4:	6033      	str	r3, [r6, #0]
 80081d6:	2000      	movs	r0, #0
 80081d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081da:	f000 f899 	bl	8008310 <__malloc_lock>
 80081de:	4921      	ldr	r1, [pc, #132]	; (8008264 <_malloc_r+0xac>)
 80081e0:	680a      	ldr	r2, [r1, #0]
 80081e2:	4614      	mov	r4, r2
 80081e4:	b99c      	cbnz	r4, 800820e <_malloc_r+0x56>
 80081e6:	4f20      	ldr	r7, [pc, #128]	; (8008268 <_malloc_r+0xb0>)
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	b923      	cbnz	r3, 80081f6 <_malloc_r+0x3e>
 80081ec:	4621      	mov	r1, r4
 80081ee:	4630      	mov	r0, r6
 80081f0:	f000 f83c 	bl	800826c <_sbrk_r>
 80081f4:	6038      	str	r0, [r7, #0]
 80081f6:	4629      	mov	r1, r5
 80081f8:	4630      	mov	r0, r6
 80081fa:	f000 f837 	bl	800826c <_sbrk_r>
 80081fe:	1c43      	adds	r3, r0, #1
 8008200:	d123      	bne.n	800824a <_malloc_r+0x92>
 8008202:	230c      	movs	r3, #12
 8008204:	6033      	str	r3, [r6, #0]
 8008206:	4630      	mov	r0, r6
 8008208:	f000 f888 	bl	800831c <__malloc_unlock>
 800820c:	e7e3      	b.n	80081d6 <_malloc_r+0x1e>
 800820e:	6823      	ldr	r3, [r4, #0]
 8008210:	1b5b      	subs	r3, r3, r5
 8008212:	d417      	bmi.n	8008244 <_malloc_r+0x8c>
 8008214:	2b0b      	cmp	r3, #11
 8008216:	d903      	bls.n	8008220 <_malloc_r+0x68>
 8008218:	6023      	str	r3, [r4, #0]
 800821a:	441c      	add	r4, r3
 800821c:	6025      	str	r5, [r4, #0]
 800821e:	e004      	b.n	800822a <_malloc_r+0x72>
 8008220:	6863      	ldr	r3, [r4, #4]
 8008222:	42a2      	cmp	r2, r4
 8008224:	bf0c      	ite	eq
 8008226:	600b      	streq	r3, [r1, #0]
 8008228:	6053      	strne	r3, [r2, #4]
 800822a:	4630      	mov	r0, r6
 800822c:	f000 f876 	bl	800831c <__malloc_unlock>
 8008230:	f104 000b 	add.w	r0, r4, #11
 8008234:	1d23      	adds	r3, r4, #4
 8008236:	f020 0007 	bic.w	r0, r0, #7
 800823a:	1ac2      	subs	r2, r0, r3
 800823c:	d0cc      	beq.n	80081d8 <_malloc_r+0x20>
 800823e:	1a1b      	subs	r3, r3, r0
 8008240:	50a3      	str	r3, [r4, r2]
 8008242:	e7c9      	b.n	80081d8 <_malloc_r+0x20>
 8008244:	4622      	mov	r2, r4
 8008246:	6864      	ldr	r4, [r4, #4]
 8008248:	e7cc      	b.n	80081e4 <_malloc_r+0x2c>
 800824a:	1cc4      	adds	r4, r0, #3
 800824c:	f024 0403 	bic.w	r4, r4, #3
 8008250:	42a0      	cmp	r0, r4
 8008252:	d0e3      	beq.n	800821c <_malloc_r+0x64>
 8008254:	1a21      	subs	r1, r4, r0
 8008256:	4630      	mov	r0, r6
 8008258:	f000 f808 	bl	800826c <_sbrk_r>
 800825c:	3001      	adds	r0, #1
 800825e:	d1dd      	bne.n	800821c <_malloc_r+0x64>
 8008260:	e7cf      	b.n	8008202 <_malloc_r+0x4a>
 8008262:	bf00      	nop
 8008264:	20000228 	.word	0x20000228
 8008268:	2000022c 	.word	0x2000022c

0800826c <_sbrk_r>:
 800826c:	b538      	push	{r3, r4, r5, lr}
 800826e:	4d06      	ldr	r5, [pc, #24]	; (8008288 <_sbrk_r+0x1c>)
 8008270:	2300      	movs	r3, #0
 8008272:	4604      	mov	r4, r0
 8008274:	4608      	mov	r0, r1
 8008276:	602b      	str	r3, [r5, #0]
 8008278:	f7fd fc1e 	bl	8005ab8 <_sbrk>
 800827c:	1c43      	adds	r3, r0, #1
 800827e:	d102      	bne.n	8008286 <_sbrk_r+0x1a>
 8008280:	682b      	ldr	r3, [r5, #0]
 8008282:	b103      	cbz	r3, 8008286 <_sbrk_r+0x1a>
 8008284:	6023      	str	r3, [r4, #0]
 8008286:	bd38      	pop	{r3, r4, r5, pc}
 8008288:	200003ec 	.word	0x200003ec

0800828c <__assert_func>:
 800828c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800828e:	4614      	mov	r4, r2
 8008290:	461a      	mov	r2, r3
 8008292:	4b09      	ldr	r3, [pc, #36]	; (80082b8 <__assert_func+0x2c>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4605      	mov	r5, r0
 8008298:	68d8      	ldr	r0, [r3, #12]
 800829a:	b14c      	cbz	r4, 80082b0 <__assert_func+0x24>
 800829c:	4b07      	ldr	r3, [pc, #28]	; (80082bc <__assert_func+0x30>)
 800829e:	9100      	str	r1, [sp, #0]
 80082a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80082a4:	4906      	ldr	r1, [pc, #24]	; (80082c0 <__assert_func+0x34>)
 80082a6:	462b      	mov	r3, r5
 80082a8:	f000 f80e 	bl	80082c8 <fiprintf>
 80082ac:	f000 fa64 	bl	8008778 <abort>
 80082b0:	4b04      	ldr	r3, [pc, #16]	; (80082c4 <__assert_func+0x38>)
 80082b2:	461c      	mov	r4, r3
 80082b4:	e7f3      	b.n	800829e <__assert_func+0x12>
 80082b6:	bf00      	nop
 80082b8:	20000014 	.word	0x20000014
 80082bc:	08009004 	.word	0x08009004
 80082c0:	08009011 	.word	0x08009011
 80082c4:	0800903f 	.word	0x0800903f

080082c8 <fiprintf>:
 80082c8:	b40e      	push	{r1, r2, r3}
 80082ca:	b503      	push	{r0, r1, lr}
 80082cc:	4601      	mov	r1, r0
 80082ce:	ab03      	add	r3, sp, #12
 80082d0:	4805      	ldr	r0, [pc, #20]	; (80082e8 <fiprintf+0x20>)
 80082d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80082d6:	6800      	ldr	r0, [r0, #0]
 80082d8:	9301      	str	r3, [sp, #4]
 80082da:	f000 f84f 	bl	800837c <_vfiprintf_r>
 80082de:	b002      	add	sp, #8
 80082e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80082e4:	b003      	add	sp, #12
 80082e6:	4770      	bx	lr
 80082e8:	20000014 	.word	0x20000014

080082ec <__ascii_mbtowc>:
 80082ec:	b082      	sub	sp, #8
 80082ee:	b901      	cbnz	r1, 80082f2 <__ascii_mbtowc+0x6>
 80082f0:	a901      	add	r1, sp, #4
 80082f2:	b142      	cbz	r2, 8008306 <__ascii_mbtowc+0x1a>
 80082f4:	b14b      	cbz	r3, 800830a <__ascii_mbtowc+0x1e>
 80082f6:	7813      	ldrb	r3, [r2, #0]
 80082f8:	600b      	str	r3, [r1, #0]
 80082fa:	7812      	ldrb	r2, [r2, #0]
 80082fc:	1e10      	subs	r0, r2, #0
 80082fe:	bf18      	it	ne
 8008300:	2001      	movne	r0, #1
 8008302:	b002      	add	sp, #8
 8008304:	4770      	bx	lr
 8008306:	4610      	mov	r0, r2
 8008308:	e7fb      	b.n	8008302 <__ascii_mbtowc+0x16>
 800830a:	f06f 0001 	mvn.w	r0, #1
 800830e:	e7f8      	b.n	8008302 <__ascii_mbtowc+0x16>

08008310 <__malloc_lock>:
 8008310:	4801      	ldr	r0, [pc, #4]	; (8008318 <__malloc_lock+0x8>)
 8008312:	f000 bbf1 	b.w	8008af8 <__retarget_lock_acquire_recursive>
 8008316:	bf00      	nop
 8008318:	200003f4 	.word	0x200003f4

0800831c <__malloc_unlock>:
 800831c:	4801      	ldr	r0, [pc, #4]	; (8008324 <__malloc_unlock+0x8>)
 800831e:	f000 bbec 	b.w	8008afa <__retarget_lock_release_recursive>
 8008322:	bf00      	nop
 8008324:	200003f4 	.word	0x200003f4

08008328 <__sfputc_r>:
 8008328:	6893      	ldr	r3, [r2, #8]
 800832a:	3b01      	subs	r3, #1
 800832c:	2b00      	cmp	r3, #0
 800832e:	b410      	push	{r4}
 8008330:	6093      	str	r3, [r2, #8]
 8008332:	da08      	bge.n	8008346 <__sfputc_r+0x1e>
 8008334:	6994      	ldr	r4, [r2, #24]
 8008336:	42a3      	cmp	r3, r4
 8008338:	db01      	blt.n	800833e <__sfputc_r+0x16>
 800833a:	290a      	cmp	r1, #10
 800833c:	d103      	bne.n	8008346 <__sfputc_r+0x1e>
 800833e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008342:	f000 b94b 	b.w	80085dc <__swbuf_r>
 8008346:	6813      	ldr	r3, [r2, #0]
 8008348:	1c58      	adds	r0, r3, #1
 800834a:	6010      	str	r0, [r2, #0]
 800834c:	7019      	strb	r1, [r3, #0]
 800834e:	4608      	mov	r0, r1
 8008350:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008354:	4770      	bx	lr

08008356 <__sfputs_r>:
 8008356:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008358:	4606      	mov	r6, r0
 800835a:	460f      	mov	r7, r1
 800835c:	4614      	mov	r4, r2
 800835e:	18d5      	adds	r5, r2, r3
 8008360:	42ac      	cmp	r4, r5
 8008362:	d101      	bne.n	8008368 <__sfputs_r+0x12>
 8008364:	2000      	movs	r0, #0
 8008366:	e007      	b.n	8008378 <__sfputs_r+0x22>
 8008368:	f814 1b01 	ldrb.w	r1, [r4], #1
 800836c:	463a      	mov	r2, r7
 800836e:	4630      	mov	r0, r6
 8008370:	f7ff ffda 	bl	8008328 <__sfputc_r>
 8008374:	1c43      	adds	r3, r0, #1
 8008376:	d1f3      	bne.n	8008360 <__sfputs_r+0xa>
 8008378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800837c <_vfiprintf_r>:
 800837c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008380:	460d      	mov	r5, r1
 8008382:	b09d      	sub	sp, #116	; 0x74
 8008384:	4614      	mov	r4, r2
 8008386:	4698      	mov	r8, r3
 8008388:	4606      	mov	r6, r0
 800838a:	b118      	cbz	r0, 8008394 <_vfiprintf_r+0x18>
 800838c:	6983      	ldr	r3, [r0, #24]
 800838e:	b90b      	cbnz	r3, 8008394 <_vfiprintf_r+0x18>
 8008390:	f000 fb14 	bl	80089bc <__sinit>
 8008394:	4b89      	ldr	r3, [pc, #548]	; (80085bc <_vfiprintf_r+0x240>)
 8008396:	429d      	cmp	r5, r3
 8008398:	d11b      	bne.n	80083d2 <_vfiprintf_r+0x56>
 800839a:	6875      	ldr	r5, [r6, #4]
 800839c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800839e:	07d9      	lsls	r1, r3, #31
 80083a0:	d405      	bmi.n	80083ae <_vfiprintf_r+0x32>
 80083a2:	89ab      	ldrh	r3, [r5, #12]
 80083a4:	059a      	lsls	r2, r3, #22
 80083a6:	d402      	bmi.n	80083ae <_vfiprintf_r+0x32>
 80083a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083aa:	f000 fba5 	bl	8008af8 <__retarget_lock_acquire_recursive>
 80083ae:	89ab      	ldrh	r3, [r5, #12]
 80083b0:	071b      	lsls	r3, r3, #28
 80083b2:	d501      	bpl.n	80083b8 <_vfiprintf_r+0x3c>
 80083b4:	692b      	ldr	r3, [r5, #16]
 80083b6:	b9eb      	cbnz	r3, 80083f4 <_vfiprintf_r+0x78>
 80083b8:	4629      	mov	r1, r5
 80083ba:	4630      	mov	r0, r6
 80083bc:	f000 f96e 	bl	800869c <__swsetup_r>
 80083c0:	b1c0      	cbz	r0, 80083f4 <_vfiprintf_r+0x78>
 80083c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083c4:	07dc      	lsls	r4, r3, #31
 80083c6:	d50e      	bpl.n	80083e6 <_vfiprintf_r+0x6a>
 80083c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083cc:	b01d      	add	sp, #116	; 0x74
 80083ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083d2:	4b7b      	ldr	r3, [pc, #492]	; (80085c0 <_vfiprintf_r+0x244>)
 80083d4:	429d      	cmp	r5, r3
 80083d6:	d101      	bne.n	80083dc <_vfiprintf_r+0x60>
 80083d8:	68b5      	ldr	r5, [r6, #8]
 80083da:	e7df      	b.n	800839c <_vfiprintf_r+0x20>
 80083dc:	4b79      	ldr	r3, [pc, #484]	; (80085c4 <_vfiprintf_r+0x248>)
 80083de:	429d      	cmp	r5, r3
 80083e0:	bf08      	it	eq
 80083e2:	68f5      	ldreq	r5, [r6, #12]
 80083e4:	e7da      	b.n	800839c <_vfiprintf_r+0x20>
 80083e6:	89ab      	ldrh	r3, [r5, #12]
 80083e8:	0598      	lsls	r0, r3, #22
 80083ea:	d4ed      	bmi.n	80083c8 <_vfiprintf_r+0x4c>
 80083ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083ee:	f000 fb84 	bl	8008afa <__retarget_lock_release_recursive>
 80083f2:	e7e9      	b.n	80083c8 <_vfiprintf_r+0x4c>
 80083f4:	2300      	movs	r3, #0
 80083f6:	9309      	str	r3, [sp, #36]	; 0x24
 80083f8:	2320      	movs	r3, #32
 80083fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80083fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8008402:	2330      	movs	r3, #48	; 0x30
 8008404:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80085c8 <_vfiprintf_r+0x24c>
 8008408:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800840c:	f04f 0901 	mov.w	r9, #1
 8008410:	4623      	mov	r3, r4
 8008412:	469a      	mov	sl, r3
 8008414:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008418:	b10a      	cbz	r2, 800841e <_vfiprintf_r+0xa2>
 800841a:	2a25      	cmp	r2, #37	; 0x25
 800841c:	d1f9      	bne.n	8008412 <_vfiprintf_r+0x96>
 800841e:	ebba 0b04 	subs.w	fp, sl, r4
 8008422:	d00b      	beq.n	800843c <_vfiprintf_r+0xc0>
 8008424:	465b      	mov	r3, fp
 8008426:	4622      	mov	r2, r4
 8008428:	4629      	mov	r1, r5
 800842a:	4630      	mov	r0, r6
 800842c:	f7ff ff93 	bl	8008356 <__sfputs_r>
 8008430:	3001      	adds	r0, #1
 8008432:	f000 80aa 	beq.w	800858a <_vfiprintf_r+0x20e>
 8008436:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008438:	445a      	add	r2, fp
 800843a:	9209      	str	r2, [sp, #36]	; 0x24
 800843c:	f89a 3000 	ldrb.w	r3, [sl]
 8008440:	2b00      	cmp	r3, #0
 8008442:	f000 80a2 	beq.w	800858a <_vfiprintf_r+0x20e>
 8008446:	2300      	movs	r3, #0
 8008448:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800844c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008450:	f10a 0a01 	add.w	sl, sl, #1
 8008454:	9304      	str	r3, [sp, #16]
 8008456:	9307      	str	r3, [sp, #28]
 8008458:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800845c:	931a      	str	r3, [sp, #104]	; 0x68
 800845e:	4654      	mov	r4, sl
 8008460:	2205      	movs	r2, #5
 8008462:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008466:	4858      	ldr	r0, [pc, #352]	; (80085c8 <_vfiprintf_r+0x24c>)
 8008468:	f7f7 feba 	bl	80001e0 <memchr>
 800846c:	9a04      	ldr	r2, [sp, #16]
 800846e:	b9d8      	cbnz	r0, 80084a8 <_vfiprintf_r+0x12c>
 8008470:	06d1      	lsls	r1, r2, #27
 8008472:	bf44      	itt	mi
 8008474:	2320      	movmi	r3, #32
 8008476:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800847a:	0713      	lsls	r3, r2, #28
 800847c:	bf44      	itt	mi
 800847e:	232b      	movmi	r3, #43	; 0x2b
 8008480:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008484:	f89a 3000 	ldrb.w	r3, [sl]
 8008488:	2b2a      	cmp	r3, #42	; 0x2a
 800848a:	d015      	beq.n	80084b8 <_vfiprintf_r+0x13c>
 800848c:	9a07      	ldr	r2, [sp, #28]
 800848e:	4654      	mov	r4, sl
 8008490:	2000      	movs	r0, #0
 8008492:	f04f 0c0a 	mov.w	ip, #10
 8008496:	4621      	mov	r1, r4
 8008498:	f811 3b01 	ldrb.w	r3, [r1], #1
 800849c:	3b30      	subs	r3, #48	; 0x30
 800849e:	2b09      	cmp	r3, #9
 80084a0:	d94e      	bls.n	8008540 <_vfiprintf_r+0x1c4>
 80084a2:	b1b0      	cbz	r0, 80084d2 <_vfiprintf_r+0x156>
 80084a4:	9207      	str	r2, [sp, #28]
 80084a6:	e014      	b.n	80084d2 <_vfiprintf_r+0x156>
 80084a8:	eba0 0308 	sub.w	r3, r0, r8
 80084ac:	fa09 f303 	lsl.w	r3, r9, r3
 80084b0:	4313      	orrs	r3, r2
 80084b2:	9304      	str	r3, [sp, #16]
 80084b4:	46a2      	mov	sl, r4
 80084b6:	e7d2      	b.n	800845e <_vfiprintf_r+0xe2>
 80084b8:	9b03      	ldr	r3, [sp, #12]
 80084ba:	1d19      	adds	r1, r3, #4
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	9103      	str	r1, [sp, #12]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	bfbb      	ittet	lt
 80084c4:	425b      	neglt	r3, r3
 80084c6:	f042 0202 	orrlt.w	r2, r2, #2
 80084ca:	9307      	strge	r3, [sp, #28]
 80084cc:	9307      	strlt	r3, [sp, #28]
 80084ce:	bfb8      	it	lt
 80084d0:	9204      	strlt	r2, [sp, #16]
 80084d2:	7823      	ldrb	r3, [r4, #0]
 80084d4:	2b2e      	cmp	r3, #46	; 0x2e
 80084d6:	d10c      	bne.n	80084f2 <_vfiprintf_r+0x176>
 80084d8:	7863      	ldrb	r3, [r4, #1]
 80084da:	2b2a      	cmp	r3, #42	; 0x2a
 80084dc:	d135      	bne.n	800854a <_vfiprintf_r+0x1ce>
 80084de:	9b03      	ldr	r3, [sp, #12]
 80084e0:	1d1a      	adds	r2, r3, #4
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	9203      	str	r2, [sp, #12]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	bfb8      	it	lt
 80084ea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80084ee:	3402      	adds	r4, #2
 80084f0:	9305      	str	r3, [sp, #20]
 80084f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80085d8 <_vfiprintf_r+0x25c>
 80084f6:	7821      	ldrb	r1, [r4, #0]
 80084f8:	2203      	movs	r2, #3
 80084fa:	4650      	mov	r0, sl
 80084fc:	f7f7 fe70 	bl	80001e0 <memchr>
 8008500:	b140      	cbz	r0, 8008514 <_vfiprintf_r+0x198>
 8008502:	2340      	movs	r3, #64	; 0x40
 8008504:	eba0 000a 	sub.w	r0, r0, sl
 8008508:	fa03 f000 	lsl.w	r0, r3, r0
 800850c:	9b04      	ldr	r3, [sp, #16]
 800850e:	4303      	orrs	r3, r0
 8008510:	3401      	adds	r4, #1
 8008512:	9304      	str	r3, [sp, #16]
 8008514:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008518:	482c      	ldr	r0, [pc, #176]	; (80085cc <_vfiprintf_r+0x250>)
 800851a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800851e:	2206      	movs	r2, #6
 8008520:	f7f7 fe5e 	bl	80001e0 <memchr>
 8008524:	2800      	cmp	r0, #0
 8008526:	d03f      	beq.n	80085a8 <_vfiprintf_r+0x22c>
 8008528:	4b29      	ldr	r3, [pc, #164]	; (80085d0 <_vfiprintf_r+0x254>)
 800852a:	bb1b      	cbnz	r3, 8008574 <_vfiprintf_r+0x1f8>
 800852c:	9b03      	ldr	r3, [sp, #12]
 800852e:	3307      	adds	r3, #7
 8008530:	f023 0307 	bic.w	r3, r3, #7
 8008534:	3308      	adds	r3, #8
 8008536:	9303      	str	r3, [sp, #12]
 8008538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800853a:	443b      	add	r3, r7
 800853c:	9309      	str	r3, [sp, #36]	; 0x24
 800853e:	e767      	b.n	8008410 <_vfiprintf_r+0x94>
 8008540:	fb0c 3202 	mla	r2, ip, r2, r3
 8008544:	460c      	mov	r4, r1
 8008546:	2001      	movs	r0, #1
 8008548:	e7a5      	b.n	8008496 <_vfiprintf_r+0x11a>
 800854a:	2300      	movs	r3, #0
 800854c:	3401      	adds	r4, #1
 800854e:	9305      	str	r3, [sp, #20]
 8008550:	4619      	mov	r1, r3
 8008552:	f04f 0c0a 	mov.w	ip, #10
 8008556:	4620      	mov	r0, r4
 8008558:	f810 2b01 	ldrb.w	r2, [r0], #1
 800855c:	3a30      	subs	r2, #48	; 0x30
 800855e:	2a09      	cmp	r2, #9
 8008560:	d903      	bls.n	800856a <_vfiprintf_r+0x1ee>
 8008562:	2b00      	cmp	r3, #0
 8008564:	d0c5      	beq.n	80084f2 <_vfiprintf_r+0x176>
 8008566:	9105      	str	r1, [sp, #20]
 8008568:	e7c3      	b.n	80084f2 <_vfiprintf_r+0x176>
 800856a:	fb0c 2101 	mla	r1, ip, r1, r2
 800856e:	4604      	mov	r4, r0
 8008570:	2301      	movs	r3, #1
 8008572:	e7f0      	b.n	8008556 <_vfiprintf_r+0x1da>
 8008574:	ab03      	add	r3, sp, #12
 8008576:	9300      	str	r3, [sp, #0]
 8008578:	462a      	mov	r2, r5
 800857a:	4b16      	ldr	r3, [pc, #88]	; (80085d4 <_vfiprintf_r+0x258>)
 800857c:	a904      	add	r1, sp, #16
 800857e:	4630      	mov	r0, r6
 8008580:	f7fd ffe0 	bl	8006544 <_printf_float>
 8008584:	4607      	mov	r7, r0
 8008586:	1c78      	adds	r0, r7, #1
 8008588:	d1d6      	bne.n	8008538 <_vfiprintf_r+0x1bc>
 800858a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800858c:	07d9      	lsls	r1, r3, #31
 800858e:	d405      	bmi.n	800859c <_vfiprintf_r+0x220>
 8008590:	89ab      	ldrh	r3, [r5, #12]
 8008592:	059a      	lsls	r2, r3, #22
 8008594:	d402      	bmi.n	800859c <_vfiprintf_r+0x220>
 8008596:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008598:	f000 faaf 	bl	8008afa <__retarget_lock_release_recursive>
 800859c:	89ab      	ldrh	r3, [r5, #12]
 800859e:	065b      	lsls	r3, r3, #25
 80085a0:	f53f af12 	bmi.w	80083c8 <_vfiprintf_r+0x4c>
 80085a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085a6:	e711      	b.n	80083cc <_vfiprintf_r+0x50>
 80085a8:	ab03      	add	r3, sp, #12
 80085aa:	9300      	str	r3, [sp, #0]
 80085ac:	462a      	mov	r2, r5
 80085ae:	4b09      	ldr	r3, [pc, #36]	; (80085d4 <_vfiprintf_r+0x258>)
 80085b0:	a904      	add	r1, sp, #16
 80085b2:	4630      	mov	r0, r6
 80085b4:	f7fe fa6a 	bl	8006a8c <_printf_i>
 80085b8:	e7e4      	b.n	8008584 <_vfiprintf_r+0x208>
 80085ba:	bf00      	nop
 80085bc:	0800917c 	.word	0x0800917c
 80085c0:	0800919c 	.word	0x0800919c
 80085c4:	0800915c 	.word	0x0800915c
 80085c8:	0800904a 	.word	0x0800904a
 80085cc:	08009054 	.word	0x08009054
 80085d0:	08006545 	.word	0x08006545
 80085d4:	08008357 	.word	0x08008357
 80085d8:	08009050 	.word	0x08009050

080085dc <__swbuf_r>:
 80085dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085de:	460e      	mov	r6, r1
 80085e0:	4614      	mov	r4, r2
 80085e2:	4605      	mov	r5, r0
 80085e4:	b118      	cbz	r0, 80085ee <__swbuf_r+0x12>
 80085e6:	6983      	ldr	r3, [r0, #24]
 80085e8:	b90b      	cbnz	r3, 80085ee <__swbuf_r+0x12>
 80085ea:	f000 f9e7 	bl	80089bc <__sinit>
 80085ee:	4b21      	ldr	r3, [pc, #132]	; (8008674 <__swbuf_r+0x98>)
 80085f0:	429c      	cmp	r4, r3
 80085f2:	d12b      	bne.n	800864c <__swbuf_r+0x70>
 80085f4:	686c      	ldr	r4, [r5, #4]
 80085f6:	69a3      	ldr	r3, [r4, #24]
 80085f8:	60a3      	str	r3, [r4, #8]
 80085fa:	89a3      	ldrh	r3, [r4, #12]
 80085fc:	071a      	lsls	r2, r3, #28
 80085fe:	d52f      	bpl.n	8008660 <__swbuf_r+0x84>
 8008600:	6923      	ldr	r3, [r4, #16]
 8008602:	b36b      	cbz	r3, 8008660 <__swbuf_r+0x84>
 8008604:	6923      	ldr	r3, [r4, #16]
 8008606:	6820      	ldr	r0, [r4, #0]
 8008608:	1ac0      	subs	r0, r0, r3
 800860a:	6963      	ldr	r3, [r4, #20]
 800860c:	b2f6      	uxtb	r6, r6
 800860e:	4283      	cmp	r3, r0
 8008610:	4637      	mov	r7, r6
 8008612:	dc04      	bgt.n	800861e <__swbuf_r+0x42>
 8008614:	4621      	mov	r1, r4
 8008616:	4628      	mov	r0, r5
 8008618:	f000 f93c 	bl	8008894 <_fflush_r>
 800861c:	bb30      	cbnz	r0, 800866c <__swbuf_r+0x90>
 800861e:	68a3      	ldr	r3, [r4, #8]
 8008620:	3b01      	subs	r3, #1
 8008622:	60a3      	str	r3, [r4, #8]
 8008624:	6823      	ldr	r3, [r4, #0]
 8008626:	1c5a      	adds	r2, r3, #1
 8008628:	6022      	str	r2, [r4, #0]
 800862a:	701e      	strb	r6, [r3, #0]
 800862c:	6963      	ldr	r3, [r4, #20]
 800862e:	3001      	adds	r0, #1
 8008630:	4283      	cmp	r3, r0
 8008632:	d004      	beq.n	800863e <__swbuf_r+0x62>
 8008634:	89a3      	ldrh	r3, [r4, #12]
 8008636:	07db      	lsls	r3, r3, #31
 8008638:	d506      	bpl.n	8008648 <__swbuf_r+0x6c>
 800863a:	2e0a      	cmp	r6, #10
 800863c:	d104      	bne.n	8008648 <__swbuf_r+0x6c>
 800863e:	4621      	mov	r1, r4
 8008640:	4628      	mov	r0, r5
 8008642:	f000 f927 	bl	8008894 <_fflush_r>
 8008646:	b988      	cbnz	r0, 800866c <__swbuf_r+0x90>
 8008648:	4638      	mov	r0, r7
 800864a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800864c:	4b0a      	ldr	r3, [pc, #40]	; (8008678 <__swbuf_r+0x9c>)
 800864e:	429c      	cmp	r4, r3
 8008650:	d101      	bne.n	8008656 <__swbuf_r+0x7a>
 8008652:	68ac      	ldr	r4, [r5, #8]
 8008654:	e7cf      	b.n	80085f6 <__swbuf_r+0x1a>
 8008656:	4b09      	ldr	r3, [pc, #36]	; (800867c <__swbuf_r+0xa0>)
 8008658:	429c      	cmp	r4, r3
 800865a:	bf08      	it	eq
 800865c:	68ec      	ldreq	r4, [r5, #12]
 800865e:	e7ca      	b.n	80085f6 <__swbuf_r+0x1a>
 8008660:	4621      	mov	r1, r4
 8008662:	4628      	mov	r0, r5
 8008664:	f000 f81a 	bl	800869c <__swsetup_r>
 8008668:	2800      	cmp	r0, #0
 800866a:	d0cb      	beq.n	8008604 <__swbuf_r+0x28>
 800866c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008670:	e7ea      	b.n	8008648 <__swbuf_r+0x6c>
 8008672:	bf00      	nop
 8008674:	0800917c 	.word	0x0800917c
 8008678:	0800919c 	.word	0x0800919c
 800867c:	0800915c 	.word	0x0800915c

08008680 <__ascii_wctomb>:
 8008680:	b149      	cbz	r1, 8008696 <__ascii_wctomb+0x16>
 8008682:	2aff      	cmp	r2, #255	; 0xff
 8008684:	bf85      	ittet	hi
 8008686:	238a      	movhi	r3, #138	; 0x8a
 8008688:	6003      	strhi	r3, [r0, #0]
 800868a:	700a      	strbls	r2, [r1, #0]
 800868c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008690:	bf98      	it	ls
 8008692:	2001      	movls	r0, #1
 8008694:	4770      	bx	lr
 8008696:	4608      	mov	r0, r1
 8008698:	4770      	bx	lr
	...

0800869c <__swsetup_r>:
 800869c:	4b32      	ldr	r3, [pc, #200]	; (8008768 <__swsetup_r+0xcc>)
 800869e:	b570      	push	{r4, r5, r6, lr}
 80086a0:	681d      	ldr	r5, [r3, #0]
 80086a2:	4606      	mov	r6, r0
 80086a4:	460c      	mov	r4, r1
 80086a6:	b125      	cbz	r5, 80086b2 <__swsetup_r+0x16>
 80086a8:	69ab      	ldr	r3, [r5, #24]
 80086aa:	b913      	cbnz	r3, 80086b2 <__swsetup_r+0x16>
 80086ac:	4628      	mov	r0, r5
 80086ae:	f000 f985 	bl	80089bc <__sinit>
 80086b2:	4b2e      	ldr	r3, [pc, #184]	; (800876c <__swsetup_r+0xd0>)
 80086b4:	429c      	cmp	r4, r3
 80086b6:	d10f      	bne.n	80086d8 <__swsetup_r+0x3c>
 80086b8:	686c      	ldr	r4, [r5, #4]
 80086ba:	89a3      	ldrh	r3, [r4, #12]
 80086bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80086c0:	0719      	lsls	r1, r3, #28
 80086c2:	d42c      	bmi.n	800871e <__swsetup_r+0x82>
 80086c4:	06dd      	lsls	r5, r3, #27
 80086c6:	d411      	bmi.n	80086ec <__swsetup_r+0x50>
 80086c8:	2309      	movs	r3, #9
 80086ca:	6033      	str	r3, [r6, #0]
 80086cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80086d0:	81a3      	strh	r3, [r4, #12]
 80086d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086d6:	e03e      	b.n	8008756 <__swsetup_r+0xba>
 80086d8:	4b25      	ldr	r3, [pc, #148]	; (8008770 <__swsetup_r+0xd4>)
 80086da:	429c      	cmp	r4, r3
 80086dc:	d101      	bne.n	80086e2 <__swsetup_r+0x46>
 80086de:	68ac      	ldr	r4, [r5, #8]
 80086e0:	e7eb      	b.n	80086ba <__swsetup_r+0x1e>
 80086e2:	4b24      	ldr	r3, [pc, #144]	; (8008774 <__swsetup_r+0xd8>)
 80086e4:	429c      	cmp	r4, r3
 80086e6:	bf08      	it	eq
 80086e8:	68ec      	ldreq	r4, [r5, #12]
 80086ea:	e7e6      	b.n	80086ba <__swsetup_r+0x1e>
 80086ec:	0758      	lsls	r0, r3, #29
 80086ee:	d512      	bpl.n	8008716 <__swsetup_r+0x7a>
 80086f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086f2:	b141      	cbz	r1, 8008706 <__swsetup_r+0x6a>
 80086f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086f8:	4299      	cmp	r1, r3
 80086fa:	d002      	beq.n	8008702 <__swsetup_r+0x66>
 80086fc:	4630      	mov	r0, r6
 80086fe:	f7ff fd0b 	bl	8008118 <_free_r>
 8008702:	2300      	movs	r3, #0
 8008704:	6363      	str	r3, [r4, #52]	; 0x34
 8008706:	89a3      	ldrh	r3, [r4, #12]
 8008708:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800870c:	81a3      	strh	r3, [r4, #12]
 800870e:	2300      	movs	r3, #0
 8008710:	6063      	str	r3, [r4, #4]
 8008712:	6923      	ldr	r3, [r4, #16]
 8008714:	6023      	str	r3, [r4, #0]
 8008716:	89a3      	ldrh	r3, [r4, #12]
 8008718:	f043 0308 	orr.w	r3, r3, #8
 800871c:	81a3      	strh	r3, [r4, #12]
 800871e:	6923      	ldr	r3, [r4, #16]
 8008720:	b94b      	cbnz	r3, 8008736 <__swsetup_r+0x9a>
 8008722:	89a3      	ldrh	r3, [r4, #12]
 8008724:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800872c:	d003      	beq.n	8008736 <__swsetup_r+0x9a>
 800872e:	4621      	mov	r1, r4
 8008730:	4630      	mov	r0, r6
 8008732:	f000 fa07 	bl	8008b44 <__smakebuf_r>
 8008736:	89a0      	ldrh	r0, [r4, #12]
 8008738:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800873c:	f010 0301 	ands.w	r3, r0, #1
 8008740:	d00a      	beq.n	8008758 <__swsetup_r+0xbc>
 8008742:	2300      	movs	r3, #0
 8008744:	60a3      	str	r3, [r4, #8]
 8008746:	6963      	ldr	r3, [r4, #20]
 8008748:	425b      	negs	r3, r3
 800874a:	61a3      	str	r3, [r4, #24]
 800874c:	6923      	ldr	r3, [r4, #16]
 800874e:	b943      	cbnz	r3, 8008762 <__swsetup_r+0xc6>
 8008750:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008754:	d1ba      	bne.n	80086cc <__swsetup_r+0x30>
 8008756:	bd70      	pop	{r4, r5, r6, pc}
 8008758:	0781      	lsls	r1, r0, #30
 800875a:	bf58      	it	pl
 800875c:	6963      	ldrpl	r3, [r4, #20]
 800875e:	60a3      	str	r3, [r4, #8]
 8008760:	e7f4      	b.n	800874c <__swsetup_r+0xb0>
 8008762:	2000      	movs	r0, #0
 8008764:	e7f7      	b.n	8008756 <__swsetup_r+0xba>
 8008766:	bf00      	nop
 8008768:	20000014 	.word	0x20000014
 800876c:	0800917c 	.word	0x0800917c
 8008770:	0800919c 	.word	0x0800919c
 8008774:	0800915c 	.word	0x0800915c

08008778 <abort>:
 8008778:	b508      	push	{r3, lr}
 800877a:	2006      	movs	r0, #6
 800877c:	f000 fa4a 	bl	8008c14 <raise>
 8008780:	2001      	movs	r0, #1
 8008782:	f7fd f955 	bl	8005a30 <_exit>
	...

08008788 <__sflush_r>:
 8008788:	898a      	ldrh	r2, [r1, #12]
 800878a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800878e:	4605      	mov	r5, r0
 8008790:	0710      	lsls	r0, r2, #28
 8008792:	460c      	mov	r4, r1
 8008794:	d458      	bmi.n	8008848 <__sflush_r+0xc0>
 8008796:	684b      	ldr	r3, [r1, #4]
 8008798:	2b00      	cmp	r3, #0
 800879a:	dc05      	bgt.n	80087a8 <__sflush_r+0x20>
 800879c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800879e:	2b00      	cmp	r3, #0
 80087a0:	dc02      	bgt.n	80087a8 <__sflush_r+0x20>
 80087a2:	2000      	movs	r0, #0
 80087a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087aa:	2e00      	cmp	r6, #0
 80087ac:	d0f9      	beq.n	80087a2 <__sflush_r+0x1a>
 80087ae:	2300      	movs	r3, #0
 80087b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80087b4:	682f      	ldr	r7, [r5, #0]
 80087b6:	602b      	str	r3, [r5, #0]
 80087b8:	d032      	beq.n	8008820 <__sflush_r+0x98>
 80087ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80087bc:	89a3      	ldrh	r3, [r4, #12]
 80087be:	075a      	lsls	r2, r3, #29
 80087c0:	d505      	bpl.n	80087ce <__sflush_r+0x46>
 80087c2:	6863      	ldr	r3, [r4, #4]
 80087c4:	1ac0      	subs	r0, r0, r3
 80087c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80087c8:	b10b      	cbz	r3, 80087ce <__sflush_r+0x46>
 80087ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80087cc:	1ac0      	subs	r0, r0, r3
 80087ce:	2300      	movs	r3, #0
 80087d0:	4602      	mov	r2, r0
 80087d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087d4:	6a21      	ldr	r1, [r4, #32]
 80087d6:	4628      	mov	r0, r5
 80087d8:	47b0      	blx	r6
 80087da:	1c43      	adds	r3, r0, #1
 80087dc:	89a3      	ldrh	r3, [r4, #12]
 80087de:	d106      	bne.n	80087ee <__sflush_r+0x66>
 80087e0:	6829      	ldr	r1, [r5, #0]
 80087e2:	291d      	cmp	r1, #29
 80087e4:	d82c      	bhi.n	8008840 <__sflush_r+0xb8>
 80087e6:	4a2a      	ldr	r2, [pc, #168]	; (8008890 <__sflush_r+0x108>)
 80087e8:	40ca      	lsrs	r2, r1
 80087ea:	07d6      	lsls	r6, r2, #31
 80087ec:	d528      	bpl.n	8008840 <__sflush_r+0xb8>
 80087ee:	2200      	movs	r2, #0
 80087f0:	6062      	str	r2, [r4, #4]
 80087f2:	04d9      	lsls	r1, r3, #19
 80087f4:	6922      	ldr	r2, [r4, #16]
 80087f6:	6022      	str	r2, [r4, #0]
 80087f8:	d504      	bpl.n	8008804 <__sflush_r+0x7c>
 80087fa:	1c42      	adds	r2, r0, #1
 80087fc:	d101      	bne.n	8008802 <__sflush_r+0x7a>
 80087fe:	682b      	ldr	r3, [r5, #0]
 8008800:	b903      	cbnz	r3, 8008804 <__sflush_r+0x7c>
 8008802:	6560      	str	r0, [r4, #84]	; 0x54
 8008804:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008806:	602f      	str	r7, [r5, #0]
 8008808:	2900      	cmp	r1, #0
 800880a:	d0ca      	beq.n	80087a2 <__sflush_r+0x1a>
 800880c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008810:	4299      	cmp	r1, r3
 8008812:	d002      	beq.n	800881a <__sflush_r+0x92>
 8008814:	4628      	mov	r0, r5
 8008816:	f7ff fc7f 	bl	8008118 <_free_r>
 800881a:	2000      	movs	r0, #0
 800881c:	6360      	str	r0, [r4, #52]	; 0x34
 800881e:	e7c1      	b.n	80087a4 <__sflush_r+0x1c>
 8008820:	6a21      	ldr	r1, [r4, #32]
 8008822:	2301      	movs	r3, #1
 8008824:	4628      	mov	r0, r5
 8008826:	47b0      	blx	r6
 8008828:	1c41      	adds	r1, r0, #1
 800882a:	d1c7      	bne.n	80087bc <__sflush_r+0x34>
 800882c:	682b      	ldr	r3, [r5, #0]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d0c4      	beq.n	80087bc <__sflush_r+0x34>
 8008832:	2b1d      	cmp	r3, #29
 8008834:	d001      	beq.n	800883a <__sflush_r+0xb2>
 8008836:	2b16      	cmp	r3, #22
 8008838:	d101      	bne.n	800883e <__sflush_r+0xb6>
 800883a:	602f      	str	r7, [r5, #0]
 800883c:	e7b1      	b.n	80087a2 <__sflush_r+0x1a>
 800883e:	89a3      	ldrh	r3, [r4, #12]
 8008840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008844:	81a3      	strh	r3, [r4, #12]
 8008846:	e7ad      	b.n	80087a4 <__sflush_r+0x1c>
 8008848:	690f      	ldr	r7, [r1, #16]
 800884a:	2f00      	cmp	r7, #0
 800884c:	d0a9      	beq.n	80087a2 <__sflush_r+0x1a>
 800884e:	0793      	lsls	r3, r2, #30
 8008850:	680e      	ldr	r6, [r1, #0]
 8008852:	bf08      	it	eq
 8008854:	694b      	ldreq	r3, [r1, #20]
 8008856:	600f      	str	r7, [r1, #0]
 8008858:	bf18      	it	ne
 800885a:	2300      	movne	r3, #0
 800885c:	eba6 0807 	sub.w	r8, r6, r7
 8008860:	608b      	str	r3, [r1, #8]
 8008862:	f1b8 0f00 	cmp.w	r8, #0
 8008866:	dd9c      	ble.n	80087a2 <__sflush_r+0x1a>
 8008868:	6a21      	ldr	r1, [r4, #32]
 800886a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800886c:	4643      	mov	r3, r8
 800886e:	463a      	mov	r2, r7
 8008870:	4628      	mov	r0, r5
 8008872:	47b0      	blx	r6
 8008874:	2800      	cmp	r0, #0
 8008876:	dc06      	bgt.n	8008886 <__sflush_r+0xfe>
 8008878:	89a3      	ldrh	r3, [r4, #12]
 800887a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800887e:	81a3      	strh	r3, [r4, #12]
 8008880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008884:	e78e      	b.n	80087a4 <__sflush_r+0x1c>
 8008886:	4407      	add	r7, r0
 8008888:	eba8 0800 	sub.w	r8, r8, r0
 800888c:	e7e9      	b.n	8008862 <__sflush_r+0xda>
 800888e:	bf00      	nop
 8008890:	20400001 	.word	0x20400001

08008894 <_fflush_r>:
 8008894:	b538      	push	{r3, r4, r5, lr}
 8008896:	690b      	ldr	r3, [r1, #16]
 8008898:	4605      	mov	r5, r0
 800889a:	460c      	mov	r4, r1
 800889c:	b913      	cbnz	r3, 80088a4 <_fflush_r+0x10>
 800889e:	2500      	movs	r5, #0
 80088a0:	4628      	mov	r0, r5
 80088a2:	bd38      	pop	{r3, r4, r5, pc}
 80088a4:	b118      	cbz	r0, 80088ae <_fflush_r+0x1a>
 80088a6:	6983      	ldr	r3, [r0, #24]
 80088a8:	b90b      	cbnz	r3, 80088ae <_fflush_r+0x1a>
 80088aa:	f000 f887 	bl	80089bc <__sinit>
 80088ae:	4b14      	ldr	r3, [pc, #80]	; (8008900 <_fflush_r+0x6c>)
 80088b0:	429c      	cmp	r4, r3
 80088b2:	d11b      	bne.n	80088ec <_fflush_r+0x58>
 80088b4:	686c      	ldr	r4, [r5, #4]
 80088b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d0ef      	beq.n	800889e <_fflush_r+0xa>
 80088be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80088c0:	07d0      	lsls	r0, r2, #31
 80088c2:	d404      	bmi.n	80088ce <_fflush_r+0x3a>
 80088c4:	0599      	lsls	r1, r3, #22
 80088c6:	d402      	bmi.n	80088ce <_fflush_r+0x3a>
 80088c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088ca:	f000 f915 	bl	8008af8 <__retarget_lock_acquire_recursive>
 80088ce:	4628      	mov	r0, r5
 80088d0:	4621      	mov	r1, r4
 80088d2:	f7ff ff59 	bl	8008788 <__sflush_r>
 80088d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088d8:	07da      	lsls	r2, r3, #31
 80088da:	4605      	mov	r5, r0
 80088dc:	d4e0      	bmi.n	80088a0 <_fflush_r+0xc>
 80088de:	89a3      	ldrh	r3, [r4, #12]
 80088e0:	059b      	lsls	r3, r3, #22
 80088e2:	d4dd      	bmi.n	80088a0 <_fflush_r+0xc>
 80088e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088e6:	f000 f908 	bl	8008afa <__retarget_lock_release_recursive>
 80088ea:	e7d9      	b.n	80088a0 <_fflush_r+0xc>
 80088ec:	4b05      	ldr	r3, [pc, #20]	; (8008904 <_fflush_r+0x70>)
 80088ee:	429c      	cmp	r4, r3
 80088f0:	d101      	bne.n	80088f6 <_fflush_r+0x62>
 80088f2:	68ac      	ldr	r4, [r5, #8]
 80088f4:	e7df      	b.n	80088b6 <_fflush_r+0x22>
 80088f6:	4b04      	ldr	r3, [pc, #16]	; (8008908 <_fflush_r+0x74>)
 80088f8:	429c      	cmp	r4, r3
 80088fa:	bf08      	it	eq
 80088fc:	68ec      	ldreq	r4, [r5, #12]
 80088fe:	e7da      	b.n	80088b6 <_fflush_r+0x22>
 8008900:	0800917c 	.word	0x0800917c
 8008904:	0800919c 	.word	0x0800919c
 8008908:	0800915c 	.word	0x0800915c

0800890c <std>:
 800890c:	2300      	movs	r3, #0
 800890e:	b510      	push	{r4, lr}
 8008910:	4604      	mov	r4, r0
 8008912:	e9c0 3300 	strd	r3, r3, [r0]
 8008916:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800891a:	6083      	str	r3, [r0, #8]
 800891c:	8181      	strh	r1, [r0, #12]
 800891e:	6643      	str	r3, [r0, #100]	; 0x64
 8008920:	81c2      	strh	r2, [r0, #14]
 8008922:	6183      	str	r3, [r0, #24]
 8008924:	4619      	mov	r1, r3
 8008926:	2208      	movs	r2, #8
 8008928:	305c      	adds	r0, #92	; 0x5c
 800892a:	f7fd fd63 	bl	80063f4 <memset>
 800892e:	4b05      	ldr	r3, [pc, #20]	; (8008944 <std+0x38>)
 8008930:	6263      	str	r3, [r4, #36]	; 0x24
 8008932:	4b05      	ldr	r3, [pc, #20]	; (8008948 <std+0x3c>)
 8008934:	62a3      	str	r3, [r4, #40]	; 0x28
 8008936:	4b05      	ldr	r3, [pc, #20]	; (800894c <std+0x40>)
 8008938:	62e3      	str	r3, [r4, #44]	; 0x2c
 800893a:	4b05      	ldr	r3, [pc, #20]	; (8008950 <std+0x44>)
 800893c:	6224      	str	r4, [r4, #32]
 800893e:	6323      	str	r3, [r4, #48]	; 0x30
 8008940:	bd10      	pop	{r4, pc}
 8008942:	bf00      	nop
 8008944:	08008c4d 	.word	0x08008c4d
 8008948:	08008c6f 	.word	0x08008c6f
 800894c:	08008ca7 	.word	0x08008ca7
 8008950:	08008ccb 	.word	0x08008ccb

08008954 <_cleanup_r>:
 8008954:	4901      	ldr	r1, [pc, #4]	; (800895c <_cleanup_r+0x8>)
 8008956:	f000 b8af 	b.w	8008ab8 <_fwalk_reent>
 800895a:	bf00      	nop
 800895c:	08008895 	.word	0x08008895

08008960 <__sfmoreglue>:
 8008960:	b570      	push	{r4, r5, r6, lr}
 8008962:	1e4a      	subs	r2, r1, #1
 8008964:	2568      	movs	r5, #104	; 0x68
 8008966:	4355      	muls	r5, r2
 8008968:	460e      	mov	r6, r1
 800896a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800896e:	f7ff fc23 	bl	80081b8 <_malloc_r>
 8008972:	4604      	mov	r4, r0
 8008974:	b140      	cbz	r0, 8008988 <__sfmoreglue+0x28>
 8008976:	2100      	movs	r1, #0
 8008978:	e9c0 1600 	strd	r1, r6, [r0]
 800897c:	300c      	adds	r0, #12
 800897e:	60a0      	str	r0, [r4, #8]
 8008980:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008984:	f7fd fd36 	bl	80063f4 <memset>
 8008988:	4620      	mov	r0, r4
 800898a:	bd70      	pop	{r4, r5, r6, pc}

0800898c <__sfp_lock_acquire>:
 800898c:	4801      	ldr	r0, [pc, #4]	; (8008994 <__sfp_lock_acquire+0x8>)
 800898e:	f000 b8b3 	b.w	8008af8 <__retarget_lock_acquire_recursive>
 8008992:	bf00      	nop
 8008994:	200003f8 	.word	0x200003f8

08008998 <__sfp_lock_release>:
 8008998:	4801      	ldr	r0, [pc, #4]	; (80089a0 <__sfp_lock_release+0x8>)
 800899a:	f000 b8ae 	b.w	8008afa <__retarget_lock_release_recursive>
 800899e:	bf00      	nop
 80089a0:	200003f8 	.word	0x200003f8

080089a4 <__sinit_lock_acquire>:
 80089a4:	4801      	ldr	r0, [pc, #4]	; (80089ac <__sinit_lock_acquire+0x8>)
 80089a6:	f000 b8a7 	b.w	8008af8 <__retarget_lock_acquire_recursive>
 80089aa:	bf00      	nop
 80089ac:	200003f3 	.word	0x200003f3

080089b0 <__sinit_lock_release>:
 80089b0:	4801      	ldr	r0, [pc, #4]	; (80089b8 <__sinit_lock_release+0x8>)
 80089b2:	f000 b8a2 	b.w	8008afa <__retarget_lock_release_recursive>
 80089b6:	bf00      	nop
 80089b8:	200003f3 	.word	0x200003f3

080089bc <__sinit>:
 80089bc:	b510      	push	{r4, lr}
 80089be:	4604      	mov	r4, r0
 80089c0:	f7ff fff0 	bl	80089a4 <__sinit_lock_acquire>
 80089c4:	69a3      	ldr	r3, [r4, #24]
 80089c6:	b11b      	cbz	r3, 80089d0 <__sinit+0x14>
 80089c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089cc:	f7ff bff0 	b.w	80089b0 <__sinit_lock_release>
 80089d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80089d4:	6523      	str	r3, [r4, #80]	; 0x50
 80089d6:	4b13      	ldr	r3, [pc, #76]	; (8008a24 <__sinit+0x68>)
 80089d8:	4a13      	ldr	r2, [pc, #76]	; (8008a28 <__sinit+0x6c>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80089de:	42a3      	cmp	r3, r4
 80089e0:	bf04      	itt	eq
 80089e2:	2301      	moveq	r3, #1
 80089e4:	61a3      	streq	r3, [r4, #24]
 80089e6:	4620      	mov	r0, r4
 80089e8:	f000 f820 	bl	8008a2c <__sfp>
 80089ec:	6060      	str	r0, [r4, #4]
 80089ee:	4620      	mov	r0, r4
 80089f0:	f000 f81c 	bl	8008a2c <__sfp>
 80089f4:	60a0      	str	r0, [r4, #8]
 80089f6:	4620      	mov	r0, r4
 80089f8:	f000 f818 	bl	8008a2c <__sfp>
 80089fc:	2200      	movs	r2, #0
 80089fe:	60e0      	str	r0, [r4, #12]
 8008a00:	2104      	movs	r1, #4
 8008a02:	6860      	ldr	r0, [r4, #4]
 8008a04:	f7ff ff82 	bl	800890c <std>
 8008a08:	68a0      	ldr	r0, [r4, #8]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	2109      	movs	r1, #9
 8008a0e:	f7ff ff7d 	bl	800890c <std>
 8008a12:	68e0      	ldr	r0, [r4, #12]
 8008a14:	2202      	movs	r2, #2
 8008a16:	2112      	movs	r1, #18
 8008a18:	f7ff ff78 	bl	800890c <std>
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	61a3      	str	r3, [r4, #24]
 8008a20:	e7d2      	b.n	80089c8 <__sinit+0xc>
 8008a22:	bf00      	nop
 8008a24:	08008dd8 	.word	0x08008dd8
 8008a28:	08008955 	.word	0x08008955

08008a2c <__sfp>:
 8008a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a2e:	4607      	mov	r7, r0
 8008a30:	f7ff ffac 	bl	800898c <__sfp_lock_acquire>
 8008a34:	4b1e      	ldr	r3, [pc, #120]	; (8008ab0 <__sfp+0x84>)
 8008a36:	681e      	ldr	r6, [r3, #0]
 8008a38:	69b3      	ldr	r3, [r6, #24]
 8008a3a:	b913      	cbnz	r3, 8008a42 <__sfp+0x16>
 8008a3c:	4630      	mov	r0, r6
 8008a3e:	f7ff ffbd 	bl	80089bc <__sinit>
 8008a42:	3648      	adds	r6, #72	; 0x48
 8008a44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008a48:	3b01      	subs	r3, #1
 8008a4a:	d503      	bpl.n	8008a54 <__sfp+0x28>
 8008a4c:	6833      	ldr	r3, [r6, #0]
 8008a4e:	b30b      	cbz	r3, 8008a94 <__sfp+0x68>
 8008a50:	6836      	ldr	r6, [r6, #0]
 8008a52:	e7f7      	b.n	8008a44 <__sfp+0x18>
 8008a54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008a58:	b9d5      	cbnz	r5, 8008a90 <__sfp+0x64>
 8008a5a:	4b16      	ldr	r3, [pc, #88]	; (8008ab4 <__sfp+0x88>)
 8008a5c:	60e3      	str	r3, [r4, #12]
 8008a5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008a62:	6665      	str	r5, [r4, #100]	; 0x64
 8008a64:	f000 f847 	bl	8008af6 <__retarget_lock_init_recursive>
 8008a68:	f7ff ff96 	bl	8008998 <__sfp_lock_release>
 8008a6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008a70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008a74:	6025      	str	r5, [r4, #0]
 8008a76:	61a5      	str	r5, [r4, #24]
 8008a78:	2208      	movs	r2, #8
 8008a7a:	4629      	mov	r1, r5
 8008a7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008a80:	f7fd fcb8 	bl	80063f4 <memset>
 8008a84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008a88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008a8c:	4620      	mov	r0, r4
 8008a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a90:	3468      	adds	r4, #104	; 0x68
 8008a92:	e7d9      	b.n	8008a48 <__sfp+0x1c>
 8008a94:	2104      	movs	r1, #4
 8008a96:	4638      	mov	r0, r7
 8008a98:	f7ff ff62 	bl	8008960 <__sfmoreglue>
 8008a9c:	4604      	mov	r4, r0
 8008a9e:	6030      	str	r0, [r6, #0]
 8008aa0:	2800      	cmp	r0, #0
 8008aa2:	d1d5      	bne.n	8008a50 <__sfp+0x24>
 8008aa4:	f7ff ff78 	bl	8008998 <__sfp_lock_release>
 8008aa8:	230c      	movs	r3, #12
 8008aaa:	603b      	str	r3, [r7, #0]
 8008aac:	e7ee      	b.n	8008a8c <__sfp+0x60>
 8008aae:	bf00      	nop
 8008ab0:	08008dd8 	.word	0x08008dd8
 8008ab4:	ffff0001 	.word	0xffff0001

08008ab8 <_fwalk_reent>:
 8008ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008abc:	4606      	mov	r6, r0
 8008abe:	4688      	mov	r8, r1
 8008ac0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008ac4:	2700      	movs	r7, #0
 8008ac6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008aca:	f1b9 0901 	subs.w	r9, r9, #1
 8008ace:	d505      	bpl.n	8008adc <_fwalk_reent+0x24>
 8008ad0:	6824      	ldr	r4, [r4, #0]
 8008ad2:	2c00      	cmp	r4, #0
 8008ad4:	d1f7      	bne.n	8008ac6 <_fwalk_reent+0xe>
 8008ad6:	4638      	mov	r0, r7
 8008ad8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008adc:	89ab      	ldrh	r3, [r5, #12]
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d907      	bls.n	8008af2 <_fwalk_reent+0x3a>
 8008ae2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	d003      	beq.n	8008af2 <_fwalk_reent+0x3a>
 8008aea:	4629      	mov	r1, r5
 8008aec:	4630      	mov	r0, r6
 8008aee:	47c0      	blx	r8
 8008af0:	4307      	orrs	r7, r0
 8008af2:	3568      	adds	r5, #104	; 0x68
 8008af4:	e7e9      	b.n	8008aca <_fwalk_reent+0x12>

08008af6 <__retarget_lock_init_recursive>:
 8008af6:	4770      	bx	lr

08008af8 <__retarget_lock_acquire_recursive>:
 8008af8:	4770      	bx	lr

08008afa <__retarget_lock_release_recursive>:
 8008afa:	4770      	bx	lr

08008afc <__swhatbuf_r>:
 8008afc:	b570      	push	{r4, r5, r6, lr}
 8008afe:	460e      	mov	r6, r1
 8008b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b04:	2900      	cmp	r1, #0
 8008b06:	b096      	sub	sp, #88	; 0x58
 8008b08:	4614      	mov	r4, r2
 8008b0a:	461d      	mov	r5, r3
 8008b0c:	da07      	bge.n	8008b1e <__swhatbuf_r+0x22>
 8008b0e:	2300      	movs	r3, #0
 8008b10:	602b      	str	r3, [r5, #0]
 8008b12:	89b3      	ldrh	r3, [r6, #12]
 8008b14:	061a      	lsls	r2, r3, #24
 8008b16:	d410      	bmi.n	8008b3a <__swhatbuf_r+0x3e>
 8008b18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b1c:	e00e      	b.n	8008b3c <__swhatbuf_r+0x40>
 8008b1e:	466a      	mov	r2, sp
 8008b20:	f000 f8fa 	bl	8008d18 <_fstat_r>
 8008b24:	2800      	cmp	r0, #0
 8008b26:	dbf2      	blt.n	8008b0e <__swhatbuf_r+0x12>
 8008b28:	9a01      	ldr	r2, [sp, #4]
 8008b2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008b2e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008b32:	425a      	negs	r2, r3
 8008b34:	415a      	adcs	r2, r3
 8008b36:	602a      	str	r2, [r5, #0]
 8008b38:	e7ee      	b.n	8008b18 <__swhatbuf_r+0x1c>
 8008b3a:	2340      	movs	r3, #64	; 0x40
 8008b3c:	2000      	movs	r0, #0
 8008b3e:	6023      	str	r3, [r4, #0]
 8008b40:	b016      	add	sp, #88	; 0x58
 8008b42:	bd70      	pop	{r4, r5, r6, pc}

08008b44 <__smakebuf_r>:
 8008b44:	898b      	ldrh	r3, [r1, #12]
 8008b46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008b48:	079d      	lsls	r5, r3, #30
 8008b4a:	4606      	mov	r6, r0
 8008b4c:	460c      	mov	r4, r1
 8008b4e:	d507      	bpl.n	8008b60 <__smakebuf_r+0x1c>
 8008b50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008b54:	6023      	str	r3, [r4, #0]
 8008b56:	6123      	str	r3, [r4, #16]
 8008b58:	2301      	movs	r3, #1
 8008b5a:	6163      	str	r3, [r4, #20]
 8008b5c:	b002      	add	sp, #8
 8008b5e:	bd70      	pop	{r4, r5, r6, pc}
 8008b60:	ab01      	add	r3, sp, #4
 8008b62:	466a      	mov	r2, sp
 8008b64:	f7ff ffca 	bl	8008afc <__swhatbuf_r>
 8008b68:	9900      	ldr	r1, [sp, #0]
 8008b6a:	4605      	mov	r5, r0
 8008b6c:	4630      	mov	r0, r6
 8008b6e:	f7ff fb23 	bl	80081b8 <_malloc_r>
 8008b72:	b948      	cbnz	r0, 8008b88 <__smakebuf_r+0x44>
 8008b74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b78:	059a      	lsls	r2, r3, #22
 8008b7a:	d4ef      	bmi.n	8008b5c <__smakebuf_r+0x18>
 8008b7c:	f023 0303 	bic.w	r3, r3, #3
 8008b80:	f043 0302 	orr.w	r3, r3, #2
 8008b84:	81a3      	strh	r3, [r4, #12]
 8008b86:	e7e3      	b.n	8008b50 <__smakebuf_r+0xc>
 8008b88:	4b0d      	ldr	r3, [pc, #52]	; (8008bc0 <__smakebuf_r+0x7c>)
 8008b8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008b8c:	89a3      	ldrh	r3, [r4, #12]
 8008b8e:	6020      	str	r0, [r4, #0]
 8008b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b94:	81a3      	strh	r3, [r4, #12]
 8008b96:	9b00      	ldr	r3, [sp, #0]
 8008b98:	6163      	str	r3, [r4, #20]
 8008b9a:	9b01      	ldr	r3, [sp, #4]
 8008b9c:	6120      	str	r0, [r4, #16]
 8008b9e:	b15b      	cbz	r3, 8008bb8 <__smakebuf_r+0x74>
 8008ba0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ba4:	4630      	mov	r0, r6
 8008ba6:	f000 f8c9 	bl	8008d3c <_isatty_r>
 8008baa:	b128      	cbz	r0, 8008bb8 <__smakebuf_r+0x74>
 8008bac:	89a3      	ldrh	r3, [r4, #12]
 8008bae:	f023 0303 	bic.w	r3, r3, #3
 8008bb2:	f043 0301 	orr.w	r3, r3, #1
 8008bb6:	81a3      	strh	r3, [r4, #12]
 8008bb8:	89a0      	ldrh	r0, [r4, #12]
 8008bba:	4305      	orrs	r5, r0
 8008bbc:	81a5      	strh	r5, [r4, #12]
 8008bbe:	e7cd      	b.n	8008b5c <__smakebuf_r+0x18>
 8008bc0:	08008955 	.word	0x08008955

08008bc4 <_raise_r>:
 8008bc4:	291f      	cmp	r1, #31
 8008bc6:	b538      	push	{r3, r4, r5, lr}
 8008bc8:	4604      	mov	r4, r0
 8008bca:	460d      	mov	r5, r1
 8008bcc:	d904      	bls.n	8008bd8 <_raise_r+0x14>
 8008bce:	2316      	movs	r3, #22
 8008bd0:	6003      	str	r3, [r0, #0]
 8008bd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bd6:	bd38      	pop	{r3, r4, r5, pc}
 8008bd8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008bda:	b112      	cbz	r2, 8008be2 <_raise_r+0x1e>
 8008bdc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008be0:	b94b      	cbnz	r3, 8008bf6 <_raise_r+0x32>
 8008be2:	4620      	mov	r0, r4
 8008be4:	f000 f830 	bl	8008c48 <_getpid_r>
 8008be8:	462a      	mov	r2, r5
 8008bea:	4601      	mov	r1, r0
 8008bec:	4620      	mov	r0, r4
 8008bee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bf2:	f000 b817 	b.w	8008c24 <_kill_r>
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d00a      	beq.n	8008c10 <_raise_r+0x4c>
 8008bfa:	1c59      	adds	r1, r3, #1
 8008bfc:	d103      	bne.n	8008c06 <_raise_r+0x42>
 8008bfe:	2316      	movs	r3, #22
 8008c00:	6003      	str	r3, [r0, #0]
 8008c02:	2001      	movs	r0, #1
 8008c04:	e7e7      	b.n	8008bd6 <_raise_r+0x12>
 8008c06:	2400      	movs	r4, #0
 8008c08:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008c0c:	4628      	mov	r0, r5
 8008c0e:	4798      	blx	r3
 8008c10:	2000      	movs	r0, #0
 8008c12:	e7e0      	b.n	8008bd6 <_raise_r+0x12>

08008c14 <raise>:
 8008c14:	4b02      	ldr	r3, [pc, #8]	; (8008c20 <raise+0xc>)
 8008c16:	4601      	mov	r1, r0
 8008c18:	6818      	ldr	r0, [r3, #0]
 8008c1a:	f7ff bfd3 	b.w	8008bc4 <_raise_r>
 8008c1e:	bf00      	nop
 8008c20:	20000014 	.word	0x20000014

08008c24 <_kill_r>:
 8008c24:	b538      	push	{r3, r4, r5, lr}
 8008c26:	4d07      	ldr	r5, [pc, #28]	; (8008c44 <_kill_r+0x20>)
 8008c28:	2300      	movs	r3, #0
 8008c2a:	4604      	mov	r4, r0
 8008c2c:	4608      	mov	r0, r1
 8008c2e:	4611      	mov	r1, r2
 8008c30:	602b      	str	r3, [r5, #0]
 8008c32:	f7fc feed 	bl	8005a10 <_kill>
 8008c36:	1c43      	adds	r3, r0, #1
 8008c38:	d102      	bne.n	8008c40 <_kill_r+0x1c>
 8008c3a:	682b      	ldr	r3, [r5, #0]
 8008c3c:	b103      	cbz	r3, 8008c40 <_kill_r+0x1c>
 8008c3e:	6023      	str	r3, [r4, #0]
 8008c40:	bd38      	pop	{r3, r4, r5, pc}
 8008c42:	bf00      	nop
 8008c44:	200003ec 	.word	0x200003ec

08008c48 <_getpid_r>:
 8008c48:	f7fc beda 	b.w	8005a00 <_getpid>

08008c4c <__sread>:
 8008c4c:	b510      	push	{r4, lr}
 8008c4e:	460c      	mov	r4, r1
 8008c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c54:	f000 f894 	bl	8008d80 <_read_r>
 8008c58:	2800      	cmp	r0, #0
 8008c5a:	bfab      	itete	ge
 8008c5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c5e:	89a3      	ldrhlt	r3, [r4, #12]
 8008c60:	181b      	addge	r3, r3, r0
 8008c62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c66:	bfac      	ite	ge
 8008c68:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c6a:	81a3      	strhlt	r3, [r4, #12]
 8008c6c:	bd10      	pop	{r4, pc}

08008c6e <__swrite>:
 8008c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c72:	461f      	mov	r7, r3
 8008c74:	898b      	ldrh	r3, [r1, #12]
 8008c76:	05db      	lsls	r3, r3, #23
 8008c78:	4605      	mov	r5, r0
 8008c7a:	460c      	mov	r4, r1
 8008c7c:	4616      	mov	r6, r2
 8008c7e:	d505      	bpl.n	8008c8c <__swrite+0x1e>
 8008c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c84:	2302      	movs	r3, #2
 8008c86:	2200      	movs	r2, #0
 8008c88:	f000 f868 	bl	8008d5c <_lseek_r>
 8008c8c:	89a3      	ldrh	r3, [r4, #12]
 8008c8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c96:	81a3      	strh	r3, [r4, #12]
 8008c98:	4632      	mov	r2, r6
 8008c9a:	463b      	mov	r3, r7
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ca2:	f000 b817 	b.w	8008cd4 <_write_r>

08008ca6 <__sseek>:
 8008ca6:	b510      	push	{r4, lr}
 8008ca8:	460c      	mov	r4, r1
 8008caa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cae:	f000 f855 	bl	8008d5c <_lseek_r>
 8008cb2:	1c43      	adds	r3, r0, #1
 8008cb4:	89a3      	ldrh	r3, [r4, #12]
 8008cb6:	bf15      	itete	ne
 8008cb8:	6560      	strne	r0, [r4, #84]	; 0x54
 8008cba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008cbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008cc2:	81a3      	strheq	r3, [r4, #12]
 8008cc4:	bf18      	it	ne
 8008cc6:	81a3      	strhne	r3, [r4, #12]
 8008cc8:	bd10      	pop	{r4, pc}

08008cca <__sclose>:
 8008cca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cce:	f000 b813 	b.w	8008cf8 <_close_r>
	...

08008cd4 <_write_r>:
 8008cd4:	b538      	push	{r3, r4, r5, lr}
 8008cd6:	4d07      	ldr	r5, [pc, #28]	; (8008cf4 <_write_r+0x20>)
 8008cd8:	4604      	mov	r4, r0
 8008cda:	4608      	mov	r0, r1
 8008cdc:	4611      	mov	r1, r2
 8008cde:	2200      	movs	r2, #0
 8008ce0:	602a      	str	r2, [r5, #0]
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	f7fc fecb 	bl	8005a7e <_write>
 8008ce8:	1c43      	adds	r3, r0, #1
 8008cea:	d102      	bne.n	8008cf2 <_write_r+0x1e>
 8008cec:	682b      	ldr	r3, [r5, #0]
 8008cee:	b103      	cbz	r3, 8008cf2 <_write_r+0x1e>
 8008cf0:	6023      	str	r3, [r4, #0]
 8008cf2:	bd38      	pop	{r3, r4, r5, pc}
 8008cf4:	200003ec 	.word	0x200003ec

08008cf8 <_close_r>:
 8008cf8:	b538      	push	{r3, r4, r5, lr}
 8008cfa:	4d06      	ldr	r5, [pc, #24]	; (8008d14 <_close_r+0x1c>)
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	4604      	mov	r4, r0
 8008d00:	4608      	mov	r0, r1
 8008d02:	602b      	str	r3, [r5, #0]
 8008d04:	f7fc ff04 	bl	8005b10 <_close>
 8008d08:	1c43      	adds	r3, r0, #1
 8008d0a:	d102      	bne.n	8008d12 <_close_r+0x1a>
 8008d0c:	682b      	ldr	r3, [r5, #0]
 8008d0e:	b103      	cbz	r3, 8008d12 <_close_r+0x1a>
 8008d10:	6023      	str	r3, [r4, #0]
 8008d12:	bd38      	pop	{r3, r4, r5, pc}
 8008d14:	200003ec 	.word	0x200003ec

08008d18 <_fstat_r>:
 8008d18:	b538      	push	{r3, r4, r5, lr}
 8008d1a:	4d07      	ldr	r5, [pc, #28]	; (8008d38 <_fstat_r+0x20>)
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	4604      	mov	r4, r0
 8008d20:	4608      	mov	r0, r1
 8008d22:	4611      	mov	r1, r2
 8008d24:	602b      	str	r3, [r5, #0]
 8008d26:	f7fc feff 	bl	8005b28 <_fstat>
 8008d2a:	1c43      	adds	r3, r0, #1
 8008d2c:	d102      	bne.n	8008d34 <_fstat_r+0x1c>
 8008d2e:	682b      	ldr	r3, [r5, #0]
 8008d30:	b103      	cbz	r3, 8008d34 <_fstat_r+0x1c>
 8008d32:	6023      	str	r3, [r4, #0]
 8008d34:	bd38      	pop	{r3, r4, r5, pc}
 8008d36:	bf00      	nop
 8008d38:	200003ec 	.word	0x200003ec

08008d3c <_isatty_r>:
 8008d3c:	b538      	push	{r3, r4, r5, lr}
 8008d3e:	4d06      	ldr	r5, [pc, #24]	; (8008d58 <_isatty_r+0x1c>)
 8008d40:	2300      	movs	r3, #0
 8008d42:	4604      	mov	r4, r0
 8008d44:	4608      	mov	r0, r1
 8008d46:	602b      	str	r3, [r5, #0]
 8008d48:	f7fc fefe 	bl	8005b48 <_isatty>
 8008d4c:	1c43      	adds	r3, r0, #1
 8008d4e:	d102      	bne.n	8008d56 <_isatty_r+0x1a>
 8008d50:	682b      	ldr	r3, [r5, #0]
 8008d52:	b103      	cbz	r3, 8008d56 <_isatty_r+0x1a>
 8008d54:	6023      	str	r3, [r4, #0]
 8008d56:	bd38      	pop	{r3, r4, r5, pc}
 8008d58:	200003ec 	.word	0x200003ec

08008d5c <_lseek_r>:
 8008d5c:	b538      	push	{r3, r4, r5, lr}
 8008d5e:	4d07      	ldr	r5, [pc, #28]	; (8008d7c <_lseek_r+0x20>)
 8008d60:	4604      	mov	r4, r0
 8008d62:	4608      	mov	r0, r1
 8008d64:	4611      	mov	r1, r2
 8008d66:	2200      	movs	r2, #0
 8008d68:	602a      	str	r2, [r5, #0]
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	f7fc fef7 	bl	8005b5e <_lseek>
 8008d70:	1c43      	adds	r3, r0, #1
 8008d72:	d102      	bne.n	8008d7a <_lseek_r+0x1e>
 8008d74:	682b      	ldr	r3, [r5, #0]
 8008d76:	b103      	cbz	r3, 8008d7a <_lseek_r+0x1e>
 8008d78:	6023      	str	r3, [r4, #0]
 8008d7a:	bd38      	pop	{r3, r4, r5, pc}
 8008d7c:	200003ec 	.word	0x200003ec

08008d80 <_read_r>:
 8008d80:	b538      	push	{r3, r4, r5, lr}
 8008d82:	4d07      	ldr	r5, [pc, #28]	; (8008da0 <_read_r+0x20>)
 8008d84:	4604      	mov	r4, r0
 8008d86:	4608      	mov	r0, r1
 8008d88:	4611      	mov	r1, r2
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	602a      	str	r2, [r5, #0]
 8008d8e:	461a      	mov	r2, r3
 8008d90:	f7fc fe58 	bl	8005a44 <_read>
 8008d94:	1c43      	adds	r3, r0, #1
 8008d96:	d102      	bne.n	8008d9e <_read_r+0x1e>
 8008d98:	682b      	ldr	r3, [r5, #0]
 8008d9a:	b103      	cbz	r3, 8008d9e <_read_r+0x1e>
 8008d9c:	6023      	str	r3, [r4, #0]
 8008d9e:	bd38      	pop	{r3, r4, r5, pc}
 8008da0:	200003ec 	.word	0x200003ec

08008da4 <_init>:
 8008da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008da6:	bf00      	nop
 8008da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008daa:	bc08      	pop	{r3}
 8008dac:	469e      	mov	lr, r3
 8008dae:	4770      	bx	lr

08008db0 <_fini>:
 8008db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008db2:	bf00      	nop
 8008db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008db6:	bc08      	pop	{r3}
 8008db8:	469e      	mov	lr, r3
 8008dba:	4770      	bx	lr
